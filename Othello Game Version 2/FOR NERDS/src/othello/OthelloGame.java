/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package othello;

import everythingboardrelated.MouseOverTiles;
import everythingboardrelated.SetupBoard;
import gamenoises.Talk;
import java.awt.Color;
import javax.swing.ImageIcon;
import gamenoises.GameNoise;

/**
 *
 * @author Dillon
 */
public class OthelloGame extends javax.swing.JFrame {

    /**
     * Creates new form OthelloGame
     */
    
    MouseOverTiles mouseOver;
    Talk talker;
    GameNoise noises;
    
    public OthelloGame() {
        initComponents();
        
        noises = new GameNoise();
        SetupBoard setup = new SetupBoard();
        setup.setUpBoard(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, gameBoard, backgroundLBL, blackPieceLBL, whitePieceLBL, playerTurnLabel, restartButton);
        
        this.setSize(1045, 820);
        this.setLocation(400, 200);
        
        mouseOver = new MouseOverTiles();
        
        tile1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile1MouseExited(evt);
            }
        });

        tile2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile2MouseExited(evt);
            }
        });

        tile3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile3MouseExited(evt);
            }
        });

        tile4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile4MouseExited(evt);
            }
        });

        tile5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile5MouseExited(evt);
            }
        });

        tile6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile6MouseExited(evt);
            }
        });

        tile7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile7MouseExited(evt);
            }
        });

        tile8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile8MouseExited(evt);
            }
        });

        tile9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile9MouseExited(evt);
            }
        });

        tile10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile10MouseExited(evt);
            }
        });

        tile11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile11MouseExited(evt);
            }
        });

        tile12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile12MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile12MouseExited(evt);
            }
        });

        tile13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile13MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile13MouseExited(evt);
            }
        });

        tile14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile14MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile14MouseExited(evt);
            }
        });

        tile15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile15MouseExited(evt);
            }
        });

        tile16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile16MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile16MouseExited(evt);
            }
        });

        tile17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile17MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile17MouseExited(evt);
            }
        });

        tile18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile18MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile18MouseExited(evt);
            }
        });

        tile19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile19MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile19MouseExited(evt);
            }
        });

        tile20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile20MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile20MouseExited(evt);
            }
        });

        tile21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile21MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile21MouseExited(evt);
            }
        });

        tile22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile22MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile22MouseExited(evt);
            }
        });

        tile23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile23MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile23MouseExited(evt);
            }
        });

        tile24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile24MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile24MouseExited(evt);
            }
        });

        tile25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile25MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile25MouseExited(evt);
            }
        });

        tile26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile26MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile26MouseExited(evt);
            }
        });

        tile27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile27MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile27MouseExited(evt);
            }
        });

        tile28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile28MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile28MouseExited(evt);
            }
        });

        tile29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile29MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile29MouseExited(evt);
            }
        });

        tile30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile30MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile30MouseExited(evt);
            }
        });

        tile31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile31MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile31MouseExited(evt);
            }
        });

        tile32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile32MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile32MouseExited(evt);
            }
        });

        tile33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile33MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile33MouseExited(evt);
            }
        });

        tile34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile34MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile34MouseExited(evt);
            }
        });

        tile35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile35MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile35MouseExited(evt);
            }
        });

        tile36.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile36MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile36MouseExited(evt);
            }
        });

        tile37.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile37MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile37MouseExited(evt);
            }
        });

        tile38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile38MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile38MouseExited(evt);
            }
        });

        tile39.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile39MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile39MouseExited(evt);
            }
        });

        tile40.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile40MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile40MouseExited(evt);
            }
        });

        tile41.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile41MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile41MouseExited(evt);
            }
        });

        tile42.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile42MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile42MouseExited(evt);
            }
        });

        tile43.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile43MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile43MouseExited(evt);
            }
        });

        tile44.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile44MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile44MouseExited(evt);
            }
        });

        tile45.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile45MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile45MouseExited(evt);
            }
        });

        tile46.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile46MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile46MouseExited(evt);
            }
        });

        tile47.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile47MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile47MouseExited(evt);
            }
        });

        tile48.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile48MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile48MouseExited(evt);
            }
        });

        tile49.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile49MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile49MouseExited(evt);
            }
        });

        tile50.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile50MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile50MouseExited(evt);
            }
        });

        tile51.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile51MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile51MouseExited(evt);
            }
        });

        tile52.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile52MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile52MouseExited(evt);
            }
        });

        tile53.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile53MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile53MouseExited(evt);
            }
        });

        tile54.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile54MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile54MouseExited(evt);
            }
        });

        tile55.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile55MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile55MouseExited(evt);
            }
        });

        tile56.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile56MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile56MouseExited(evt);
            }
        });

        tile57.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile57MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile57MouseExited(evt);
            }
        });

        tile58.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile58MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile58MouseExited(evt);
            }
        });

        tile59.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile59MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile59MouseExited(evt);
            }
        });

        tile60.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile60MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile60MouseExited(evt);
            }
        });

        tile61.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile61MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile61MouseExited(evt);
            }
        });

        tile62.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile62MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile62MouseExited(evt);
            }
        });

        tile63.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile63MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile63MouseExited(evt);
            }
        });

        tile64.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tile64MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tile64MouseExited(evt);
            }
        });
        
        talker = new Talk();
        talker.startOfGame();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    int p1TilesControlled = 2;
    int p2TilesControlled = 2;
    int p1GameWon = 0;
    int p1GameLose = 0;
    int p2GameWon = 0;
    int p2GameLose = 0;
    int tie = 0;
    String empty = "GameImages/Othello Empty Piece.jpg";
    String whitePiece = "GameImages/White Piece.jpg";
    String blackPiece = "GameImages/Black Piece.jpg";
    String gameBoardPath = "GameImages/Othello Board.jpg";
    String background = "GameImages/Othello Background.jpg";
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel200 = new javax.swing.JLabel();
        jLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        playerTurnLabel = new javax.swing.JLabel();
        p2TilesControlledLabel = new javax.swing.JLabel();
        p1TilesControlledLabel = new javax.swing.JLabel();
        tile1 = new javax.swing.JButton();
        tile2 = new javax.swing.JButton();
        tile3 = new javax.swing.JButton();
        tile4 = new javax.swing.JButton();
        tile5 = new javax.swing.JButton();
        tile6 = new javax.swing.JButton();
        tile7 = new javax.swing.JButton();
        tile8 = new javax.swing.JButton();
        tile9 = new javax.swing.JButton();
        tile10 = new javax.swing.JButton();
        tile11 = new javax.swing.JButton();
        tile12 = new javax.swing.JButton();
        tile13 = new javax.swing.JButton();
        tile14 = new javax.swing.JButton();
        tile15 = new javax.swing.JButton();
        tile16 = new javax.swing.JButton();
        tile17 = new javax.swing.JButton();
        tile18 = new javax.swing.JButton();
        tile19 = new javax.swing.JButton();
        tile20 = new javax.swing.JButton();
        tile21 = new javax.swing.JButton();
        tile22 = new javax.swing.JButton();
        tile23 = new javax.swing.JButton();
        tile24 = new javax.swing.JButton();
        tile25 = new javax.swing.JButton();
        tile26 = new javax.swing.JButton();
        tile27 = new javax.swing.JButton();
        tile28 = new javax.swing.JButton();
        tile29 = new javax.swing.JButton();
        tile30 = new javax.swing.JButton();
        tile31 = new javax.swing.JButton();
        tile32 = new javax.swing.JButton();
        tile33 = new javax.swing.JButton();
        tile34 = new javax.swing.JButton();
        tile35 = new javax.swing.JButton();
        tile36 = new javax.swing.JButton();
        tile37 = new javax.swing.JButton();
        tile38 = new javax.swing.JButton();
        tile39 = new javax.swing.JButton();
        tile40 = new javax.swing.JButton();
        tile41 = new javax.swing.JButton();
        tile42 = new javax.swing.JButton();
        tile43 = new javax.swing.JButton();
        tile44 = new javax.swing.JButton();
        tile45 = new javax.swing.JButton();
        tile46 = new javax.swing.JButton();
        tile47 = new javax.swing.JButton();
        tile48 = new javax.swing.JButton();
        tile49 = new javax.swing.JButton();
        tile50 = new javax.swing.JButton();
        tile51 = new javax.swing.JButton();
        tile52 = new javax.swing.JButton();
        tile53 = new javax.swing.JButton();
        tile54 = new javax.swing.JButton();
        tile55 = new javax.swing.JButton();
        tile56 = new javax.swing.JButton();
        tile57 = new javax.swing.JButton();
        tile58 = new javax.swing.JButton();
        tile59 = new javax.swing.JButton();
        tile60 = new javax.swing.JButton();
        tile61 = new javax.swing.JButton();
        tile62 = new javax.swing.JButton();
        tile63 = new javax.swing.JButton();
        tile64 = new javax.swing.JButton();
        p2WinLabel = new javax.swing.JLabel();
        p2LoseLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        gameBoard = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        p1LoseLabel = new javax.swing.JLabel();
        p1WinLabel = new javax.swing.JLabel();
        whitePieceLBL = new javax.swing.JLabel();
        blackPieceLBL = new javax.swing.JLabel();
        restartButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        resetGameButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        tieGameLabel = new javax.swing.JLabel();
        backgroundLBL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dillon's Othello Game");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Player 1:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 20, 49, 16);

        jLabel200.setForeground(new java.awt.Color(255, 255, 255));
        jLabel200.setText("Wins:");
        getContentPane().add(jLabel200);
        jLabel200.setBounds(90, 10, 32, 16);

        jLabel.setForeground(new java.awt.Color(0, 0, 0));
        jLabel.setText("Loses:");
        getContentPane().add(jLabel);
        jLabel.setBounds(680, 30, 40, 16);

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Player 2:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(620, 20, 49, 16);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Othello");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(177, 12, 420, 24);

        playerTurnLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        playerTurnLabel.setForeground(new java.awt.Color(255, 255, 255));
        playerTurnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerTurnLabel.setText("It's Player 1's turn");
        getContentPane().add(playerTurnLabel);
        playerTurnLabel.setBounds(770, 290, 240, 32);

        p2TilesControlledLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        p2TilesControlledLabel.setForeground(new java.awt.Color(0, 0, 0));
        p2TilesControlledLabel.setText("2");
        getContentPane().add(p2TilesControlledLabel);
        p2TilesControlledLabel.setBounds(860, 480, 70, 32);

        p1TilesControlledLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        p1TilesControlledLabel.setForeground(new java.awt.Color(255, 255, 255));
        p1TilesControlledLabel.setText("2");
        getContentPane().add(p1TilesControlledLabel);
        p1TilesControlledLabel.setBounds(860, 130, 80, 32);

        tile1.setBackground(new java.awt.Color(204, 255, 0));
        tile1.setBorderPainted(false);
        tile1.setFocusable(false);
        tile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile1ActionPerformed(evt);
            }
        });
        getContentPane().add(tile1);
        tile1.setBounds(40, 70, 70, 70);

        tile2.setBackground(new java.awt.Color(204, 255, 0));
        tile2.setBorderPainted(false);
        tile2.setFocusable(false);
        tile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile2ActionPerformed(evt);
            }
        });
        getContentPane().add(tile2);
        tile2.setBounds(130, 70, 70, 70);

        tile3.setBackground(new java.awt.Color(204, 255, 0));
        tile3.setBorderPainted(false);
        tile3.setFocusable(false);
        tile3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile3ActionPerformed(evt);
            }
        });
        getContentPane().add(tile3);
        tile3.setBounds(220, 70, 70, 70);

        tile4.setBackground(new java.awt.Color(204, 255, 0));
        tile4.setBorderPainted(false);
        tile4.setFocusable(false);
        tile4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile4ActionPerformed(evt);
            }
        });
        getContentPane().add(tile4);
        tile4.setBounds(310, 70, 70, 70);

        tile5.setBackground(new java.awt.Color(204, 255, 0));
        tile5.setBorderPainted(false);
        tile5.setFocusable(false);
        tile5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile5ActionPerformed(evt);
            }
        });
        getContentPane().add(tile5);
        tile5.setBounds(400, 70, 70, 70);

        tile6.setBackground(new java.awt.Color(204, 255, 0));
        tile6.setBorderPainted(false);
        tile6.setFocusable(false);
        tile6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile6ActionPerformed(evt);
            }
        });
        getContentPane().add(tile6);
        tile6.setBounds(480, 70, 70, 70);

        tile7.setBackground(new java.awt.Color(204, 255, 0));
        tile7.setBorderPainted(false);
        tile7.setFocusable(false);
        tile7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile7ActionPerformed(evt);
            }
        });
        getContentPane().add(tile7);
        tile7.setBounds(570, 70, 70, 70);

        tile8.setBackground(new java.awt.Color(204, 255, 0));
        tile8.setBorderPainted(false);
        tile8.setFocusable(false);
        tile8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile8ActionPerformed(evt);
            }
        });
        getContentPane().add(tile8);
        tile8.setBounds(660, 70, 70, 70);

        tile9.setBackground(new java.awt.Color(204, 255, 0));
        tile9.setBorderPainted(false);
        tile9.setFocusable(false);
        tile9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile9ActionPerformed(evt);
            }
        });
        getContentPane().add(tile9);
        tile9.setBounds(40, 160, 70, 70);

        tile10.setBackground(new java.awt.Color(204, 255, 0));
        tile10.setBorderPainted(false);
        tile10.setFocusable(false);
        tile10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile10ActionPerformed(evt);
            }
        });
        getContentPane().add(tile10);
        tile10.setBounds(130, 160, 70, 70);

        tile11.setBackground(new java.awt.Color(204, 255, 0));
        tile11.setBorderPainted(false);
        tile11.setFocusable(false);
        tile11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile11ActionPerformed(evt);
            }
        });
        getContentPane().add(tile11);
        tile11.setBounds(220, 160, 70, 70);

        tile12.setBackground(new java.awt.Color(204, 255, 0));
        tile12.setBorderPainted(false);
        tile12.setFocusable(false);
        tile12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile12ActionPerformed(evt);
            }
        });
        getContentPane().add(tile12);
        tile12.setBounds(310, 160, 70, 70);

        tile13.setBackground(new java.awt.Color(204, 255, 0));
        tile13.setBorderPainted(false);
        tile13.setFocusable(false);
        tile13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile13ActionPerformed(evt);
            }
        });
        getContentPane().add(tile13);
        tile13.setBounds(400, 160, 70, 70);

        tile14.setBackground(new java.awt.Color(204, 255, 0));
        tile14.setBorderPainted(false);
        tile14.setFocusable(false);
        tile14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile14ActionPerformed(evt);
            }
        });
        getContentPane().add(tile14);
        tile14.setBounds(480, 160, 70, 70);

        tile15.setBackground(new java.awt.Color(204, 255, 0));
        tile15.setBorderPainted(false);
        tile15.setFocusable(false);
        tile15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile15ActionPerformed(evt);
            }
        });
        getContentPane().add(tile15);
        tile15.setBounds(570, 160, 70, 70);

        tile16.setBackground(new java.awt.Color(204, 255, 0));
        tile16.setBorderPainted(false);
        tile16.setFocusable(false);
        tile16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile16ActionPerformed(evt);
            }
        });
        getContentPane().add(tile16);
        tile16.setBounds(660, 160, 70, 70);

        tile17.setBackground(new java.awt.Color(204, 255, 0));
        tile17.setBorderPainted(false);
        tile17.setFocusable(false);
        tile17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile17ActionPerformed(evt);
            }
        });
        getContentPane().add(tile17);
        tile17.setBounds(40, 250, 70, 70);

        tile18.setBackground(new java.awt.Color(204, 255, 0));
        tile18.setBorderPainted(false);
        tile18.setFocusable(false);
        tile18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile18ActionPerformed(evt);
            }
        });
        getContentPane().add(tile18);
        tile18.setBounds(130, 250, 70, 70);

        tile19.setBackground(new java.awt.Color(204, 255, 0));
        tile19.setBorderPainted(false);
        tile19.setFocusable(false);
        tile19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile19ActionPerformed(evt);
            }
        });
        getContentPane().add(tile19);
        tile19.setBounds(220, 250, 70, 70);

        tile20.setBackground(new java.awt.Color(204, 255, 0));
        tile20.setBorderPainted(false);
        tile20.setFocusable(false);
        tile20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile20ActionPerformed(evt);
            }
        });
        getContentPane().add(tile20);
        tile20.setBounds(310, 250, 70, 70);

        tile21.setBackground(new java.awt.Color(204, 255, 0));
        tile21.setBorderPainted(false);
        tile21.setFocusable(false);
        tile21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile21ActionPerformed(evt);
            }
        });
        getContentPane().add(tile21);
        tile21.setBounds(400, 250, 70, 70);

        tile22.setBackground(new java.awt.Color(204, 255, 0));
        tile22.setBorderPainted(false);
        tile22.setFocusable(false);
        tile22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile22ActionPerformed(evt);
            }
        });
        getContentPane().add(tile22);
        tile22.setBounds(480, 250, 70, 70);

        tile23.setBackground(new java.awt.Color(204, 255, 0));
        tile23.setBorderPainted(false);
        tile23.setFocusable(false);
        tile23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile23ActionPerformed(evt);
            }
        });
        getContentPane().add(tile23);
        tile23.setBounds(570, 250, 70, 70);

        tile24.setBackground(new java.awt.Color(204, 255, 0));
        tile24.setBorderPainted(false);
        tile24.setFocusable(false);
        tile24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile24ActionPerformed(evt);
            }
        });
        getContentPane().add(tile24);
        tile24.setBounds(660, 250, 70, 70);

        tile25.setBackground(new java.awt.Color(204, 255, 0));
        tile25.setBorderPainted(false);
        tile25.setFocusable(false);
        tile25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile25ActionPerformed(evt);
            }
        });
        getContentPane().add(tile25);
        tile25.setBounds(40, 340, 70, 70);

        tile26.setBackground(new java.awt.Color(204, 255, 0));
        tile26.setBorderPainted(false);
        tile26.setFocusable(false);
        tile26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile26ActionPerformed(evt);
            }
        });
        getContentPane().add(tile26);
        tile26.setBounds(130, 340, 70, 70);

        tile27.setBackground(new java.awt.Color(204, 255, 0));
        tile27.setBorderPainted(false);
        tile27.setFocusable(false);
        tile27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile27ActionPerformed(evt);
            }
        });
        getContentPane().add(tile27);
        tile27.setBounds(220, 340, 70, 70);

        tile28.setBackground(new java.awt.Color(204, 255, 0));
        tile28.setBorderPainted(false);
        tile28.setFocusable(false);
        getContentPane().add(tile28);
        tile28.setBounds(310, 340, 70, 70);

        tile29.setBackground(new java.awt.Color(204, 255, 0));
        tile29.setBorderPainted(false);
        tile29.setFocusable(false);
        getContentPane().add(tile29);
        tile29.setBounds(400, 340, 70, 70);

        tile30.setBackground(new java.awt.Color(204, 255, 0));
        tile30.setBorderPainted(false);
        tile30.setFocusable(false);
        tile30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile30ActionPerformed(evt);
            }
        });
        getContentPane().add(tile30);
        tile30.setBounds(480, 340, 70, 70);

        tile31.setBackground(new java.awt.Color(204, 255, 0));
        tile31.setBorderPainted(false);
        tile31.setFocusable(false);
        tile31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile31ActionPerformed(evt);
            }
        });
        getContentPane().add(tile31);
        tile31.setBounds(570, 340, 70, 70);

        tile32.setBackground(new java.awt.Color(204, 255, 0));
        tile32.setBorderPainted(false);
        tile32.setFocusable(false);
        tile32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile32ActionPerformed(evt);
            }
        });
        getContentPane().add(tile32);
        tile32.setBounds(660, 340, 70, 70);

        tile33.setBackground(new java.awt.Color(204, 255, 0));
        tile33.setBorderPainted(false);
        tile33.setFocusable(false);
        tile33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile33ActionPerformed(evt);
            }
        });
        getContentPane().add(tile33);
        tile33.setBounds(40, 430, 70, 70);

        tile34.setBackground(new java.awt.Color(204, 255, 0));
        tile34.setBorderPainted(false);
        tile34.setFocusable(false);
        tile34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile34ActionPerformed(evt);
            }
        });
        getContentPane().add(tile34);
        tile34.setBounds(130, 430, 70, 70);

        tile35.setBackground(new java.awt.Color(204, 255, 0));
        tile35.setBorderPainted(false);
        tile35.setFocusable(false);
        tile35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile35ActionPerformed(evt);
            }
        });
        getContentPane().add(tile35);
        tile35.setBounds(220, 430, 70, 70);

        tile36.setBackground(new java.awt.Color(204, 255, 0));
        tile36.setBorderPainted(false);
        tile36.setFocusable(false);
        getContentPane().add(tile36);
        tile36.setBounds(310, 430, 70, 70);

        tile37.setBackground(new java.awt.Color(204, 255, 0));
        tile37.setBorderPainted(false);
        tile37.setFocusable(false);
        getContentPane().add(tile37);
        tile37.setBounds(400, 430, 70, 70);

        tile38.setBackground(new java.awt.Color(204, 255, 0));
        tile38.setBorderPainted(false);
        tile38.setFocusable(false);
        tile38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile38ActionPerformed(evt);
            }
        });
        getContentPane().add(tile38);
        tile38.setBounds(480, 430, 70, 70);

        tile39.setBackground(new java.awt.Color(204, 255, 0));
        tile39.setBorderPainted(false);
        tile39.setFocusable(false);
        tile39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile39ActionPerformed(evt);
            }
        });
        getContentPane().add(tile39);
        tile39.setBounds(570, 430, 70, 70);

        tile40.setBackground(new java.awt.Color(204, 255, 0));
        tile40.setBorderPainted(false);
        tile40.setFocusable(false);
        tile40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile40ActionPerformed(evt);
            }
        });
        getContentPane().add(tile40);
        tile40.setBounds(660, 430, 70, 70);

        tile41.setBackground(new java.awt.Color(204, 255, 0));
        tile41.setBorderPainted(false);
        tile41.setFocusable(false);
        tile41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile41ActionPerformed(evt);
            }
        });
        getContentPane().add(tile41);
        tile41.setBounds(40, 510, 70, 70);

        tile42.setBackground(new java.awt.Color(204, 255, 0));
        tile42.setBorderPainted(false);
        tile42.setFocusable(false);
        tile42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile42ActionPerformed(evt);
            }
        });
        getContentPane().add(tile42);
        tile42.setBounds(130, 510, 70, 70);

        tile43.setBackground(new java.awt.Color(204, 255, 0));
        tile43.setBorderPainted(false);
        tile43.setFocusable(false);
        tile43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile43ActionPerformed(evt);
            }
        });
        getContentPane().add(tile43);
        tile43.setBounds(220, 510, 70, 70);

        tile44.setBackground(new java.awt.Color(204, 255, 0));
        tile44.setBorderPainted(false);
        tile44.setFocusable(false);
        tile44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile44ActionPerformed(evt);
            }
        });
        getContentPane().add(tile44);
        tile44.setBounds(310, 510, 70, 70);

        tile45.setBackground(new java.awt.Color(204, 255, 0));
        tile45.setBorderPainted(false);
        tile45.setFocusable(false);
        tile45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile45ActionPerformed(evt);
            }
        });
        getContentPane().add(tile45);
        tile45.setBounds(400, 510, 70, 70);

        tile46.setBackground(new java.awt.Color(204, 255, 0));
        tile46.setBorderPainted(false);
        tile46.setFocusable(false);
        tile46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile46ActionPerformed(evt);
            }
        });
        getContentPane().add(tile46);
        tile46.setBounds(480, 510, 70, 70);

        tile47.setBackground(new java.awt.Color(204, 255, 0));
        tile47.setBorderPainted(false);
        tile47.setFocusable(false);
        tile47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile47ActionPerformed(evt);
            }
        });
        getContentPane().add(tile47);
        tile47.setBounds(570, 510, 70, 70);

        tile48.setBackground(new java.awt.Color(204, 255, 0));
        tile48.setBorderPainted(false);
        tile48.setFocusable(false);
        tile48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile48ActionPerformed(evt);
            }
        });
        getContentPane().add(tile48);
        tile48.setBounds(660, 510, 70, 70);

        tile49.setBackground(new java.awt.Color(204, 255, 0));
        tile49.setBorderPainted(false);
        tile49.setFocusable(false);
        tile49.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile49ActionPerformed(evt);
            }
        });
        getContentPane().add(tile49);
        tile49.setBounds(40, 600, 70, 70);

        tile50.setBackground(new java.awt.Color(204, 255, 0));
        tile50.setBorderPainted(false);
        tile50.setFocusable(false);
        tile50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile50ActionPerformed(evt);
            }
        });
        getContentPane().add(tile50);
        tile50.setBounds(130, 600, 70, 70);

        tile51.setBackground(new java.awt.Color(204, 255, 0));
        tile51.setBorderPainted(false);
        tile51.setFocusable(false);
        tile51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile51ActionPerformed(evt);
            }
        });
        getContentPane().add(tile51);
        tile51.setBounds(220, 600, 70, 70);

        tile52.setBackground(new java.awt.Color(204, 255, 0));
        tile52.setBorderPainted(false);
        tile52.setFocusable(false);
        tile52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile52ActionPerformed(evt);
            }
        });
        getContentPane().add(tile52);
        tile52.setBounds(310, 600, 70, 70);

        tile53.setBackground(new java.awt.Color(204, 255, 0));
        tile53.setBorderPainted(false);
        tile53.setFocusable(false);
        tile53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile53ActionPerformed(evt);
            }
        });
        getContentPane().add(tile53);
        tile53.setBounds(400, 600, 70, 70);

        tile54.setBackground(new java.awt.Color(204, 255, 0));
        tile54.setBorderPainted(false);
        tile54.setFocusable(false);
        tile54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile54ActionPerformed(evt);
            }
        });
        getContentPane().add(tile54);
        tile54.setBounds(480, 600, 70, 70);

        tile55.setBackground(new java.awt.Color(204, 255, 0));
        tile55.setBorderPainted(false);
        tile55.setFocusable(false);
        tile55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile55ActionPerformed(evt);
            }
        });
        getContentPane().add(tile55);
        tile55.setBounds(570, 600, 70, 70);

        tile56.setBackground(new java.awt.Color(204, 255, 0));
        tile56.setBorderPainted(false);
        tile56.setFocusable(false);
        tile56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile56ActionPerformed(evt);
            }
        });
        getContentPane().add(tile56);
        tile56.setBounds(660, 600, 70, 70);

        tile57.setBackground(new java.awt.Color(204, 255, 0));
        tile57.setBorderPainted(false);
        tile57.setFocusable(false);
        tile57.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile57ActionPerformed(evt);
            }
        });
        getContentPane().add(tile57);
        tile57.setBounds(40, 690, 70, 70);

        tile58.setBackground(new java.awt.Color(204, 255, 0));
        tile58.setBorderPainted(false);
        tile58.setFocusable(false);
        tile58.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile58ActionPerformed(evt);
            }
        });
        getContentPane().add(tile58);
        tile58.setBounds(130, 690, 70, 70);

        tile59.setBackground(new java.awt.Color(204, 255, 0));
        tile59.setBorderPainted(false);
        tile59.setFocusable(false);
        tile59.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile59ActionPerformed(evt);
            }
        });
        getContentPane().add(tile59);
        tile59.setBounds(220, 690, 70, 70);

        tile60.setBackground(new java.awt.Color(204, 255, 0));
        tile60.setBorderPainted(false);
        tile60.setFocusable(false);
        tile60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile60ActionPerformed(evt);
            }
        });
        getContentPane().add(tile60);
        tile60.setBounds(310, 690, 70, 70);

        tile61.setBackground(new java.awt.Color(204, 255, 0));
        tile61.setBorderPainted(false);
        tile61.setFocusable(false);
        tile61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile61ActionPerformed(evt);
            }
        });
        getContentPane().add(tile61);
        tile61.setBounds(400, 690, 70, 70);

        tile62.setBackground(new java.awt.Color(204, 255, 0));
        tile62.setBorderPainted(false);
        tile62.setFocusable(false);
        tile62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile62ActionPerformed(evt);
            }
        });
        getContentPane().add(tile62);
        tile62.setBounds(480, 690, 70, 70);

        tile63.setBackground(new java.awt.Color(204, 255, 0));
        tile63.setBorderPainted(false);
        tile63.setFocusable(false);
        tile63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile63ActionPerformed(evt);
            }
        });
        getContentPane().add(tile63);
        tile63.setBounds(570, 690, 70, 70);

        tile64.setBackground(new java.awt.Color(204, 255, 0));
        tile64.setBorderPainted(false);
        tile64.setFocusable(false);
        tile64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile64ActionPerformed(evt);
            }
        });
        getContentPane().add(tile64);
        tile64.setBounds(660, 690, 70, 70);

        p2WinLabel.setForeground(new java.awt.Color(0, 0, 0));
        p2WinLabel.setText("0");
        getContentPane().add(p2WinLabel);
        p2WinLabel.setBounds(720, 10, 40, 16);

        p2LoseLabel.setForeground(new java.awt.Color(0, 0, 0));
        p2LoseLabel.setText("0");
        getContentPane().add(p2LoseLabel);
        p2LoseLabel.setBounds(720, 30, 30, 16);

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Wins:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(690, 10, 32, 16);
        getContentPane().add(gameBoard);
        gameBoard.setBounds(20, 50, 730, 730);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Loses:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(90, 30, 38, 16);

        p1LoseLabel.setForeground(new java.awt.Color(255, 255, 255));
        p1LoseLabel.setText("0");
        getContentPane().add(p1LoseLabel);
        p1LoseLabel.setBounds(140, 30, 7, 16);

        p1WinLabel.setForeground(new java.awt.Color(255, 255, 255));
        p1WinLabel.setText("0");
        getContentPane().add(p1WinLabel);
        p1WinLabel.setBounds(140, 10, 7, 16);
        getContentPane().add(whitePieceLBL);
        whitePieceLBL.setBounds(780, 110, 70, 70);
        getContentPane().add(blackPieceLBL);
        blackPieceLBL.setBounds(780, 466, 70, 60);

        restartButton.setText("Play Again?");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(restartButton);
        restartButton.setBounds(790, 330, 130, 26);

        jLabel9.setForeground(new java.awt.Color(0, 204, 51));
        jLabel9.setText("No more moves available? Click this button:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(770, 680, 250, 16);

        resetGameButton.setText("Reset Game");
        resetGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetGameButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetGameButton);
        resetGameButton.setBounds(770, 700, 140, 26);

        jLabel10.setForeground(new java.awt.Color(0, 204, 51));
        jLabel10.setText("Tie:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(760, 760, 20, 16);

        tieGameLabel.setForeground(new java.awt.Color(0, 204, 51));
        tieGameLabel.setText("0");
        getContentPane().add(tieGameLabel);
        tieGameLabel.setBounds(790, 760, 80, 16);
        getContentPane().add(backgroundLBL);
        backgroundLBL.setBounds(0, 0, 1040, 830);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void tile1MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile1");
        
    }
    
    private void tile1MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile1");
        
    }

    private void tile2MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile2");
        
    }
    
    private void tile2MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile2");
        
    }

    private void tile3MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile3");
        
    }
    
    private void tile3MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile3");
        
    }

    private void tile4MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile4");
        
    }
    
    private void tile4MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile4");
        
    }

    private void tile5MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile5");
        
    }
    
    private void tile5MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile5");
        
    }

    private void tile6MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile6");
        
    }
    
    private void tile6MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile6");
        
    }

    private void tile7MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile7");
        
    }
    
    private void tile7MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile7");
        
    }

    private void tile8MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile8");
        
    }
    
    private void tile8MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile8");
        
    }

    private void tile9MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile9");
        
    }
    
    private void tile9MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile9");
        
    }

    private void tile10MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile10");
        
    }
    
    private void tile10MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile10");
        
    }

    private void tile11MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile11");
        
    }
    
    private void tile11MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile11");
        
    }

    private void tile12MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile12");
        
    }
    
    private void tile12MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile12");
        
    }

    private void tile13MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile13");
        
    }
    
    private void tile13MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile13");
        
    }

    private void tile14MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile14");
        
    }
    
    private void tile14MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile14");
        
    }

    private void tile15MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile15");
        
    }
    
    private void tile15MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile15");
        
    }

    private void tile16MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile16");
        
    }
    
    private void tile16MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile16");
        
    }

    private void tile17MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile17");
        
    }
    
    private void tile17MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile17");
        
    }

    private void tile18MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile18");
        
    }
    
    private void tile18MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile18");
        
    }

    private void tile19MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile19");
        
    }
    
    private void tile19MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile19");
        
    }

    private void tile20MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile20");
        
    }
    
    private void tile20MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile20");
        
    }

    private void tile21MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile21");
        
    }
    
    private void tile21MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile21");
        
    }

    private void tile22MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile22");
        
    }
    
    private void tile22MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile22");
        
    }

    private void tile23MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile23");
        
    }
    
    private void tile23MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile23");
        
    }

    private void tile24MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile24");
        
    }
    
    private void tile24MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile24");
        
    }

    private void tile25MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile25");
        
    }
    
    private void tile25MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile25");
        
    }

    private void tile26MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile26");
        
    }
    
    private void tile26MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile26");
        
    }

    private void tile27MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile27");
        
    }
    
    private void tile27MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile27");
        
    }

    private void tile28MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile28");
        
    }
    
    private void tile28MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile28");
        
    }

    private void tile29MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile29");
        
    }
    
    private void tile29MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile29");
        
    }

    private void tile30MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile30");
        
    }
    
    private void tile30MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile30");
        
    }

    private void tile31MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile31");
        
    }
    
    private void tile31MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile31");
        
    }

    private void tile32MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile32");
        
    }
    
    private void tile32MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile32");
        
    }

    private void tile33MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile33");
        
    }
    
    private void tile33MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile33");
        
    }

    private void tile34MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile34");
        
    }
    
    private void tile34MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile34");
        
    }

    private void tile35MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile35");
        
    }
    
    private void tile35MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile35");
        
    }

    private void tile36MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile36");
        
    }
    
    private void tile36MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile36");
        
    }

    private void tile37MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile37");
        
    }
    
    private void tile37MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile37");
        
    }

    private void tile38MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile38");
        
    }
    
    private void tile38MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile38");
        
    }

    private void tile39MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile39");
        
    }
    
    private void tile39MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile39");
        
    }

    private void tile40MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile40");
        
    }
    
    private void tile40MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile40");
        
    }

    private void tile41MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile41");
        
    }
    
    private void tile41MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile41");
        
    }

    private void tile42MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile42");
        
    }
    
    private void tile42MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile42");
        
    }

    private void tile43MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile43");
        
    }
    
    private void tile43MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile43");
        
    }

    private void tile44MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile44");
        
    }
    
    private void tile44MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile44");
        
    }

    private void tile45MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile45");
        
    }
    
    private void tile45MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile45");
        
    }

    private void tile46MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile46");
        
    }
    
    private void tile46MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile46");
        
    }

    private void tile47MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile47");
        
    }
    
    private void tile47MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile47");
        
    }

    private void tile48MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile48");
        
    }
    
    private void tile48MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile48");
        
    }

    private void tile49MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile49");
        
    }
    
    private void tile49MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile49");
        
    }

    private void tile50MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile50");
        
    }
    
    private void tile50MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile50");
        
    }

    private void tile51MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile51");
        
    }
    
    private void tile51MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile51");
        
    }

    private void tile52MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile52");
        
    }
    
    private void tile52MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile52");
        
    }

    private void tile53MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile53");
        
    }
    
    private void tile53MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile53");
        
    }

    private void tile54MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile54");
        
    }
    
    private void tile54MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile54");
        
    }

    private void tile55MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile55");
        
    }
    
    private void tile55MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile55");
        
    }

    private void tile56MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile56");
        
    }
    
    private void tile56MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile56");
        
    }

    private void tile57MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile57");
        
    }
    
    private void tile57MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile57");
        
    }

    private void tile58MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile58");
        
    }
    
    private void tile58MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile58");
        
    }

    private void tile59MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile59");
        
    }
    
    private void tile59MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile59");
        
    }

    private void tile60MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile60");
        
    }
    
    private void tile60MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile60");
        
    }

    private void tile61MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile61");
        
    }
    
    private void tile61MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile61");
        
    }

    private void tile62MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile62");
        
    }
    
    private void tile62MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile62");
        
    }

    private void tile63MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile63");
        
    }
    
    private void tile63MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile63");
        
    }

    private void tile64MouseEntered(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseEnterTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile64");
        
    }
    
    private void tile64MouseExited(java.awt.event.MouseEvent evt){
        
        mouseOver.mouseExitTile(tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9, tile10, tile11, tile12, tile13, tile14, tile15, tile16, tile17, tile18, tile19, tile20, tile21, tile22, tile23, tile24, tile25, tile26, tile27, tile28, tile29, tile30, tile31, tile32, tile33, tile34, tile35, tile36, tile37, tile38, tile39, tile40, tile41, tile42, tile43, tile44, tile45, tile46, tile47, tile48, tile49, tile50, tile51, tile52, tile53, tile54, tile55, tile56, tile57, tile58, tile59, tile60, tile61, tile62, tile63, tile64, "tile64");
        
    }
    
    private void tile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile1ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile1.getBackground().equals(Color.yellow)){
            
            // Tile 1 chosen all possibilities for the right of it for Player 1.
            if(tile8.getBackground().equals(Color.white) && tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)
                    && tile2.getBackground().equals(Color.black)){
                
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)
                    && tile2.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)
                    && tile2.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)
                    && tile2.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile4.getBackground().equals(Color.white) && tile3.getBackground().equals(Color.black)
                    && tile2.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile3.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile1 chosen all posibilities to the right for Player 1.
            
            // Tile1 chosen all posibilities below it for Player 1.
            if(tile57.getBackground().equals(Color.white) && tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black) && tile17.getBackground().equals(Color.black)
                    && tile9.getBackground().equals(Color.black)){
                
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black) && tile17.getBackground().equals(Color.black)
                    && tile9.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black) && tile17.getBackground().equals(Color.black)
                    && tile9.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black) && tile17.getBackground().equals(Color.black)
                    && tile9.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile25.getBackground().equals(Color.white) && tile17.getBackground().equals(Color.black)
                    && tile9.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile17.getBackground().equals(Color.white)
                    && tile9.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile1 chosen all posibilities below it for Player 1.
        
        
        // Tile1 chosen all posibilities diagnol for Player 1.
        if(tile64.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
        else if(tile55.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
        else if(tile46.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile28.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile19.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.black)){
                
                tile1.setBackground(Color.white);
                tile1.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile1 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile1.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile1.getBackground().equals(Color.yellow)){
            
            // Tile 1 chosen all possibilities for the right of it for Player 2.
            if(tile8.getBackground().equals(Color.black) && tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white) && tile3.getBackground().equals(Color.white)
                    && tile2.getBackground().equals(Color.white)){
                
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white) && tile3.getBackground().equals(Color.white)
                    && tile2.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white) && tile3.getBackground().equals(Color.white)
                    && tile2.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white) && tile3.getBackground().equals(Color.white)
                    && tile2.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.white)
                    && tile2.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile3.getBackground().equals(Color.black)
                    && tile2.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile1 chosen all posibilities to the right for Player 2.
            
            
            // Tile1 chosen all posibilities below it for Player 2.
            if(tile57.getBackground().equals(Color.black) && tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white) && tile17.getBackground().equals(Color.white)
                    && tile9.getBackground().equals(Color.white)){
                
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white) && tile17.getBackground().equals(Color.white)
                    && tile9.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white) && tile17.getBackground().equals(Color.white)
                    && tile9.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white) && tile17.getBackground().equals(Color.white)
                    && tile9.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile25.getBackground().equals(Color.black) && tile17.getBackground().equals(Color.white)
                    && tile9.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile17.getBackground().equals(Color.black)
                    && tile9.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile1 chosen all posibilities below it for Player 2.
        
        
        // Tile1 chosen all posibilities diagnol for Player 2.
        if(tile64.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
        else if(tile55.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
        else if(tile46.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile28.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile19.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.white)){
                
                tile1.setBackground(Color.black);
                tile1.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile1 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile1.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile1ActionPerformed

    private void tile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile2ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile2.getBackground().equals(Color.yellow)){
            
            // Tile 2 chosen all possibilities for the right of it for Player 1.
            if(tile8.getBackground().equals(Color.white) && tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)){
                
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black) && tile3.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile4.getBackground().equals(Color.white) && tile3.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                                
            }
            // End tile2 chosen all posibilities to the right for Player 1.
            
            // Tile2 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black) 
                    && tile34.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile50.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black) 
                    && tile34.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile42.getBackground().equals(Color.white) 
                    && tile34.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile34.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile18.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile2 chosen all posibilities below it for Player 1.
        
        
        // Tile2 chosen all posibilities diagnol for Player 1.
        if(tile56.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
        else if(tile47.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile38.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile20.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile2 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile2.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile2.getBackground().equals(Color.yellow)){
            
            // Tile 2 chosen all possibilities for the right of it for Player 2.
            if(tile8.getBackground().equals(Color.black) && tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white)){
                
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile4.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                                
            }
            // End tile2 chosen all posibilities to the right for Player 2.
            
            // Tile2 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white) 
                    && tile34.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile50.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white) 
                    && tile34.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile42.getBackground().equals(Color.black) 
                    && tile34.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile34.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile18.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile2 chosen all posibilities below it for Player 2.
        
        
        // Tile2 chosen all posibilities diagnol for Player 2.
        if(tile56.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
        else if(tile47.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile38.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile20.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile2 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile2.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile2ActionPerformed

    private void tile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile3ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile3.getBackground().equals(Color.yellow)){
            
            // Tile 3 left for player 1
            if(tile1.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 3 left for Player 1
            
            
            // Tile 3 chosen all possibilities for the right of it for Player 1.
            if(tile8.getBackground().equals(Color.white) && tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)){
                
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 3 chosen all posibilities to the right for Player 1.
            
            
            // Tile3 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile51.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile43.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile35.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile19.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile3 chosen all posibilities below it for Player 1.
        
        
        // Tile 3 left diagonal
        if(tile17.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)){
            
            tile3.setBackground(Color.white);
            tile3.setIcon(new ImageIcon(whitePiece));
            tile10.setBackground(Color.white);
            tile10.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 3 left diagonal
        
        
        // Tile3 chosen all posibilities right diagonol for Player 1.
        if(tile48.getBackground().equals(Color.white) 
                    && tile39.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile39.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile30.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile21.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;                
            }
        // End Tile3 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile3.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile3.getBackground().equals(Color.yellow)){
            
            // Tile 3 left for player 2
            if(tile1.getBackground().equals(Color.black) && tile2.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 3 left for Player 2
            
            
            // Tile 3 chosen all possibilities for the right of it for Player 2.
            if(tile8.getBackground().equals(Color.black) && tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)){
                
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile5.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 3 chosen all posibilities to the right for Player 2.
            
            
            // Tile3 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile51.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile43.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile35.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.white)
                    && tile11.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile19.getBackground().equals(Color.black)
                    && tile11.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile3 chosen all posibilities below it for Player 2.
        
        
        // Tile 3 left diagonal for Player 2
        if(tile17.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)){
            
            tile3.setBackground(Color.black);
            tile3.setIcon(new ImageIcon(blackPiece));
            tile10.setBackground(Color.black);
            tile10.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 3 left diagonal for Player 2
        
        
        // Tile3 chosen all posibilities right diagonol for Player 2.
        if(tile48.getBackground().equals(Color.black) 
                    && tile39.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile39.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile30.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile21.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;                
            }
        // End Tile3 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile3.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile3ActionPerformed

    private void tile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile4ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile4.getBackground().equals(Color.yellow)){
            
            // Tile 4 left for player 1
            if(tile1.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 4 left for Player 1
            
            
            // Tile 4 chosen all possibilities for the right of it for Player 1.
            if(tile8.getBackground().equals(Color.white) && tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black)){
                
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 4 chosen all posibilities to the right for Player 1.
            
            
            // Tile4 chosen all posibilities below it for Player 1.
            if(tile60.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile52.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile44.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile36.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile20.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile4 chosen all posibilities below it for Player 1.
        
        
        // Tile 4 left diagonal
        if(tile25.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                && tile11.getBackground().equals(Color.black)){
            
            tile4.setBackground(Color.white);
            tile4.setIcon(new ImageIcon(whitePiece));
            tile11.setBackground(Color.white);
            tile11.setIcon(new ImageIcon(whitePiece));
            tile18.setBackground(Color.white);
            tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile18.getBackground().equals(Color.white)
                && tile11.getBackground().equals(Color.black)){
            
            tile4.setBackground(Color.white);
            tile4.setIcon(new ImageIcon(whitePiece));
            tile11.setBackground(Color.white);
            tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 4 left diagonal
        
        
        // Tile4 chosen all posibilities right diagonol for Player 1.
        if(tile40.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black) 
                && tile13.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile31.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black) 
                && tile13.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile22.getBackground().equals(Color.white) 
                && tile13.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile4 choosen all posibilities right diagnal for Player 1.
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile4.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile4.getBackground().equals(Color.yellow)){
            
            // Tile 4 left for player 2
            if(tile1.getBackground().equals(Color.black) && tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 4 left for Player 2
            
            
            // Tile 4 chosen all possibilities for the right of it for Player 2.
            if(tile8.getBackground().equals(Color.black) && tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white)){
                
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white) 
                    && tile5.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile6.getBackground().equals(Color.black) 
                    && tile5.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 4 chosen all posibilities to the right for Player 2.
            
            
            // Tile4 chosen all posibilities below it for Player 2.
            if(tile60.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile52.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile44.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile36.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)
                    && tile12.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile20.getBackground().equals(Color.black)
                    && tile12.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile4 chosen all posibilities below it for Player 2.
        
        
        // Tile 4 left diagonal for Player 2
        if(tile25.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                && tile11.getBackground().equals(Color.white)){
            
            tile4.setBackground(Color.black);
            tile4.setIcon(new ImageIcon(blackPiece));
            tile11.setBackground(Color.black);
            tile11.setIcon(new ImageIcon(blackPiece));
            tile18.setBackground(Color.black);
            tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile18.getBackground().equals(Color.black)
                && tile11.getBackground().equals(Color.white)){
            
            tile4.setBackground(Color.black);
            tile4.setIcon(new ImageIcon(blackPiece));
            tile11.setBackground(Color.black);
            tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 4 left diagonal for Player 2
        
        
        // Tile4 chosen all posibilities right diagonol for Player 2.
        if(tile40.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white) 
                && tile13.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile31.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white) 
                && tile13.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile22.getBackground().equals(Color.black) 
                && tile13.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile3 choosen all posibilities diagnal for Player 2.
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile4.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile4ActionPerformed

    private void tile5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile5ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile5.getBackground().equals(Color.yellow)){
            
            // Tile 5 left for player 1
            if(tile1.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 5 left for Player 1
            
            
            // Tile 5 chosen all possibilities for the right of it for Player 1.
            if(tile8.getBackground().equals(Color.white) && tile7.getBackground().equals(Color.black) 
                    && tile6.getBackground().equals(Color.black) ){
                
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile7.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 5 chosen all posibilities to the right for Player 1.
            
            
            // Tile5 chosen all posibilities below it for Player 1.
            if(tile61.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile53.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile45.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile21.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile5 chosen all posibilities below it for Player 1.
        
        
        // Tile 5 left diagonal for Player 1
        if(tile33.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
            
            tile5.setBackground(Color.white);
            tile5.setIcon(new ImageIcon(whitePiece));
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile26.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
            
            tile5.setBackground(Color.white);
            tile5.setIcon(new ImageIcon(whitePiece));
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile19.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)){
            
            tile5.setBackground(Color.white);
            tile5.setIcon(new ImageIcon(whitePiece));
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 5 left diagonal
        
        
        // Tile5 chosen all posibilities right diagonol for Player 1.
        if(tile32.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile23.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile3 choosen all posibilities right diagnal for Player 1.
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile5.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile5.getBackground().equals(Color.yellow)){
            
            // Tile 5 left for player 2
            if(tile1.getBackground().equals(Color.black) && tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 5 left for Player 2
            
            
            // Tile 5 chosen all possibilities for the right of it for Player 2.
            if(tile8.getBackground().equals(Color.black) && tile7.getBackground().equals(Color.white) 
                    && tile6.getBackground().equals(Color.white) ){
                
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile7.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 5 chosen all posibilities to the right for Player 2.
            
            
            // Tile5 chosen all posibilities below it for Player 2.
            if(tile61.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile53.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile45.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile21.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile5 chosen all posibilities below it for Player 2.
        
        
        // Tile 5 left diagonal for Player 1
        if(tile33.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
            
            tile5.setBackground(Color.black);
            tile5.setIcon(new ImageIcon(blackPiece));
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile26.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
            
            tile5.setBackground(Color.black);
            tile5.setIcon(new ImageIcon(blackPiece));
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile19.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)){
            
            tile5.setBackground(Color.black);
            tile5.setIcon(new ImageIcon(blackPiece));
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 5 left diagonal
        
        
        // Tile5 chosen all posibilities right diagonol for Player 2.
        if(tile32.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile23.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile5 choosen all posibilities right diagnal for Player 2.
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile5.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile5ActionPerformed

    private void tile6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile6ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile6.getBackground().equals(Color.yellow)){
            
            // Tile 6 left for player 1
            if(tile1.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 5 left for Player 1
            
            
            // Tile 6 chosen all possibilities for the right of it for Player 1.
            if(tile8.getBackground().equals(Color.white) && tile7.getBackground().equals(Color.black)){
                
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 6 chosen all posibilities to the right for Player 1.
            
            
            // Tile 6 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                    && tile14.getBackground().equals(Color.black)){
                
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile54.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                    && tile14.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile46.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                    && tile14.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile38.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                    && tile14.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)
                    && tile14.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile22.getBackground().equals(Color.white)
                    && tile14.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile6 chosen all posibilities below it for Player 1.
        
        
        // Tile 6 left diagonal for Player 1
        if(tile41.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                && tile27.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                && tile13.getBackground().equals(Color.black)){
            
            tile6.setBackground(Color.white);
            tile6.setIcon(new ImageIcon(whitePiece));
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile34.getBackground().equals(Color.white)
                && tile27.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                && tile13.getBackground().equals(Color.black)){
            
            tile6.setBackground(Color.white);
            tile6.setIcon(new ImageIcon(whitePiece));
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile27.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)
                && tile13.getBackground().equals(Color.black)){
            
            tile6.setBackground(Color.white);
            tile6.setIcon(new ImageIcon(whitePiece));
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile20.getBackground().equals(Color.white)
                && tile13.getBackground().equals(Color.black)){
            
            tile6.setBackground(Color.white);
            tile6.setIcon(new ImageIcon(whitePiece));
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 6 left diagonal
        
        
        // Tile 6 chosen all posibilities right diagonol for Player 1.
        if(tile24.getBackground().equals(Color.white) 
                    && tile15.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 6 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile6.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile6.getBackground().equals(Color.yellow)){
            
            // Tile 6 left for player 2
            if(tile1.getBackground().equals(Color.black) && tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 5 left for Player 2
            
            
            // Tile 6 chosen all possibilities for the right of it for Player 2.
            if(tile8.getBackground().equals(Color.black) && tile7.getBackground().equals(Color.white)){
                
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 6 chosen all posibilities to the right for Player 2.
            
            
            // Tile 6 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                    && tile14.getBackground().equals(Color.white)){
                
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile54.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                    && tile14.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile46.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                    && tile14.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile38.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                    && tile14.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)
                    && tile14.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile22.getBackground().equals(Color.black)
                    && tile14.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 6 chosen all posibilities below it for Player 2.
        
        
        // Tile 6 left diagonal for Player 2
        if(tile41.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                && tile27.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                && tile13.getBackground().equals(Color.white)){
            
            tile6.setBackground(Color.black);
            tile6.setIcon(new ImageIcon(blackPiece));
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile34.getBackground().equals(Color.black)
                && tile27.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                && tile13.getBackground().equals(Color.white)){
            
            tile6.setBackground(Color.black);
            tile6.setIcon(new ImageIcon(blackPiece));
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile27.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)
                && tile13.getBackground().equals(Color.white)){
            
            tile6.setBackground(Color.black);
            tile6.setIcon(new ImageIcon(blackPiece));
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile20.getBackground().equals(Color.black)
                && tile13.getBackground().equals(Color.white)){
            
            tile6.setBackground(Color.black);
            tile6.setIcon(new ImageIcon(blackPiece));
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 6 left diagonal for Player 2
        
        
        // Tile 6 chosen all posibilities right diagonol for Player 2.
        if(tile24.getBackground().equals(Color.black) 
                    && tile15.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 6 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile6.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile6ActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        
        // Restart the game by reseting the board
        playerTurnLabel.setForeground(Color.white);
        playerTurnLabel.setText("It's Player 1's turn");
        p1TilesControlledLabel.setText("2");
        p2TilesControlledLabel.setText("2");
        tile1.setBackground(Color.yellow);
        tile2.setBackground(Color.yellow);
        tile3.setBackground(Color.yellow);
        tile4.setBackground(Color.yellow);
        tile5.setBackground(Color.yellow);
        tile6.setBackground(Color.yellow);
        tile7.setBackground(Color.yellow);
        tile8.setBackground(Color.yellow);
        tile9.setBackground(Color.yellow);
        tile10.setBackground(Color.yellow);
        tile11.setBackground(Color.yellow);
        tile12.setBackground(Color.yellow);
        tile13.setBackground(Color.yellow);
        tile14.setBackground(Color.yellow);
        tile15.setBackground(Color.yellow);
        tile16.setBackground(Color.yellow);
        tile17.setBackground(Color.yellow);
        tile18.setBackground(Color.yellow);
        tile19.setBackground(Color.yellow);
        tile20.setBackground(Color.yellow);
        tile21.setBackground(Color.yellow);
        tile22.setBackground(Color.yellow);
        tile23.setBackground(Color.yellow);
        tile24.setBackground(Color.yellow);
        tile25.setBackground(Color.yellow);
        tile26.setBackground(Color.yellow);
        tile27.setBackground(Color.yellow);
        tile30.setBackground(Color.yellow);
        tile31.setBackground(Color.yellow);
        tile32.setBackground(Color.yellow);
        tile33.setBackground(Color.yellow);
        tile34.setBackground(Color.yellow);
        tile35.setBackground(Color.yellow);
        tile38.setBackground(Color.yellow);
        tile39.setBackground(Color.yellow);
        tile40.setBackground(Color.yellow);
        tile41.setBackground(Color.yellow);
        tile42.setBackground(Color.yellow);
        tile43.setBackground(Color.yellow);
        tile44.setBackground(Color.yellow);
        tile45.setBackground(Color.yellow);
        tile46.setBackground(Color.yellow);
        tile47.setBackground(Color.yellow);
        tile48.setBackground(Color.yellow);
        tile49.setBackground(Color.yellow);
        tile50.setBackground(Color.yellow);
        tile51.setBackground(Color.yellow);
        tile52.setBackground(Color.yellow);
        tile53.setBackground(Color.yellow);
        tile54.setBackground(Color.yellow);
        tile55.setBackground(Color.yellow);
        tile56.setBackground(Color.yellow);
        tile57.setBackground(Color.yellow);
        tile58.setBackground(Color.yellow);
        tile59.setBackground(Color.yellow);
        tile60.setBackground(Color.yellow);
        tile61.setBackground(Color.yellow);
        tile62.setBackground(Color.yellow);
        tile63.setBackground(Color.yellow);
        tile64.setBackground(Color.yellow);
        
        // Starting tiles
        tile28.setBackground(Color.white);
        tile29.setBackground(Color.black);
        tile36.setBackground(Color.black);
        tile37.setBackground(Color.white);
        
        tile28.setIcon(new ImageIcon(whitePiece));
        tile29.setIcon(new ImageIcon(blackPiece));
        tile36.setIcon(new ImageIcon(blackPiece));
        tile37.setIcon(new ImageIcon(whitePiece));
        
        // Reseting all icons
        tile1.setIcon(new ImageIcon(empty));
        tile2.setIcon(new ImageIcon(empty));
        tile3.setIcon(new ImageIcon(empty));
        tile4.setIcon(new ImageIcon(empty));
        tile5.setIcon(new ImageIcon(empty));
        tile6.setIcon(new ImageIcon(empty));
        tile7.setIcon(new ImageIcon(empty));
        tile8.setIcon(new ImageIcon(empty));
        tile9.setIcon(new ImageIcon(empty));
        tile10.setIcon(new ImageIcon(empty));
        tile11.setIcon(new ImageIcon(empty));
        tile12.setIcon(new ImageIcon(empty));
        tile13.setIcon(new ImageIcon(empty));
        tile14.setIcon(new ImageIcon(empty));
        tile15.setIcon(new ImageIcon(empty));
        tile16.setIcon(new ImageIcon(empty));
        tile17.setIcon(new ImageIcon(empty));
        tile18.setIcon(new ImageIcon(empty));
        tile19.setIcon(new ImageIcon(empty));
        tile20.setIcon(new ImageIcon(empty));
        tile21.setIcon(new ImageIcon(empty));
        tile22.setIcon(new ImageIcon(empty));
        tile23.setIcon(new ImageIcon(empty));
        tile24.setIcon(new ImageIcon(empty));
        tile25.setIcon(new ImageIcon(empty));
        tile26.setIcon(new ImageIcon(empty));
        tile27.setIcon(new ImageIcon(empty));
        tile30.setIcon(new ImageIcon(empty));
        tile31.setIcon(new ImageIcon(empty));
        tile32.setIcon(new ImageIcon(empty));
        tile33.setIcon(new ImageIcon(empty));
        tile34.setIcon(new ImageIcon(empty));
        tile35.setIcon(new ImageIcon(empty));
        tile38.setIcon(new ImageIcon(empty));
        tile39.setIcon(new ImageIcon(empty));
        tile40.setIcon(new ImageIcon(empty));
        tile41.setIcon(new ImageIcon(empty));
        tile42.setIcon(new ImageIcon(empty));
        tile43.setIcon(new ImageIcon(empty));
        tile44.setIcon(new ImageIcon(empty));
        tile45.setIcon(new ImageIcon(empty));
        tile46.setIcon(new ImageIcon(empty));
        tile47.setIcon(new ImageIcon(empty));
        tile48.setIcon(new ImageIcon(empty));
        tile49.setIcon(new ImageIcon(empty));
        tile50.setIcon(new ImageIcon(empty));
        tile51.setIcon(new ImageIcon(empty));
        tile52.setIcon(new ImageIcon(empty));
        tile53.setIcon(new ImageIcon(empty));
        tile54.setIcon(new ImageIcon(empty));
        tile55.setIcon(new ImageIcon(empty));
        tile56.setIcon(new ImageIcon(empty));
        tile57.setIcon(new ImageIcon(empty));
        tile58.setIcon(new ImageIcon(empty));
        tile59.setIcon(new ImageIcon(empty));
        tile60.setIcon(new ImageIcon(empty));
        tile61.setIcon(new ImageIcon(empty));
        tile62.setIcon(new ImageIcon(empty));
        tile63.setIcon(new ImageIcon(empty));
        tile64.setIcon(new ImageIcon(empty));
        
        // Make the button invisible until the game ends
        restartButton.setVisible(false);
        
        // Reset the tile Counts for each player
        p1TilesControlled = 2;
        p2TilesControlled = 2;
        talker.startOfGame();
        
    }//GEN-LAST:event_restartButtonActionPerformed

    private void tile7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile7ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile7.getBackground().equals(Color.yellow)){
            
            // Tile 7 left for player 1
            if(tile1.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 7 left for Player 1
                        
            
            // Tile 7 chosen all posibilities below it for Player 1.
            if(tile63.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black) 
                    && tile39.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile55.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) 
                    && tile39.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile47.getBackground().equals(Color.white) 
                    && tile39.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile39.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile23.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.black)){
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 7 chosen all posibilities below it for Player 1.
        
        
        // Tile 7 left diagonal for Player 1
        if(tile49.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
            
            tile7.setBackground(Color.white);
            tile7.setIcon(new ImageIcon(whitePiece));
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile42.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
            
            tile7.setBackground(Color.white);
            tile7.setIcon(new ImageIcon(whitePiece));
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
            
            tile7.setBackground(Color.white);
            tile7.setIcon(new ImageIcon(whitePiece));
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
            
            tile7.setBackground(Color.white);
            tile7.setIcon(new ImageIcon(whitePiece));
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile21.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)){
            
            tile7.setBackground(Color.white);
            tile7.setIcon(new ImageIcon(whitePiece));
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 7 left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile7.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile7.getBackground().equals(Color.yellow)){
            
            // Tile 7 left for player 2
            if(tile1.getBackground().equals(Color.black) && tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 7 left for Player 2
                        
            
            // Tile 7 chosen all posibilities below it for Player 2.
            if(tile63.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white) 
                    && tile39.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile55.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) 
                    && tile39.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile47.getBackground().equals(Color.black) 
                    && tile39.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile39.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile23.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.white)){
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 7 chosen all posibilities below it for Player 2.
        
        
        // Tile 7 left diagonal for Player 2
        if(tile49.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
            
            tile7.setBackground(Color.black);
            tile7.setIcon(new ImageIcon(blackPiece));
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile42.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
            
            tile7.setBackground(Color.black);
            tile7.setIcon(new ImageIcon(blackPiece));
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
            
            tile7.setBackground(Color.black);
            tile7.setIcon(new ImageIcon(blackPiece));
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
            
            tile7.setBackground(Color.black);
            tile7.setIcon(new ImageIcon(blackPiece));
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile21.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)){
            
            tile7.setBackground(Color.black);
            tile7.setIcon(new ImageIcon(blackPiece));
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 7 left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile7.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile7ActionPerformed

    private void tile8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile8ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile8.getBackground().equals(Color.yellow)){
            
            // Tile 8 left for player 1
            if(tile1.getBackground().equals(Color.white) && tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)
                    && tile7.getBackground().equals(Color.black)){
                
                tile2.setBackground(Color.white);
                tile2.setIcon(new ImageIcon(whitePiece));
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)
                    && tile7.getBackground().equals(Color.black)){
                
                tile3.setBackground(Color.white);
                tile3.setIcon(new ImageIcon(whitePiece));
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)
                    && tile7.getBackground().equals(Color.black)){
                
                tile4.setBackground(Color.white);
                tile4.setIcon(new ImageIcon(whitePiece));
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.black)
                    && tile7.getBackground().equals(Color.black)){
                
                tile5.setBackground(Color.white);
                tile5.setIcon(new ImageIcon(whitePiece));
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.black)
                    && tile7.getBackground().equals(Color.black)){
                
                tile6.setBackground(Color.white);
                tile6.setIcon(new ImageIcon(whitePiece));
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile6.getBackground().equals(Color.white)
                    && tile7.getBackground().equals(Color.black)){
                
                tile7.setBackground(Color.white);
                tile7.setIcon(new ImageIcon(whitePiece));
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 8 left for Player 1
                        
            
            // Tile 8 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile56.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black) 
                    && tile40.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)
                    && tile16.getBackground().equals(Color.black)){
                
                
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile56.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.black) 
                    && tile40.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)
                    && tile16.getBackground().equals(Color.black)){
                
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile48.getBackground().equals(Color.white) 
                    && tile40.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)
                    && tile16.getBackground().equals(Color.black)){
                
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile40.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)
                    && tile16.getBackground().equals(Color.black)){
                
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.black)
                    && tile16.getBackground().equals(Color.black)){
                
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile24.getBackground().equals(Color.white)
                    && tile16.getBackground().equals(Color.black)){
                
                tile8.setBackground(Color.white);
                tile8.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 8 chosen all posibilities below it for Player 1.
        
        
        // Tile 8 left diagonal for Player 1
        if(tile57.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                && tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                && tile15.getBackground().equals(Color.black)){
            
            tile8.setBackground(Color.white);
            tile8.setIcon(new ImageIcon(whitePiece));
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 6;
            p2TilesControlled -= 6;
            
        }
        else if(tile50.getBackground().equals(Color.white)
                && tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                && tile15.getBackground().equals(Color.black)){
            
            tile8.setBackground(Color.white);
            tile8.setIcon(new ImageIcon(whitePiece));
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                && tile15.getBackground().equals(Color.black)){
            
            tile8.setBackground(Color.white);
            tile8.setIcon(new ImageIcon(whitePiece));
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                && tile15.getBackground().equals(Color.black)){
            
            tile8.setBackground(Color.white);
            tile8.setIcon(new ImageIcon(whitePiece));
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)
                && tile15.getBackground().equals(Color.black)){
            
            tile8.setBackground(Color.white);
            tile8.setIcon(new ImageIcon(whitePiece));
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile22.getBackground().equals(Color.white)
                && tile15.getBackground().equals(Color.black)){
            
            tile8.setBackground(Color.white);
            tile8.setIcon(new ImageIcon(whitePiece));
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 8 left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile8.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile8.getBackground().equals(Color.yellow)){
            
            // Tile 8 left for player 2
            if(tile1.getBackground().equals(Color.black) && tile2.getBackground().equals(Color.white) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)
                    && tile7.getBackground().equals(Color.white)){
                
                tile2.setBackground(Color.black);
                tile2.setIcon(new ImageIcon(blackPiece));
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile2.getBackground().equals(Color.black) 
                    && tile3.getBackground().equals(Color.white) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)
                    && tile7.getBackground().equals(Color.white)){
                
                tile3.setBackground(Color.black);
                tile3.setIcon(new ImageIcon(blackPiece));
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile3.getBackground().equals(Color.black) && tile4.getBackground().equals(Color.white)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)
                    && tile7.getBackground().equals(Color.white)){
                
                tile4.setBackground(Color.black);
                tile4.setIcon(new ImageIcon(blackPiece));
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile4.getBackground().equals(Color.black)
                    && tile5.getBackground().equals(Color.white) && tile6.getBackground().equals(Color.white)
                    && tile7.getBackground().equals(Color.white)){
                
                tile5.setBackground(Color.black);
                tile5.setIcon(new ImageIcon(blackPiece));
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile5.getBackground().equals(Color.black) && tile6.getBackground().equals(Color.white)
                    && tile7.getBackground().equals(Color.white)){
                
                tile6.setBackground(Color.black);
                tile6.setIcon(new ImageIcon(blackPiece));
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile6.getBackground().equals(Color.black)
                    && tile7.getBackground().equals(Color.white)){
                
                tile7.setBackground(Color.black);
                tile7.setIcon(new ImageIcon(blackPiece));
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 8 left for Player 2
                        
            
            // Tile 8 chosen all posibilities below it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile56.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white) 
                    && tile40.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)
                    && tile16.getBackground().equals(Color.white)){
                
                
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile56.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.white) 
                    && tile40.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)
                    && tile16.getBackground().equals(Color.white)){
                
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile48.getBackground().equals(Color.black) 
                    && tile40.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)
                    && tile16.getBackground().equals(Color.white)){
                
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile40.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)
                    && tile16.getBackground().equals(Color.white)){
                
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.white)
                    && tile16.getBackground().equals(Color.white)){
                
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile24.getBackground().equals(Color.black)
                    && tile16.getBackground().equals(Color.white)){
                
                tile8.setBackground(Color.black);
                tile8.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 8 chosen all posibilities below it for Player 2.
        
        
        // Tile 8 left diagonal for Player 1
        if(tile57.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                && tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                && tile15.getBackground().equals(Color.white)){
            
            tile8.setBackground(Color.black);
            tile8.setIcon(new ImageIcon(blackPiece));
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 6;
            p2TilesControlled -= 6;
            
        }
        else if(tile50.getBackground().equals(Color.black)
                && tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                && tile15.getBackground().equals(Color.white)){
            
            tile8.setBackground(Color.black);
            tile8.setIcon(new ImageIcon(blackPiece));
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                && tile15.getBackground().equals(Color.white)){
            
            tile8.setBackground(Color.black);
            tile8.setIcon(new ImageIcon(blackPiece));
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                && tile15.getBackground().equals(Color.white)){
            
            tile8.setBackground(Color.black);
            tile8.setIcon(new ImageIcon(blackPiece));
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)
                && tile15.getBackground().equals(Color.white)){
            
            tile8.setBackground(Color.black);
            tile8.setIcon(new ImageIcon(blackPiece));
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile22.getBackground().equals(Color.black)
                && tile15.getBackground().equals(Color.white)){
            
            tile8.setBackground(Color.black);
            tile8.setIcon(new ImageIcon(blackPiece));
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 8 left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile8.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile8ActionPerformed

    private void tile9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile9ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile9.getBackground().equals(Color.yellow)){
            
            // Tile 1 chosen all possibilities for the right of it for Player 1.
            if(tile16.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile15.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 9 chosen all posibilities to the right for Player 1.
            
            // Tile 9 chosen all posibilities below it for Player 1.
            if(tile57.getBackground().equals(Color.white) && tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black) 
                    && tile17.getBackground().equals(Color.black)){
                
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black) 
                    && tile17.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black) 
                    && tile17.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black) 
                    && tile17.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile25.getBackground().equals(Color.white) && tile17.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 9 chosen all posibilities below it for Player 1.
        
        
        // Tile 9 chosen all posibilities diagonal for Player 1.
        if(tile63.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                && tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
        else if(tile54.getBackground().equals(Color.white) 
                && tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile27.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 9 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile9.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile9.getBackground().equals(Color.yellow)){
            
            // Tile 9 chosen all possibilities for the right of it for Player 2.
            if(tile16.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile15.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile10.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile10.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 9 chosen all posibilities to the right for Player 2.
            
            // Tile 9 chosen all posibilities below it for Player 2.
            if(tile57.getBackground().equals(Color.black) && tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white) 
                    && tile17.getBackground().equals(Color.white)){
                
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white) 
                    && tile17.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white) 
                    && tile17.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white) 
                    && tile17.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile25.getBackground().equals(Color.black) 
                    && tile17.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 9 chosen all posibilities below it for Player 2.
        
        
        // Tile 9 chosen all posibilities diagonal for Player 2.
        if(tile63.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                && tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
        else if(tile54.getBackground().equals(Color.black) 
                && tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile27.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 9 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile9.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile9ActionPerformed

    private void tile10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile10ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile10.getBackground().equals(Color.yellow)){
            
            // Tile 10 chosen all possibilities for the right of it for Player 1.
            if(tile16.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) 
                    && tile14.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.black) 
                    && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)){
                
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile15.getBackground().equals(Color.white) 
                    && tile14.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.black) 
                    && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile14.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black) 
                    && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile13.getBackground().equals(Color.white) 
                    && tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                                
            }
            // End tile 10 chosen all posibilities to the right for Player 1.
            
            // Tile 10 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black) 
                    && tile42.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile50.getBackground().equals(Color.white) 
                    && tile42.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile42.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 10 chosen all posibilities below it for Player 1.
        
        
        // Tile 10 chosen all posibilities diagnol for Player 1.
        if(tile64.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
        else if(tile55.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile46.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile28.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 10 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile10.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile10.getBackground().equals(Color.yellow)){
            
            // Tile 10 chosen all possibilities for the right of it for Player 2.
            if(tile16.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) 
                    && tile14.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.white) 
                    && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)){
                
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile15.getBackground().equals(Color.black) 
                    && tile14.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.white) 
                    && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile14.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white) 
                    && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile13.getBackground().equals(Color.black) 
                    && tile12.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile12.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                                
            }
            // End tile 10 chosen all posibilities to the right for Player 2.
            
            // Tile 10 chosen all posibilities below it for Player 2.
            if(tile58.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white) 
                    && tile42.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile50.getBackground().equals(Color.black) 
                    && tile42.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile42.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile26.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 10 chosen all posibilities below it for Player 2.
        
        
        // Tile 10 chosen all posibilities diagnol for Player 2.
        if(tile64.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
        else if(tile55.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile46.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile37.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile28.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 10 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile10.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile10ActionPerformed

    private void tile11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile11ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile11.getBackground().equals(Color.yellow)){
            
            // Tile 11 left for player 1
            if(tile9.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 11 left for Player 1
            
            
            // Tile 11 chosen all possibilities for the right of it for Player 1.
            if(tile16.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
                
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile15.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 11 chosen all posibilities to the right for Player 1.
            
            
            // Tile 11 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 11 chosen all posibilities below it for Player 1.
        
        
        // Tile 11 left diagonal
        if(tile25.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)){
            
            tile11.setBackground(Color.white);
            tile11.setIcon(new ImageIcon(whitePiece));
            tile18.setBackground(Color.white);
            tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 11 left diagonal
        
        
        // Tile3 chosen all posibilities right diagonol for Player 1.
        if(tile56.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                && tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile47.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black) 
                && tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile38.getBackground().equals(Color.white) 
                && tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;                
            }
        // End Tile 11 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile11.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile11.getBackground().equals(Color.yellow)){
            
            // Tile 11 left for player 2
            if(tile9.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 11 left for Player 2
            
            
            // Tile 11 chosen all possibilities for the right of it for Player 2.
            if(tile16.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
                
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile15.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile13.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 11 chosen all posibilities to the right for Player 2.
            
            
            // Tile 11 chosen all posibilities below it for Player 2.
            if(tile59.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile27.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 11 chosen all posibilities below it for Player 2.
        
        
        // Tile 11 left diagonal
        if(tile25.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)){
            
            tile11.setBackground(Color.black);
            tile11.setIcon(new ImageIcon(blackPiece));
            tile18.setBackground(Color.black);
            tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 11 left diagonal
        
        
        // Tile 11 chosen all posibilities right diagonol for Player 2.
        if(tile56.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                && tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile47.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white) 
                && tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile38.getBackground().equals(Color.black) 
                && tile29.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile29.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;                
            }
        // End Tile 11 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile11.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile11ActionPerformed

    private void tile12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile12ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile12.getBackground().equals(Color.yellow)){
            
            // Tile 12 left for player 1
            if(tile9.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 12 left for Player 1
            
            
            // Tile 12 chosen all possibilities for the right of it for Player 1.
            if(tile16.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.black)){
                
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile15.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 12 chosen all posibilities to the right for Player 1.
            
            
            // Tile 12 chosen all posibilities below it for Player 1.
            if(tile60.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile52.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile44.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 12 chosen all posibilities below it for Player 1.
        
        
        // Tile 12 left diagonal
        if(tile33.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.black)){
            
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile26.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.black)){
            
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 12 left diagonal
        
        
        // Tile12 chosen all posibilities right diagonol for Player 1.
        if(tile48.getBackground().equals(Color.white) 
                    && tile39.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) 
                && tile21.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile39.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black) 
                && tile21.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile30.getBackground().equals(Color.white) 
                && tile21.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 12 choosen all posibilities right diagnal for Player 1.
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile12.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile12.getBackground().equals(Color.yellow)){
            
            // Tile 12 left for player 2
            if(tile9.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 12 left for Player 2
            
            
            // Tile 12 chosen all possibilities for the right of it for Player 2.
            if(tile16.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.white)){
                
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile15.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white) 
                    && tile13.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile14.getBackground().equals(Color.black) 
                    && tile13.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 12 chosen all posibilities to the right for Player 2.
            
            
            // Tile 12 chosen all posibilities below it for Player 2.
            if(tile60.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile52.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile44.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile28.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 12 chosen all posibilities below it for Player 2.
        
        
        // Tile 12 left diagonal
        if(tile33.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.white)){
            
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile26.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.white)){
            
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 12 left diagonal for Player 2
        
        
        // Tile12 chosen all posibilities right diagonol for Player 2.
        if(tile48.getBackground().equals(Color.black) 
                    && tile39.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) 
                && tile21.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile39.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white) 
                && tile21.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile30.getBackground().equals(Color.black) 
                && tile21.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 12 choosen all posibilities right diagnal for Player 2.
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile12.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile12ActionPerformed

    private void tile13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile13ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile13.getBackground().equals(Color.yellow)){
            
            // Tile 13 left for player 1
            if(tile9.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)){
                
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 13 left for Player 1
            
            
            // Tile 13 chosen all possibilities for the right of it for Player 1.
            if(tile16.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) 
                    && tile14.getBackground().equals(Color.black)){
                
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile15.getBackground().equals(Color.white) 
                    && tile14.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 13 chosen all posibilities to the right for Player 1.
            
            
            // Tile 13 chosen all posibilities below it for Player 1.
            if(tile61.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)){
                
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile53.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile45.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 13 chosen all posibilities below it for Player 1.
        
        
        // Tile 13 left diagonal for Player 1
        if(tile41.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                && tile27.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile34.getBackground().equals(Color.white)
                && tile27.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile27.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 13 left diagonal
        
        
        // Tile 13 chosen all posibilities right diagonol for Player 1.
        if(tile40.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile31.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 13 choosen all posibilities right diagnal for Player 1.
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile13.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile13.getBackground().equals(Color.yellow)){
            
            // Tile 13 left for player 2
            if(tile9.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 13 left for Player 2
            
            
            // Tile 13 chosen all possibilities for the right of it for Player 2.
            if(tile16.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) 
                    && tile14.getBackground().equals(Color.white)){
                
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile15.getBackground().equals(Color.black) 
                    && tile14.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 13 chosen all posibilities to the right for Player 2.
            
            
            // Tile 13 chosen all posibilities below it for Player 2.
            if(tile61.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)){
                
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile53.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile45.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile29.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 13 chosen all posibilities below it for Player 2.
        
        
        // Tile 13 left diagonal for Player 2
        if(tile41.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                && tile27.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile34.getBackground().equals(Color.black)
                && tile27.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile27.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 13 left diagonal
        
        
        // Tile 13 chosen all posibilities right diagonol for Player 2.
        if(tile40.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile31.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 13 choosen all posibilities right diagnal for Player 2.
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile13.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile13ActionPerformed

    private void tile14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile14ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile14.getBackground().equals(Color.yellow)){
            
            // Tile 6 left for player 1
            if(tile9.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 14 left for Player 1
            
            
            // Tile 14 chosen all possibilities for the right of it for Player 1.
            if(tile16.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)){
                
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 14 chosen all posibilities to the right for Player 1.
            
            
            // Tile 14 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
                
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 14 chosen all posibilities below it for Player 1.
        
        
        // Tile 14 left diagonal for Player 1
        if(tile49.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile42.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 14 left diagonal
        
        
        // Tile 6 chosen all posibilities right diagonol for Player 1.
        if(tile32.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 14 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile14.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile14.getBackground().equals(Color.yellow)){
            
            // Tile 14 left for player 2
            if(tile9.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 14 left for Player 2
            
            
            // Tile 14 chosen all possibilities for the right of it for Player 2.
            if(tile16.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)){
                
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 14 chosen all posibilities to the right for Player 2.
            
            
            // Tile 14 chosen all posibilities below it for Player 2.
            if(tile62.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
                
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile30.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 14 chosen all posibilities below it for Player 2.
        
        
        // Tile 14 left diagonal for Player 1
        if(tile49.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile42.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile28.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 14 left diagonal
        
        
        // Tile 14 chosen all posibilities right diagonol for Player 2.
        if(tile32.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 14 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile14.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile14ActionPerformed

    private void tile15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile15ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile15.getBackground().equals(Color.yellow)){
            
            // Tile 14 left for player 1
            if(tile9.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 15 left for Player 1
                        
            
            // Tile 15 chosen all posibilities below it for Player 1.
            if(tile63.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
                
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 15 chosen all posibilities below it for Player 1.
        
        
        // Tile 15 left diagonal for Player 1
        if(tile57.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                && tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile50.getBackground().equals(Color.white)
                && tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 15 left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile15.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile15.getBackground().equals(Color.yellow)){
            
            // Tile 14 left for player 2
            if(tile9.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 15 left for Player 2
                        
            
            // Tile 15 chosen all posibilities below it for Player 2.
            if(tile63.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
                
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile31.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 15 chosen all posibilities below it for Player 2.
        
        
        // Tile 15 left diagonal for Player 2
        if(tile57.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                && tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile50.getBackground().equals(Color.black)
                && tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile29.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 15 left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile15.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile15ActionPerformed

    private void tile16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile16ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile16.getBackground().equals(Color.yellow)){
            
            // Tile 16 left for player 1
            if(tile9.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile14.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // end of Tile 16 left for Player 1
                        
            
            // Tile 16 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)){
                
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 16 chosen all posibilities below it for Player 1.
        
        
        // Tile 16 left diagonal for Player 1
        if(tile58.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
            
            tile16.setBackground(Color.white);
            tile16.setIcon(new ImageIcon(whitePiece));
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile51.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
            
            tile16.setBackground(Color.white);
            tile16.setIcon(new ImageIcon(whitePiece));
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
            
            tile16.setBackground(Color.white);
            tile16.setIcon(new ImageIcon(whitePiece));
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.black)){
            
            tile16.setBackground(Color.white);
            tile16.setIcon(new ImageIcon(whitePiece));
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile30.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)){
            
            tile16.setBackground(Color.white);
            tile16.setIcon(new ImageIcon(whitePiece));
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End of Tile 16 left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile16.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile16.getBackground().equals(Color.yellow)){
            
            // Tile 16 left for player 2
            if(tile9.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile10.getBackground().equals(Color.black) 
                    && tile11.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile11.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile13.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile13.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                    && tile15.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile14.getBackground().equals(Color.black)
                    && tile15.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // end of Tile 16 left for Player 2
                        
            
            // Tile 16 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.black) && tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)){
                
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.white) && tile24.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
         

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile32.getBackground().equals(Color.black) && tile24.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 16 chosen all posibilities below it for Player 2.
        
        
        // Tile 16 left diagonal for Player 2
        if(tile58.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
            
            tile16.setBackground(Color.black);
            tile16.setIcon(new ImageIcon(blackPiece));
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile51.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
            
            tile16.setBackground(Color.black);
            tile16.setIcon(new ImageIcon(blackPiece));
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
            
            tile16.setBackground(Color.black);
            tile16.setIcon(new ImageIcon(blackPiece));
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.white)){
            
            tile16.setBackground(Color.black);
            tile16.setIcon(new ImageIcon(blackPiece));
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile30.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)){
            
            tile16.setBackground(Color.black);
            tile16.setIcon(new ImageIcon(blackPiece));
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End of Tile 16 left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile16.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile16ActionPerformed

    private void tile17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile17ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile17.getBackground().equals(Color.yellow)){
            
            // Tile 17 chosen all possibilities for the right of it for Player 1.
            if(tile24.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black) 
                    && tile21.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black)){
                
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile23.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black) 
                    && tile21.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile22.getBackground().equals(Color.white) 
                    && tile21.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile21.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile19.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 17 chosen all posibilities to the right for Player 1.
            
            
            // Tile 17 above for Player 1
            if(tile1.getBackground().equals(Color.white) && tile9.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                
                p1TilesControlled +=1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 17 above for Player 1
            
            
            // Tile 17 chosen all posibilities below it for Player 1.
            if(tile57.getBackground().equals(Color.white) && tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)){
                
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 17 chosen all posibilities below it for Player 1.
        
        
        // Tile 17 upper right diagonal for Player 1
        if(tile3.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)){
            
            tile10.setBackground(Color.white);
            tile10.setIcon(new ImageIcon(whitePiece));
            tile17.setBackground(Color.white);
            tile17.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 17 upper right diagonal for Player 1
        
        
        // Tile 17 chosen all posibilities lower right diagonal for Player 1.
        if(tile62.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) 
                && tile44.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black) 
                && tile26.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile53.getBackground().equals(Color.white) 
                && tile44.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black) 
                && tile26.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile44.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.black) 
                && tile26.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile35.getBackground().equals(Color.white) 
                && tile26.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 17 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile17.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile17.getBackground().equals(Color.yellow)){
            
            // Tile 17 chosen all possibilities for the right of it for Player 2.
            if(tile24.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white) 
                    && tile21.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white)){
                
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile23.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white) 
                    && tile21.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile22.getBackground().equals(Color.black) 
                    && tile21.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile21.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile19.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 17 chosen all posibilities to the right for Player 2.
            
            
            // Tile 17 above for Player 2
            if(tile1.getBackground().equals(Color.black) && tile9.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                
                p1TilesControlled -=1;
                p2TilesControlled += 1;
                
            }
            // End Tile 17 above for Player 2
            
            
            // Tile 17 chosen all posibilities below it for Player 2.
            if(tile57.getBackground().equals(Color.black) && tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)){
                
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile33.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 17 chosen all posibilities below it for Player 2.
        
        
        // Tile 17 upper right diagonal for Player 2
        if(tile3.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)){
            
            tile10.setBackground(Color.black);
            tile10.setIcon(new ImageIcon(blackPiece));
            tile17.setBackground(Color.black);
            tile17.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 17 upper right diagonal for Player 2
        
        
        // Tile 17 chosen all posibilities lower right diagonal for Player 2.
        if(tile62.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) 
                && tile44.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white) 
                && tile26.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile53.getBackground().equals(Color.black) 
                && tile44.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white) 
                && tile26.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile44.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.white) 
                && tile26.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile35.getBackground().equals(Color.black) 
                && tile26.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 17 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile17.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile17ActionPerformed

    private void tile18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile18ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile18.getBackground().equals(Color.yellow)){
            
            // Tile 18 chosen all possibilities for the right of it for Player 1.
            if(tile24.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                                
            }
            // End tile 18 chosen all posibilities to the right for Player 1.
            
            
            // Tile 18 above for Player 1
            if(tile2.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 18 above for Player 1
            
            
            // Tile 18 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black) 
                    && tile42.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.black)){
                
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile50.getBackground().equals(Color.white) 
                    && tile42.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile42.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 18 chosen all posibilities below it for Player 1.
        
        
        // Tile 18 right upper diagonal for Player 1
        if(tile4.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)){
            
            tile11.setBackground(Color.white);
            tile11.setIcon(new ImageIcon(whitePiece));
            tile18.setBackground(Color.white);
            tile18.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 18 right upper diagonal for Player 1
        
        
        // Tile 18 chosen all posibilities diagonal for Player 1.
        if(tile63.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile54.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 18 choosen all posibilities diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile18.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile18.getBackground().equals(Color.yellow)){
            
            // Tile 18 chosen all possibilities for the right of it for Player 2.
            if(tile24.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.white) && tile19.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile19.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                                
            }
            // End tile 18 chosen all posibilities to the right for Player 2.
            
            
            // Tile 18 above for Player 2
            if(tile2.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 18 above for Player 2
            
            
            // Tile 18 chosen all posibilities below it for Player 2.
            if(tile58.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white) 
                    && tile42.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.white)){
                
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile50.getBackground().equals(Color.black) 
                    && tile42.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile42.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white) 
                    && tile26.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile34.getBackground().equals(Color.black) 
                    && tile26.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 18 chosen all posibilities below it for Player 2.
        
        
        // Tile 18 right upper diagonal for Player 2
        if(tile4.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)){
            
            tile11.setBackground(Color.black);
            tile11.setIcon(new ImageIcon(blackPiece));
            tile18.setBackground(Color.black);
            tile18.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 18 right upper diagonal for Player 2
        
        
        // Tile 18 chosen all posibilities lower right diagonal for Player 2.
        if(tile63.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile54.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white) 
                && tile27.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile36.getBackground().equals(Color.black) 
                && tile27.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 18 choosen all posibilities diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile18.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile18ActionPerformed

    private void tile19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile19ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile19.getBackground().equals(Color.yellow)){
            
            // Tile 19 left for Player 1
           if(tile17.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)){
           
               tile18.setBackground(Color.white);
               tile18.setIcon(new ImageIcon(whitePiece));
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
       }
           // End Tile 19 left for Player 1
                        
            // Tile 19 chosen all possibilities for the right of it for Player 1.
            if(tile24.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.black)){
                
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 19 chosen all posibilities to the right for Player 1.
            
            
            // Tile 18 above for Player 1
            if(tile3.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 19 above for Player 1
                                               
            
            // Tile 19 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 19 chosen all posibilities below it for Player 1.
        
        
        // Tile 19 Left upper diagonal for Player 1
            if(tile1.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 19 Left upper diagonal for Player 1
        
        
        // Tile 18 right upper diagonal for Player 1
        if(tile5.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)){
            
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 19 right upper diagonal for Player 1
        
        
        // Tile 19 Lower left diagonal for Player 1
        if(tile33.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)){
            
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 19 lower left diagonal for Player 1
        
        
        // Tile 19 chosen all posibilities diagonal for Player 1.
        if(tile64.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                && tile28.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
        else if(tile55.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                && tile28.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile46.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black) 
                && tile28.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile37.getBackground().equals(Color.white) 
                && tile28.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 19 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile19.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
       if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile19.getBackground().equals(Color.yellow)){
            
           // Tile 19 left for Player 2
           if(tile17.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)){
           
               tile18.setBackground(Color.black);
               tile18.setIcon(new ImageIcon(blackPiece));
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
       }
           // End Tile 19 left for Player 2
           
           
            // Tile 19 chosen all possibilities for the right of it for Player 2.
            if(tile24.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.white)){
                
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.white) 
                    && tile20.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile21.getBackground().equals(Color.black) 
                    && tile20.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 19 chosen all posibilities to the right for Player 2.
            
            
            // Tile 18 above for Player 2
            if(tile3.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 19 above for Player 2
            
            
            // Tile 19 chosen all posibilities below it for Player 2.
            if(tile59.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile35.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 19 chosen all posibilities below it for Player 2.
        
        
        // Tile 19 Lower left diagonal for Player 2
        if(tile33.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)){
            
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 19 lower left diagonal for Player 2
        
        
        // Tile 19 Left upper diagonal for Player 2
            if(tile1.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 19 Left upper diagonal for Player 2
        
        
        // Tile 18 right upper diagonal for Player 2
        if(tile5.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)){
            
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 19 right upper diagonal for Player 2
        
        
        // Tile 19 chosen all posibilities diagonal for Player 2.
        if(tile64.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                && tile28.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
        else if(tile55.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                && tile28.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile46.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white) 
                && tile28.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile37.getBackground().equals(Color.black) 
                && tile28.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 19 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile19.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile19ActionPerformed

    private void tile20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile20ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile20.getBackground().equals(Color.yellow)){
            
            // Tile 20 left for Player 1
           if(tile17.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.black)){
           
               tile18.setBackground(Color.white);
               tile18.setIcon(new ImageIcon(whitePiece));
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
            }
           else if(tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.black)){
               
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 20 left for Player 1
                        
            // Tile 19 chosen all possibilities for the right of it for Player 1.
            if(tile24.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)){
                
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 20 chosen all posibilities to the right for Player 1.
            
            
            // Tile 20 above for Player 1
            if(tile4.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 20 above for Player 1
                                               
            
            // Tile 19 chosen all posibilities below it for Player 1.
            if(tile60.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black)){
                
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile52.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile44.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 20 chosen all posibilities below it for Player 1.
        
        
        // Tile 19 Left upper diagonal for Player 1
            if(tile2.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 20 Left upper diagonal for Player 1
        
        
        // Tile 18 right upper diagonal for Player 1
        if(tile6.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 20 right upper diagonal for Player 1
        
        
        // Tile 19 Lower left diagonal for Player 1
        if(tile41.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                && tile27.getBackground().equals(Color.black)){
            
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                    

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile34.getBackground().equals(Color.white)
                && tile27.getBackground().equals(Color.black)){
            
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 20 lower left diagonal for Player 1
        
        
        // Tile 20 chosen all posibilities right diagonal for Player 1.
        if(tile56.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile47.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile38.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 20 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile20.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile20.getBackground().equals(Color.yellow)){
            
            // Tile 20 left for Player 2
           if(tile17.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.white)){
           
               tile18.setBackground(Color.black);
               tile18.setIcon(new ImageIcon(blackPiece));
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
            }
           else if(tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.white)){
               
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 20 left for Player 2
                        
            // Tile 20 chosen all possibilities for the right of it for Player 2.
            if(tile24.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)){
                
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white) && tile21.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile21.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 20 chosen all posibilities to the right for Player 2.
            
            
            // Tile 20 above for Player 2
            if(tile4.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 20 above for Player 2
                                               
            
            // Tile 20 chosen all posibilities below it for Player 2.
            if(tile60.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white)){
                
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile52.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile44.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile36.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 20 chosen all posibilities below it for Player 2.
        
        
        // Tile 19 Left upper diagonal for Player 2
            if(tile2.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 20 Left upper diagonal for Player 2
        
        
        // Tile 20 right upper diagonal for Player 2
        if(tile6.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 20 right upper diagonal for Player 2
        
        
        // Tile 20 Lower left diagonal for Player 2
        if(tile41.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                && tile27.getBackground().equals(Color.white)){
            
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                    

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile34.getBackground().equals(Color.black)
                && tile27.getBackground().equals(Color.white)){
            
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 20 lower left diagonal for Player 2
        
        
        // Tile 20 chosen all posibilities right diagonal for Player 2.
        if(tile56.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile47.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile38.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 20 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile20.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile20ActionPerformed

    private void tile21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile21ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile21.getBackground().equals(Color.yellow)){
            
            // Tile 21 left for Player 1
           if(tile17.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
           
               tile18.setBackground(Color.white);
               tile18.setIcon(new ImageIcon(whitePiece));
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
            }
           else if(tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)){
               
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)){
               
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 21 left for Player 1
                        
            // Tile 21 chosen all possibilities for the right of it for Player 1.
            if(tile24.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black)){
                
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 21 chosen all posibilities to the right for Player 1.
            
            
            // Tile 21 above for Player 1
            if(tile5.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 21 above for Player 1
                                               
            
            // Tile 21 chosen all posibilities below it for Player 1.
            if(tile61.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black)){
                
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile53.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile45.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 21 chosen all posibilities below it for Player 1.
        
        
        // Tile 21 Left upper diagonal for Player 1
            if(tile3.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 21 Left upper diagonal for Player 1
        
        
        // Tile 21 right upper diagonal for Player 1
        if(tile7.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 21 right upper diagonal for Player 1
        
        
        // Tile 21 Lower left diagonal for Player 1
        if(tile49.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)){
            
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile42.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)){
            
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)){
            
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 21 lower left diagonal for Player 1
        
        
        // Tile 21 chosen all posibilities right diagonal for Player 1.
        if(tile48.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile39.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 21 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile21.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile21.getBackground().equals(Color.yellow)){
            
            // Tile 21 left for Player 2
           if(tile17.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
           
               tile18.setBackground(Color.black);
               tile18.setIcon(new ImageIcon(blackPiece));
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
            }
           else if(tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)){
               
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)){
               
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 21 left for Player 2
                        
            // Tile 21 chosen all possibilities for the right of it for Player 2.
            if(tile24.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white)){
                
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile23.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 21 chosen all posibilities to the right for Player 2.
            
            
            // Tile 21 above for Player 2
            if(tile5.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 21 above for Player 2
                                               
            
            // Tile 21 chosen all posibilities below it for Player 2.
            if(tile61.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white)){
                
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile53.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile45.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile37.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 21 chosen all posibilities below it for Player 2.
        
        
        // Tile 21 Left upper diagonal for Player 2
            if(tile3.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 21 Left upper diagonal for Player 2
        
        
        // Tile 21 right upper diagonal for Player 2
        if(tile7.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 21 right upper diagonal for Player 2
        
        
        // Tile 21 Lower left diagonal for Player 2
        if(tile49.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)){
            
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile42.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)){
            
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile35.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)){
            
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 21 lower left diagonal for Player 2
        
        
        // Tile 21 chosen all posibilities right diagonal for Player 2.
        if(tile48.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile39.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 21 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile21.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile21ActionPerformed

    private void tile22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile22ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile22.getBackground().equals(Color.yellow)){
            
            // Tile 22 left for Player 1
           if(tile17.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black)){
           
               tile18.setBackground(Color.white);
               tile18.setIcon(new ImageIcon(whitePiece));
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
            }
           else if(tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black)){
               
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black)){
               
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.black)){
               
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 22 left for Player 1
                        
            // Tile 22 chosen all possibilities for the right of it for Player 1.
            if(tile24.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)){
                
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 22 chosen all posibilities to the right for Player 1.
            
            
            // Tile 22 above for Player 1
            if(tile6.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 22 above for Player 1
                                               
            
            // Tile 22 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black)){
                
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 22 chosen all posibilities below it for Player 1.
        
        
        // Tile 21 Left upper diagonal for Player 1
            if(tile4.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 22 Left upper diagonal for Player 1
        
        
        // Tile 22 right upper diagonal for Player 1
        if(tile8.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 22 right upper diagonal for Player 1
        
        
        // Tile 22 Lower left diagonal for Player 1
        if(tile57.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                && tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile50.getBackground().equals(Color.white)
                && tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 22 lower left diagonal for Player 1
        
        
        // Tile 22 chosen all posibilities right diagonal for Player 1.
        if(tile40.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 22 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile22.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile22.getBackground().equals(Color.yellow)){
            
            // Tile 22 left for Player 2
           if(tile17.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white)){
           
               tile18.setBackground(Color.black);
               tile18.setIcon(new ImageIcon(blackPiece));
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
            }
           else if(tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white)){
               
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white)){
               
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.white)){
               
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 22 left for Player 2
                        
            // Tile 22 chosen all possibilities for the right of it for Player 2.
            if(tile24.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)){
                
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 22 chosen all posibilities to the right for Player 2.
            
            
            // Tile 22 above for Player 2
            if(tile6.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 22 above for Player 2
                                               
            
            // Tile 22 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white)){
                
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile38.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 22 chosen all posibilities below it for Player 2.
        
        
        // Tile 21 Left upper diagonal for Player 2
            if(tile4.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 22 Left upper diagonal for Player 2
        
        
        // Tile 22 right upper diagonal for Player 2
        if(tile8.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 22 right upper diagonal for Player 2
        
        
        // Tile 22 Lower left diagonal for Player 2
        if(tile57.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                && tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile50.getBackground().equals(Color.black)
                && tile43.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile43.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                && tile29.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile36.getBackground().equals(Color.black)
                && tile29.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 22 lower left diagonal for Player 2
        
        
        // Tile 22 chosen all posibilities right diagonal for Player 1.
        if(tile40.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 22 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile22.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile22ActionPerformed

    private void tile23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile23ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile23.getBackground().equals(Color.yellow)){
            
            // Tile 22 left for Player 1
           if(tile17.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
           
               tile18.setBackground(Color.white);
               tile18.setIcon(new ImageIcon(whitePiece));
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
            }
           else if(tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
               
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
               
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)){
               
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)){
               
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 23 left for Player 1
            
            
            // Tile 22 above for Player 1
            if(tile7.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 23 above for Player 1
                                               
            
            // Tile 22 chosen all posibilities below it for Player 1.
            if(tile63.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.black)){
                
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 23 chosen all posibilities below it for Player 1.
        
        
        // Tile 21 Left upper diagonal for Player 1
            if(tile5.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 23 Left upper diagonal for Player 1
                
        
        // Tile 23 Lower left diagonal for Player 1
        if(tile58.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile51.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 23 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile23.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }        
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile23.getBackground().equals(Color.yellow)){
            
            // Tile 23 left for Player 2
           if(tile17.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
           
               tile18.setBackground(Color.black);
               tile18.setIcon(new ImageIcon(blackPiece));
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
            }
           else if(tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
               
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
               
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)){
               
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)){
               
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 23 left for Player 2
            
            
            // Tile 23 above for Player 2
            if(tile7.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 23 above for Player 2
                                               
            
            // Tile 23 chosen all posibilities below it for Player 2.
            if(tile63.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.white)){
                
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white) 
                    && tile31.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile39.getBackground().equals(Color.black) 
                    && tile31.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 23 chosen all posibilities below it for Player 2.
        
        
        // Tile 23 Left upper diagonal for Player 2
            if(tile5.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 23 Left upper diagonal for Player 2
                
        
        // Tile 23 Lower left diagonal for Player 2
        if(tile58.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile51.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile37.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 23 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile23.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile23ActionPerformed

    private void tile24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile24ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile24.getBackground().equals(Color.yellow)){
            
            // Tile 24 left for Player 1
           if(tile17.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                   && tile23.getBackground().equals(Color.black)){
           
               tile18.setBackground(Color.white);
               tile18.setIcon(new ImageIcon(whitePiece));
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
               tile24.setBackground(Color.white);
               tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 6;
               p2TilesControlled -= 6;
               
            }
           else if(tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                   && tile23.getBackground().equals(Color.black)){
               
               tile19.setBackground(Color.white);
               tile19.setIcon(new ImageIcon(whitePiece));
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
               tile24.setBackground(Color.white);
               tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                   && tile23.getBackground().equals(Color.black)){
               
               tile20.setBackground(Color.white);
               tile20.setIcon(new ImageIcon(whitePiece));
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
               tile24.setBackground(Color.white);
               tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.black)
                   && tile23.getBackground().equals(Color.black)){
               
               tile21.setBackground(Color.white);
               tile21.setIcon(new ImageIcon(whitePiece));
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
               tile24.setBackground(Color.white);
               tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.black)
                   && tile23.getBackground().equals(Color.black)){
               
               tile22.setBackground(Color.white);
               tile22.setIcon(new ImageIcon(whitePiece));
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
               tile24.setBackground(Color.white);
               tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile22.getBackground().equals(Color.white)
                   && tile23.getBackground().equals(Color.black)){
               
               tile23.setBackground(Color.white);
               tile23.setIcon(new ImageIcon(whitePiece));
               tile24.setBackground(Color.white);
               tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 24 left for Player 1
            
            
            // Tile 24 above for Player 1
            if(tile8.getBackground().equals(Color.white) && tile16.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 24 above for Player 1
                                               
            
            // Tile 24 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.black)){
                
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
         

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 24 chosen all posibilities below it for Player 1.
        
        
        // Tile 24 Left upper diagonal for Player 1
            if(tile6.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 24 Left upper diagonal for Player 1
                
        
        // Tile 23 Lower left diagonal for Player 1
        if(tile59.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                && tile45.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)
                && tile31.getBackground().equals(Color.black)){
            
            tile24.setBackground(Color.white);
            tile24.setIcon(new ImageIcon(whitePiece));
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile52.getBackground().equals(Color.white)
                && tile45.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)
                && tile31.getBackground().equals(Color.black)){
            
            tile24.setBackground(Color.white);
            tile24.setIcon(new ImageIcon(whitePiece));
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile45.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black)
                && tile31.getBackground().equals(Color.black)){
            
            tile24.setBackground(Color.white);
            tile24.setIcon(new ImageIcon(whitePiece));
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile38.getBackground().equals(Color.white)
                && tile31.getBackground().equals(Color.black)){
            
            tile24.setBackground(Color.white);
            tile24.setIcon(new ImageIcon(whitePiece));
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 24 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile24.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile24.getBackground().equals(Color.yellow)){
            
            // Tile 24 left for Player 2
           if(tile17.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                   && tile23.getBackground().equals(Color.white)){
           
               tile18.setBackground(Color.black);
               tile18.setIcon(new ImageIcon(blackPiece));
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
               tile24.setBackground(Color.black);
               tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 6;
               p2TilesControlled += 6;
               
            }
           else if(tile18.getBackground().equals(Color.black)
                   && tile19.getBackground().equals(Color.white) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                   && tile23.getBackground().equals(Color.white)){
               
               tile19.setBackground(Color.black);
               tile19.setIcon(new ImageIcon(blackPiece));
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
               tile24.setBackground(Color.black);
               tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile19.getBackground().equals(Color.black) && tile20.getBackground().equals(Color.white)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                   && tile23.getBackground().equals(Color.white)){
               
               tile20.setBackground(Color.black);
               tile20.setIcon(new ImageIcon(blackPiece));
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
               tile24.setBackground(Color.black);
               tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile20.getBackground().equals(Color.black)
                   && tile21.getBackground().equals(Color.white) && tile22.getBackground().equals(Color.white)
                   && tile23.getBackground().equals(Color.white)){
               
               tile21.setBackground(Color.black);
               tile21.setIcon(new ImageIcon(blackPiece));
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
               tile24.setBackground(Color.black);
               tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile21.getBackground().equals(Color.black) && tile22.getBackground().equals(Color.white)
                   && tile23.getBackground().equals(Color.white)){
               
               tile22.setBackground(Color.black);
               tile22.setIcon(new ImageIcon(blackPiece));
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
               tile24.setBackground(Color.black);
               tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile22.getBackground().equals(Color.black)
                   && tile23.getBackground().equals(Color.white)){
               
               tile23.setBackground(Color.black);
               tile23.setIcon(new ImageIcon(blackPiece));
               tile24.setBackground(Color.black);
               tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 24 left for Player 2
            
            
            // Tile 24 above for Player 2
            if(tile8.getBackground().equals(Color.black) && tile16.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 24 above for Player 2
                                               
            
            // Tile 24 chosen all posibilities below it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.white)){
                
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.white) 
                    && tile32.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                             

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile40.getBackground().equals(Color.black) 
                    && tile32.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
         

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 24 chosen all posibilities below it for Player 2.
        
        
        // Tile 24 Left upper diagonal for Player 2
            if(tile6.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 24 Left upper diagonal for Player 2
                
        
        // Tile 23 Lower left diagonal for Player 2
        if(tile59.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                && tile45.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)
                && tile31.getBackground().equals(Color.white)){
            
            tile24.setBackground(Color.black);
            tile24.setIcon(new ImageIcon(blackPiece));
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile52.getBackground().equals(Color.black)
                && tile45.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)
                && tile31.getBackground().equals(Color.white)){
            
            tile24.setBackground(Color.black);
            tile24.setIcon(new ImageIcon(blackPiece));
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile45.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white)
                && tile31.getBackground().equals(Color.white)){
            
            tile24.setBackground(Color.black);
            tile24.setIcon(new ImageIcon(blackPiece));
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile38.getBackground().equals(Color.black)
                && tile31.getBackground().equals(Color.white)){
            
            tile24.setBackground(Color.black);
            tile24.setIcon(new ImageIcon(blackPiece));
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 24 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile24.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile24ActionPerformed

    private void tile25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile25ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile25.getBackground().equals(Color.yellow)){
            
            // Tile 25 chosen all possibilities for the right of it for Player 1.
            if(tile32.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile26.getBackground().equals(Color.black)){
                
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile31.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile26.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile30.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile26.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile26.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile28.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)
                    && tile26.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile27.getBackground().equals(Color.white)
                    && tile26.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 25 chosen all posibilities to the right for Player 1.
            
            
            // Tile 25 above for Player 1
            if(tile1.getBackground().equals(Color.white) && tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                
                p1TilesControlled +=2;
                p2TilesControlled -=2;
                
            }
            else if(tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 25 above for Player 1
            
            
            // Tile 25 chosen all posibilities below it for Player 1.
            if(tile57.getBackground().equals(Color.white) && tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black)){
                
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                             

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 25 chosen all posibilities below it for Player 1.
        
        
        // Tile 25 upper right diagonal for Player 1
        if(tile4.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                && tile18.getBackground().equals(Color.black)){
            
            tile11.setBackground(Color.white);
            tile11.setIcon(new ImageIcon(whitePiece));
            tile18.setBackground(Color.white);
            tile18.setIcon(new ImageIcon(whitePiece));
            tile25.setBackground(Color.white);
            tile25.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile11.getBackground().equals(Color.white)
                && tile18.getBackground().equals(Color.black)){
            
            tile18.setBackground(Color.white);
            tile18.setIcon(new ImageIcon(whitePiece));
            tile25.setBackground(Color.white);
            tile25.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 25 upper right diagonal for Player 1
        
        
        // Tile 25 chosen all posibilities lower right diagonal for Player 1.
        if(tile61.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black) 
                && tile43.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile52.getBackground().equals(Color.white) 
                && tile43.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile43.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 25 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile25.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile25.getBackground().equals(Color.yellow)){
            
            // Tile 25 chosen all possibilities for the right of it for Player 2.
            if(tile32.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile26.getBackground().equals(Color.white)){
                
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile31.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile26.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile30.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile26.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile26.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile28.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)
                    && tile26.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile27.getBackground().equals(Color.black)
                    && tile26.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 25 chosen all posibilities to the right for Player 2.
            
            
            // Tile 25 above for Player 2
            if(tile1.getBackground().equals(Color.black) && tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 25 above for Player 2
            
            
            // Tile 25 chosen all posibilities below it for Player 2.
            if(tile57.getBackground().equals(Color.black) && tile49.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white)){
                
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile49.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.white) 
                    && tile33.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile41.getBackground().equals(Color.black) 
                    && tile33.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                             

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 25 chosen all posibilities below it for Player 2.
        
        
        // Tile 25 upper right diagonal for Player 2
        if(tile4.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                && tile18.getBackground().equals(Color.white)){
            
            tile11.setBackground(Color.black);
            tile11.setIcon(new ImageIcon(blackPiece));
            tile18.setBackground(Color.black);
            tile18.setIcon(new ImageIcon(blackPiece));
            tile25.setBackground(Color.black);
            tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile11.getBackground().equals(Color.black)
                && tile18.getBackground().equals(Color.white)){
            
            tile18.setBackground(Color.black);
            tile18.setIcon(new ImageIcon(blackPiece));
            tile25.setBackground(Color.black);
            tile25.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 25 upper right diagonal for Player 2
        
        
        // Tile 25 chosen all posibilities lower right diagonal for Player 2.
        if(tile61.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white) 
                && tile43.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile52.getBackground().equals(Color.black) 
                && tile43.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile43.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 25 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile25.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile25ActionPerformed

    private void tile26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile26ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile26.getBackground().equals(Color.yellow)){
            
            // Tile 26 chosen all possibilities for the right of it for Player 1.
            if(tile32.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile31.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile30.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile28.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 26 chosen all posibilities to the right for Player 1.
            
            
            // Tile 26 above for Player 1
            if(tile2.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                
                p1TilesControlled +=2;
                p2TilesControlled -=2;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 26 above for Player 1
            
            
            // Tile 26 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black) 
                    && tile34.getBackground().equals(Color.black)){
                
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile50.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black) 
                    && tile34.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile42.getBackground().equals(Color.white) 
                    && tile34.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                             

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 26 chosen all posibilities below it for Player 1.
        
        
        // Tile 25 upper right diagonal for Player 1
        if(tile5.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.black)){
            
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile12.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.black)){
            
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 26 upper right diagonal for Player 1
        
        
        // Tile 26 chosen all posibilities lower right diagonal for Player 1.
        if(tile62.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) 
                && tile44.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile53.getBackground().equals(Color.white) 
                && tile44.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile44.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 26 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile26.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile26.getBackground().equals(Color.yellow)){
            
            // Tile 26 chosen all possibilities for the right of it for Player 2.
            if(tile32.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile31.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white) 
                    && tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile30.getBackground().equals(Color.black) 
                    && tile29.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile29.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile28.getBackground().equals(Color.black) 
                    && tile27.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 26 chosen all posibilities to the right for Player 2.
            
            
            // Tile 26 above for Player 2
            if(tile2.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 26 above for Player 2
            
            
            // Tile 26 chosen all posibilities below it for Player 2.
            if(tile58.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white) 
                    && tile34.getBackground().equals(Color.white)){
                
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile50.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white) 
                    && tile34.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile42.getBackground().equals(Color.black) 
                    && tile34.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                             

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 26 chosen all posibilities below it for Player 2.
        
        
        // Tile 25 upper right diagonal for Player 2
        if(tile5.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.white)){
            
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile12.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.white)){
            
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 26 upper right diagonal for Player 2
        
        
        // Tile 26 chosen all posibilities lower right diagonal for Player 2.
        if(tile62.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) 
                && tile44.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile53.getBackground().equals(Color.black) 
                && tile44.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile44.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 26 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile26.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile26ActionPerformed

    private void tile27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile27ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile27.getBackground().equals(Color.yellow)){
            
            // Tile 27 left for Player 1
           if(tile25.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)){
           
               tile26.setBackground(Color.white);
               tile26.setIcon(new ImageIcon(whitePiece));
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
       }
           // End Tile 27 left for Player 1
                        
            // Tile 27 chosen all possibilities for the right of it for Player 1.
            if(tile32.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black)){
                
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile31.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile30.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile29.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 27 chosen all posibilities to the right for Player 1.
            
            
            // Tile 27 above for Player 1
            if(tile3.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 27 above for Player 1
                                               
            
            // Tile 27 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)){
                
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                             

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 27 chosen all posibilities below it for Player 1.
        
        
        // Tile 27 Left upper diagonal for Player 1
            if(tile9.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 27 Left upper diagonal for Player 1
        
        
        // Tile 27 right upper diagonal for Player 1
        if(tile6.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                && tile20.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile13.getBackground().equals(Color.white)
                && tile20.getBackground().equals(Color.black)){
            
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 27 right upper diagonal for Player 1
        
        
        // Tile 27 Lower left diagonal for Player 1
        if(tile41.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)){
            
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 27 lower left diagonal for Player 1
        
        
        // Tile 19 chosen all posibilities diagonal for Player 1.
        if(tile63.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
        else if(tile54.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 27 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile27.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile27.getBackground().equals(Color.yellow)){
            
            // Tile 27 left for Player 2
           if(tile25.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)){
           
               tile26.setBackground(Color.black);
               tile26.setIcon(new ImageIcon(blackPiece));
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
       }
           // End Tile 27 left for Player 2
                        
            // Tile 27 chosen all possibilities for the right of it for Player 2.
            if(tile32.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white) 
                    && tile30.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white)){
                
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile31.getBackground().equals(Color.black) 
                    && tile30.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile30.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white) 
                    && tile28.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile29.getBackground().equals(Color.black) 
                    && tile28.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 27 chosen all posibilities to the right for Player 2.
            
            
            // Tile 27 above for Player 2
            if(tile3.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 27 above for Player 2
                                               
            
            // Tile 27 chosen all posibilities below it for Player 2.
            if(tile59.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)){
                
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile43.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                             

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 27 chosen all posibilities below it for Player 2.
        
        
        // Tile 27 Left upper diagonal for Player 1
            if(tile9.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 27 Left upper diagonal for Player 2
        
        
        // Tile 27 right upper diagonal for Player 2
        if(tile6.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                && tile20.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile13.getBackground().equals(Color.black)
                && tile20.getBackground().equals(Color.white)){
            
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 27 right upper diagonal for Player 2
        
        
        // Tile 27 Lower left diagonal for Player 2
        if(tile41.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)){
            
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 27 lower left diagonal for Player 2
        
        
        // Tile 19 chosen all posibilities diagonal for Player 2.
        if(tile63.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
        else if(tile54.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile45.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 27 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile27.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile27ActionPerformed

    private void tile30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile30ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile30.getBackground().equals(Color.yellow)){
            
            // Tile 30 left for Player 1
           if(tile25.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                   && tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black)){
           
               tile26.setBackground(Color.white);
               tile26.setIcon(new ImageIcon(whitePiece));
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
            }
           else if(tile26.getBackground().equals(Color.white)
                   && tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black)){
               
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black)){
               
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.black)){
               
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 30 left for Player 1
                        
            // Tile 30 chosen all possibilities for the right of it for Player 1.
            if(tile32.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)){
                
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 30 chosen all posibilities to the right for Player 1.
            
            
            // Tile 22 above for Player 1
            if(tile6.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile14.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 30 above for Player 1
                                               
            
            // Tile 30 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
                
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                             

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 30 chosen all posibilities below it for Player 1.
        
        
        // Tile 30 Left upper diagonal for Player 1
            if(tile3.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 30 Left upper diagonal for Player 1
        
        
        // Tile 30 right upper diagonal for Player 1
        if(tile16.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 30 right upper diagonal for Player 1
        
        
        // Tile 30 Lower left diagonal for Player 1
        if(tile58.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)){
            
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile51.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)){
            
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black)){
            
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 30 lower left diagonal for Player 1
        
        
        // Tile 22 chosen all posibilities right diagonal for Player 1.
        if(tile48.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 30 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile30.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile30.getBackground().equals(Color.yellow)){
            
            // Tile 30 left for Player 2
           if(tile25.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                   && tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white)){
           
               tile26.setBackground(Color.black);
               tile26.setIcon(new ImageIcon(blackPiece));
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
            }
           else if(tile26.getBackground().equals(Color.black)
                   && tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white)){
               
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white)){
               
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.white)){
               
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 30 left for Player 2
                        
            // Tile 30 chosen all possibilities for the right of it for Player 2.
            if(tile32.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)){
                
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 30 chosen all posibilities to the right for Player 2.
            
            
            // Tile 30 above for Player 2
            if(tile6.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile14.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 30 above for Player 2
                                               
            
            // Tile 30 chosen all posibilities below it for Player 2.
            if(tile62.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
                
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile46.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                             

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 30 chosen all posibilities below it for Player 2.
        
        
        // Tile 30 Left upper diagonal for Player 2
            if(tile3.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 30 Left upper diagonal for Player 2
        
        
        // Tile 30 right upper diagonal for Player 2
        if(tile16.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 30 right upper diagonal for Player 2
        
        
        // Tile 30 Lower left diagonal for Player 2
        if(tile58.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)){
            
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile51.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)){
            
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile44.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white)){
            
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 30 lower left diagonal for Player 2
        
        
        // Tile 22 chosen all posibilities lower right diagonal for Player 2.
        if(tile48.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 30 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile30.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
            //talker.whosTurnIsItAnyway("Player 1");
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile30ActionPerformed

    private void tile31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile31ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile31.getBackground().equals(Color.yellow)){
            
            // Tile 31 left for Player 1
           if(tile25.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                   && tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
           
               tile26.setBackground(Color.white);
               tile26.setIcon(new ImageIcon(whitePiece));
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
            }
           else if(tile26.getBackground().equals(Color.white)
                   && tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
               
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
               
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
               
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)){
               
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 31 left for Player 1
                       
            
            // Tile 31 above for Player 1
            if(tile7.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 31 above for Player 1
                                               
            
            // Tile 31 chosen all posibilities below it for Player 1.
            if(tile63.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black)){
                
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                             

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 31 chosen all posibilities below it for Player 1.
        
        
        // Tile 30 Left upper diagonal for Player 1
            if(tile4.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile13.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 31 Left upper diagonal for Player 1
                
        
        // Tile 31 Lower left diagonal for Player 1
        if(tile59.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                && tile45.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile52.getBackground().equals(Color.white)
                && tile45.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile45.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 31 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile31.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }        
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile31.getBackground().equals(Color.yellow)){
            
            // Tile 31 left for Player 2
           if(tile25.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                   && tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
           
               tile26.setBackground(Color.black);
               tile26.setIcon(new ImageIcon(blackPiece));
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
            }
           else if(tile26.getBackground().equals(Color.black)
                   && tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
               
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
               
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
               
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)){
               
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 31 left for Player 2
                       
            
            // Tile 31 above for Player 2
            if(tile7.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 31 above for Player 2
                                               
            
            // Tile 31 chosen all posibilities below it for Player 2.
            if(tile63.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white)){
                
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile47.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                             

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 31 chosen all posibilities below it for Player 2.
        
        
        // Tile 31 Left upper diagonal for Player 2
            if(tile4.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile13.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 31 Left upper diagonal for Player 2
                
        
        // Tile 31 Lower left diagonal for Player 2
        if(tile59.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                && tile45.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile52.getBackground().equals(Color.black)
                && tile45.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile45.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 31 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile31.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile31ActionPerformed

    private void tile32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile32ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile32.getBackground().equals(Color.yellow)){
            
            // Tile 32 left for Player 1
           if(tile25.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                   && tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                   && tile31.getBackground().equals(Color.black)){
           
               tile26.setBackground(Color.white);
               tile26.setIcon(new ImageIcon(whitePiece));
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
               tile32.setBackground(Color.white);
               tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 6;
               p2TilesControlled -= 6;
               
            }
           else if(tile26.getBackground().equals(Color.white)
                   && tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                   && tile31.getBackground().equals(Color.black)){
               
               tile27.setBackground(Color.white);
               tile27.setIcon(new ImageIcon(whitePiece));
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
               tile32.setBackground(Color.white);
               tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                   && tile31.getBackground().equals(Color.black)){
               
               tile28.setBackground(Color.white);
               tile28.setIcon(new ImageIcon(whitePiece));
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
               tile32.setBackground(Color.white);
               tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                   && tile31.getBackground().equals(Color.black)){
               
               tile29.setBackground(Color.white);
               tile29.setIcon(new ImageIcon(whitePiece));
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
               tile32.setBackground(Color.white);
               tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)
                   && tile31.getBackground().equals(Color.black)){
               
               tile30.setBackground(Color.white);
               tile30.setIcon(new ImageIcon(whitePiece));
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
               tile32.setBackground(Color.white);
               tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile30.getBackground().equals(Color.white)
                   && tile31.getBackground().equals(Color.black)){
               
               tile31.setBackground(Color.white);
               tile31.setIcon(new ImageIcon(whitePiece));
               tile32.setBackground(Color.white);
               tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 32 left for Player 1
                       
            
            // Tile 31 above for Player 1
            if(tile8.getBackground().equals(Color.white) && tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 32 above for Player 1
                                               
            
            // Tile 31 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.black)){
                
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.black)){
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.black)){
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                             

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 32 chosen all posibilities below it for Player 1.
        
        
        // Tile 32 Left upper diagonal for Player 1
            if(tile5.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                    && tile23.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile14.getBackground().equals(Color.white)
                    && tile23.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 32 Left upper diagonal for Player 1
                
        
        // Tile 32 Lower left diagonal for Player 1
        if(tile60.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black)){
            
            tile32.setBackground(Color.white);
            tile32.setIcon(new ImageIcon(whitePiece));
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile53.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.black)){
            
            tile32.setBackground(Color.white);
            tile32.setIcon(new ImageIcon(whitePiece));
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile46.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)){
            
            tile32.setBackground(Color.white);
            tile32.setIcon(new ImageIcon(whitePiece));
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 32 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile32.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        } 
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile32.getBackground().equals(Color.yellow)){
            
            // Tile 32 left for Player 2
           if(tile25.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                   && tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                   && tile31.getBackground().equals(Color.white)){
           
               tile26.setBackground(Color.black);
               tile26.setIcon(new ImageIcon(blackPiece));
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
               tile32.setBackground(Color.black);
               tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 6;
               p2TilesControlled += 6;
               
            }
           else if(tile26.getBackground().equals(Color.black)
                   && tile27.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                   && tile31.getBackground().equals(Color.white)){
               
               tile27.setBackground(Color.black);
               tile27.setIcon(new ImageIcon(blackPiece));
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
               tile32.setBackground(Color.black);
               tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile27.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                   && tile31.getBackground().equals(Color.white)){
               
               tile28.setBackground(Color.black);
               tile28.setIcon(new ImageIcon(blackPiece));
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
               tile32.setBackground(Color.black);
               tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile28.getBackground().equals(Color.black)
                   && tile29.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                   && tile31.getBackground().equals(Color.white)){
               
               tile29.setBackground(Color.black);
               tile29.setIcon(new ImageIcon(blackPiece));
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
               tile32.setBackground(Color.black);
               tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile29.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)
                   && tile31.getBackground().equals(Color.white)){
               
               tile30.setBackground(Color.black);
               tile30.setIcon(new ImageIcon(blackPiece));
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
               tile32.setBackground(Color.black);
               tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile30.getBackground().equals(Color.black)
                   && tile31.getBackground().equals(Color.white)){
               
               tile31.setBackground(Color.black);
               tile31.setIcon(new ImageIcon(blackPiece));
               tile32.setBackground(Color.black);
               tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 32 left for Player 2
                       
            
            // Tile 32 above for Player 2
            if(tile8.getBackground().equals(Color.black) && tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 32 above for Player 2
                                               
            
            // Tile 32 chosen all posibilities below it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.white)){
                
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.white) && tile40.getBackground().equals(Color.white)){
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile48.getBackground().equals(Color.black) && tile40.getBackground().equals(Color.white)){
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                             

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 32 chosen all posibilities below it for Player 2.
        
        
        // Tile 32 Left upper diagonal for Player 2
            if(tile5.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                    && tile23.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile14.getBackground().equals(Color.black)
                    && tile23.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 32 Left upper diagonal for Player 2
                
        
        // Tile 32 Lower left diagonal for Player 2
        if(tile60.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white)){
            
            tile32.setBackground(Color.black);
            tile32.setIcon(new ImageIcon(blackPiece));
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile53.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.white)){
            
            tile32.setBackground(Color.black);
            tile32.setIcon(new ImageIcon(blackPiece));
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile46.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)){
            
            tile32.setBackground(Color.black);
            tile32.setIcon(new ImageIcon(blackPiece));
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 32 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile32.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile32ActionPerformed

    private void tile33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile33ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile33.getBackground().equals(Color.yellow)){
            
            // Tile 33 chosen all possibilities for the right of it for Player 1.
            if(tile40.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile39.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile38.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile36.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile35.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 33 chosen all posibilities to the right for Player 1.
            
            
            // Tile 33 above for Player 1
            if(tile1.getBackground().equals(Color.white) && tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 33 above for Player 1
            
            
            // Tile 33 chosen all posibilities below it for Player 1.
            if(tile57.getBackground().equals(Color.white) && tile49.getBackground().equals(Color.black) 
                    && tile41.getBackground().equals(Color.black)){
                
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile49.getBackground().equals(Color.white) 
                    && tile41.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 33 chosen all posibilities below it for Player 1.
        
        
        // Tile 33 upper right diagonal for Player 1
        if(tile5.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)){
            
            tile12.setBackground(Color.white);
            tile12.setIcon(new ImageIcon(whitePiece));
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
            tile33.setBackground(Color.white);
            tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile12.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)){
            
            tile19.setBackground(Color.white);
            tile19.setIcon(new ImageIcon(whitePiece));
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
            tile33.setBackground(Color.white);
            tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile19.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)){
            
            tile26.setBackground(Color.white);
            tile26.setIcon(new ImageIcon(whitePiece));
            tile33.setBackground(Color.white);
            tile33.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 33 upper right diagonal for Player 1
        
        
        // Tile 33 chosen all posibilities lower right diagonal for Player 1.
        if(tile60.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black) 
                && tile42.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile51.getBackground().equals(Color.white) 
                && tile42.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 33 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile33.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile33.getBackground().equals(Color.yellow)){
            
            // Tile 33 chosen all possibilities for the right of it for Player 2.
            if(tile40.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile39.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile38.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white) && tile35.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile36.getBackground().equals(Color.black) && tile35.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile35.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 33 chosen all posibilities to the right for Player 2.
            
            
            // Tile 33 above for Player 2
            if(tile1.getBackground().equals(Color.black) && tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 33 above for Player 2
            
            
            // Tile 33 chosen all posibilities below it for Player 2.
            if(tile57.getBackground().equals(Color.black) && tile49.getBackground().equals(Color.white) 
                    && tile41.getBackground().equals(Color.white)){
                
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile49.getBackground().equals(Color.black) 
                    && tile41.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 33 chosen all posibilities below it for Player 2.
        
        
        // Tile 33 upper right diagonal for Player 2
        if(tile5.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                && tile19.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)){
            
            tile12.setBackground(Color.black);
            tile12.setIcon(new ImageIcon(blackPiece));
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
            tile33.setBackground(Color.black);
            tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile12.getBackground().equals(Color.black)
                && tile19.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)){
            
            tile19.setBackground(Color.black);
            tile19.setIcon(new ImageIcon(blackPiece));
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
            tile33.setBackground(Color.black);
            tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile19.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)){
            
            tile26.setBackground(Color.black);
            tile26.setIcon(new ImageIcon(blackPiece));
            tile33.setBackground(Color.black);
            tile33.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 33 upper right diagonal for Player 2
        
        
        // Tile 33 chosen all posibilities lower right diagonal for Player 2.
        if(tile60.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white) 
                && tile42.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile51.getBackground().equals(Color.black) 
                && tile42.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 33 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile33.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile33ActionPerformed

    private void tile34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile34ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile34.getBackground().equals(Color.yellow)){
            
            // Tile 34 chosen all possibilities for the right of it for Player 1.
            if(tile40.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.black)){
                
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile39.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile38.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile36.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 34 chosen all posibilities to the right for Player 1.
            
            
            // Tile 34 above for Player 1
            if(tile2.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                                
            }
            // End Tile 34 above for Player 1
            
            
            // Tile 34 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black) 
                    && tile42.getBackground().equals(Color.black)){
                
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile50.getBackground().equals(Color.white) 
                    && tile42.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 34 chosen all posibilities below it for Player 1.
        
        
        // Tile 25 upper right diagonal for Player 1
        if(tile6.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                && tile20.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile13.getBackground().equals(Color.white)
                && tile20.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)){
            
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile20.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)){
            
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
                        
        }
        // End Tile 34 upper right diagonal for Player 1
        
        
        // Tile 34 chosen all posibilities lower right diagonal for Player 1.
        if(tile61.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black) 
                && tile43.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile52.getBackground().equals(Color.white) 
                && tile43.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 34 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile34.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile34.getBackground().equals(Color.yellow)){
            
            // Tile 34 chosen all possibilities for the right of it for Player 2.
            if(tile40.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.white)){
                
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile39.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white) 
                    && tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile38.getBackground().equals(Color.black) 
                    && tile37.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white) 
                    && tile35.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile36.getBackground().equals(Color.black) 
                    && tile35.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 34 chosen all posibilities to the right for Player 2.
            
            
            // Tile 34 above for Player 2
            if(tile2.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                                
            }
            // End Tile 34 above for Player 2
            
            
            // Tile 34 chosen all posibilities below it for Player 2.
            if(tile58.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white) 
                    && tile42.getBackground().equals(Color.white)){
                
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile50.getBackground().equals(Color.black) 
                    && tile42.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 34 chosen all posibilities below it for Player 2.
        
        
        // Tile 34 upper right diagonal for Player 2
        if(tile6.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                && tile20.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile13.getBackground().equals(Color.black)
                && tile20.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)){
            
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile20.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)){
            
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
                        
        }
        // End Tile 34 upper right diagonal for Player 2
        
        
        // Tile 34 chosen all posibilities lower right diagonal for Player 2.
        if(tile61.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white) 
                && tile43.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile52.getBackground().equals(Color.black) 
                && tile43.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 34 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile34.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile34ActionPerformed

    private void tile35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile35ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile35.getBackground().equals(Color.yellow)){
            
            // Tile 35 left for Player 1
           if(tile33.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)){
           
               tile34.setBackground(Color.white);
               tile34.setIcon(new ImageIcon(whitePiece));
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
       }
           // End Tile 35 left for Player 1
                        
            // Tile 35 chosen all possibilities for the right of it for Player 1.
            if(tile40.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.black)){
                
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile39.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile38.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile37.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 35 chosen all posibilities to the right for Player 1.
            
            
            // Tile 35 above for Player 1
            if(tile3.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                                
            }
            // End Tile 35 above for Player 1
                                               
            
            // Tile 35 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black)){
                
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 35 chosen all posibilities below it for Player 1.
        
        
        // Tile 27 Left upper diagonal for Player 1
            if(tile17.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 35 Left upper diagonal for Player 1
        
        
        // Tile 35 right upper diagonal for Player 1
        if(tile7.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile14.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)){
            
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)){
            
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 35 right upper diagonal for Player 1
        
        
        // Tile 35 Lower left diagonal for Player 1
        if(tile49.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)){
            
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 35 lower left diagonal for Player 1
        
        
        // Tile 35 chosen all posibilities lower right diagonal for Player 1.
        if(tile62.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
        else if(tile53.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 35 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile35.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.        
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile35.getBackground().equals(Color.yellow)){
            
            // Tile 35 left for Player 2
           if(tile33.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)){
           
               tile34.setBackground(Color.black);
               tile34.setIcon(new ImageIcon(blackPiece));
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
       }
           // End Tile 35 left for Player 2
                        
            // Tile 35 chosen all possibilities for the right of it for Player 2.
            if(tile40.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white) 
                    && tile38.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.white)){
                
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile39.getBackground().equals(Color.black) 
                    && tile38.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile38.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white) 
                    && tile36.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile37.getBackground().equals(Color.black) 
                    && tile36.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 35 chosen all posibilities to the right for Player 2.
            
            
            // Tile 35 above for Player 2
            if(tile3.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                                
            }
            // End Tile 35 above for Player 2
                                               
            
            // Tile 35 chosen all posibilities below it for Player 2.
            if(tile59.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white)){
                
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile51.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 35 chosen all posibilities below it for Player 2.
        
        
        // Tile 27 Left upper diagonal for Player 2
            if(tile17.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 35 Left upper diagonal for Player 2
        
        
        // Tile 35 right upper diagonal for Player 2
        if(tile7.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile14.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)){
            
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)){
            
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 35 right upper diagonal for Player 2
        
        
        // Tile 35 Lower left diagonal for Player 2
        if(tile49.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)){
            
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 35 lower left diagonal for Player 2
        
        
        // Tile 35 chosen all posibilities lower right diagonal for Player 2.
        if(tile62.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
        else if(tile53.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 35 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile35.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
                       
                       
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile35ActionPerformed

    private void tile38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile38ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile38.getBackground().equals(Color.yellow)){
            
            // Tile 38 left for Player 1
           if(tile33.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                   && tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black)){
           
               tile34.setBackground(Color.white);
               tile34.setIcon(new ImageIcon(whitePiece));
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
            }
           else if(tile34.getBackground().equals(Color.white)
                   && tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black)){
               
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black)){
               
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.black)){
               
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 38 left for Player 1
                        
            // Tile 38 chosen all possibilities for the right of it for Player 1.
            if(tile40.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)){
                
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 38 chosen all posibilities to the right for Player 1.
            
            
            // Tile 38 above for Player 1
            if(tile6.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile14.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 38 above for Player 1
                                               
            
            // Tile 38 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black)){
                
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 38 chosen all posibilities below it for Player 1.
        
        
        // Tile 38 Left upper diagonal for Player 1
            if(tile2.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)){
                
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 38 Left upper diagonal for Player 1
        
        
        // Tile 38 right upper diagonal for Player 1
        if(tile24.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 38 right upper diagonal for Player 1
        
        
        // Tile 38 Lower left diagonal for Player 1
        if(tile59.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                && tile45.getBackground().equals(Color.black)){
            
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                        

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile52.getBackground().equals(Color.white)
                && tile45.getBackground().equals(Color.black)){
            
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 38 lower left diagonal for Player 1
        
        
        // Tile 38 chosen all posibilities right diagonal for Player 1.
        if(tile56.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 38 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile38.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile38.getBackground().equals(Color.yellow)){
            
            // Tile 38 left for Player 2
           if(tile33.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                   && tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white)){
           
               tile34.setBackground(Color.black);
               tile34.setIcon(new ImageIcon(blackPiece));
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
            }
           else if(tile34.getBackground().equals(Color.black)
                   && tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white)){
               
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white)){
               
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.white)){
               
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 38 left for Player 2
                        
            // Tile 38 chosen all possibilities for the right of it for Player 2.
            if(tile40.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)){
                
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 38 chosen all posibilities to the right for Player 2.
            
            
            // Tile 38 above for Player 2
            if(tile6.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile14.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 38 above for Player 2
                                               
            
            // Tile 38 chosen all posibilities below it for Player 2.
            if(tile62.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white)){
                
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile54.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 38 chosen all posibilities below it for Player 2.
        
        
        // Tile 38 Left upper diagonal for Player 2
            if(tile2.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)){
                
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 38 Left upper diagonal for Player 2
        
        
        // Tile 38 right upper diagonal for Player 2
        if(tile24.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 38 right upper diagonal for Player 2
        
        
        // Tile 38 Lower left diagonal for Player 2
        if(tile59.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                && tile45.getBackground().equals(Color.white)){
            
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                        

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile52.getBackground().equals(Color.black)
                && tile45.getBackground().equals(Color.white)){
            
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 38 lower left diagonal for Player 2
        
        
        // Tile 38 chosen all posibilities right diagonal for Player 2.
        if(tile56.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 38 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile38.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
            //talker.whosTurnIsItAnyway("Player 1");
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile38ActionPerformed

    private void tile39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile39ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile39.getBackground().equals(Color.yellow)){
            
            // Tile 39 left for Player 1
           if(tile33.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                   && tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
           
               tile34.setBackground(Color.white);
               tile34.setIcon(new ImageIcon(whitePiece));
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
            }
           else if(tile34.getBackground().equals(Color.white)
                   && tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
               
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
               
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)){
               
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black)){
               
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 39 left for Player 1
                       
            
            // Tile 39 above for Player 1
            if(tile7.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 39 above for Player 1
                                               
            
            // Tile 31 chosen all posibilities below it for Player 1.
            if(tile63.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.black)){
                
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.black)){
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 39 chosen all posibilities below it for Player 1.
        
        
        // Tile 30 Left upper diagonal for Player 1
            if(tile3.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile21.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 39 Left upper diagonal for Player 1
                
        
        // Tile 39 Lower left diagonal for Player 1
        if(tile60.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.black)){
            
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile53.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.black)){
            
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 39 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile39.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile39.getBackground().equals(Color.yellow)){
            
            // Tile 39 left for Player 2
           if(tile33.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                   && tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
           
               tile34.setBackground(Color.black);
               tile34.setIcon(new ImageIcon(blackPiece));
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
            }
           else if(tile34.getBackground().equals(Color.black)
                   && tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
               
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
               
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)){
               
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white)){
               
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 39 left for Player 2
                       
            
            // Tile 39 above for Player 2
            if(tile7.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 39 above for Player 2
                                               
            
            // Tile 31 chosen all posibilities below it for Player 2.
            if(tile63.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile47.getBackground().equals(Color.white)){
                
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile47.getBackground().equals(Color.white)){
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 39 chosen all posibilities below it for Player 2.
        
        
        // Tile 39 Left upper diagonal for Player 2
            if(tile3.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile21.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 39 Left upper diagonal for Player 2
                
        
        // Tile 39 Lower left diagonal for Player 2
        if(tile60.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.white)){
            
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile53.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.white)){
            
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 39 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile39.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile39ActionPerformed

    private void tile40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile40ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile40.getBackground().equals(Color.yellow)){
            
            // Tile 40 left for Player 1
           if(tile33.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                   && tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)
                   && tile39.getBackground().equals(Color.black)){
           
               tile34.setBackground(Color.white);
               tile34.setIcon(new ImageIcon(whitePiece));
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
               tile40.setBackground(Color.white);
               tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 6;
               p2TilesControlled -= 6;
               
            }
           else if(tile34.getBackground().equals(Color.white)
                   && tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)
                   && tile39.getBackground().equals(Color.black)){
               
               tile35.setBackground(Color.white);
               tile35.setIcon(new ImageIcon(whitePiece));
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
               tile40.setBackground(Color.white);
               tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)
                   && tile39.getBackground().equals(Color.black)){
               
               tile36.setBackground(Color.white);
               tile36.setIcon(new ImageIcon(whitePiece));
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
               tile40.setBackground(Color.white);
               tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.black)
                   && tile39.getBackground().equals(Color.black)){
               
               tile37.setBackground(Color.white);
               tile37.setIcon(new ImageIcon(whitePiece));
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
               tile40.setBackground(Color.white);
               tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.black)
                   && tile39.getBackground().equals(Color.black)){
               
               tile38.setBackground(Color.white);
               tile38.setIcon(new ImageIcon(whitePiece));
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
               tile40.setBackground(Color.white);
               tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile38.getBackground().equals(Color.white)
                   && tile39.getBackground().equals(Color.black)){
               
               tile39.setBackground(Color.white);
               tile39.setIcon(new ImageIcon(whitePiece));
               tile40.setBackground(Color.white);
               tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 40 left for Player 1
                       
            
            // Tile 40 above for Player 1
            if(tile8.getBackground().equals(Color.white) && tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.black)){
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 40 above for Player 1
                                               
            
            // Tile 40 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.black)){
                
                
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.black)){
                
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 40 chosen all posibilities below it for Player 1.
        
        
        // Tile 32 Left upper diagonal for Player 1
            if(tile4.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile13.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 40 Left upper diagonal for Player 1
                
        
        // Tile 32 Lower left diagonal for Player 1
        if(tile61.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)
                && tile47.getBackground().equals(Color.black)){
            
            tile40.setBackground(Color.white);
            tile40.setIcon(new ImageIcon(whitePiece));
            tile47.setBackground(Color.white);
            tile47.setIcon(new ImageIcon(whitePiece));
            tile54.setBackground(Color.white);
            tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile54.getBackground().equals(Color.white)
                && tile47.getBackground().equals(Color.black)){
            
            tile40.setBackground(Color.white);
            tile40.setIcon(new ImageIcon(whitePiece));
            tile47.setBackground(Color.white);
            tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 40 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile40.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        } 
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile40.getBackground().equals(Color.yellow)){
            
            // Tile 40 left for Player 2
           if(tile33.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                   && tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)
                   && tile39.getBackground().equals(Color.white)){
           
               tile34.setBackground(Color.black);
               tile34.setIcon(new ImageIcon(blackPiece));
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
               tile40.setBackground(Color.black);
               tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 6;
               p2TilesControlled += 6;
               
            }
           else if(tile34.getBackground().equals(Color.black)
                   && tile35.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)
                   && tile39.getBackground().equals(Color.white)){
               
               tile35.setBackground(Color.black);
               tile35.setIcon(new ImageIcon(blackPiece));
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
               tile40.setBackground(Color.black);
               tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile35.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)
                   && tile39.getBackground().equals(Color.white)){
               
               tile36.setBackground(Color.black);
               tile36.setIcon(new ImageIcon(blackPiece));
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
               tile40.setBackground(Color.black);
               tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile36.getBackground().equals(Color.black)
                   && tile37.getBackground().equals(Color.white) && tile38.getBackground().equals(Color.white)
                   && tile39.getBackground().equals(Color.white)){
               
               tile37.setBackground(Color.black);
               tile37.setIcon(new ImageIcon(blackPiece));
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
               tile40.setBackground(Color.black);
               tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile37.getBackground().equals(Color.black) && tile38.getBackground().equals(Color.white)
                   && tile39.getBackground().equals(Color.white)){
               
               tile38.setBackground(Color.black);
               tile38.setIcon(new ImageIcon(blackPiece));
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
               tile40.setBackground(Color.black);
               tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile38.getBackground().equals(Color.black)
                   && tile39.getBackground().equals(Color.white)){
               
               tile39.setBackground(Color.black);
               tile39.setIcon(new ImageIcon(blackPiece));
               tile40.setBackground(Color.black);
               tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 40 left for Player 2
                       
            
            // Tile 40 above for Player 2
            if(tile8.getBackground().equals(Color.black) && tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.white)){
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 40 above for Player 2
                                               
            
            // Tile 40 chosen all posibilities below it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile56.getBackground().equals(Color.white) 
                    && tile48.getBackground().equals(Color.white)){
                
                
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                               

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile56.getBackground().equals(Color.black) 
                    && tile48.getBackground().equals(Color.white)){
                
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 40 chosen all posibilities below it for Player 2.
        
        
        // Tile 40 Left upper diagonal for Player 2
            if(tile4.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile13.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 40 Left upper diagonal for Player 2
                
        
        // Tile 40 Lower left diagonal for Player 2
        if(tile61.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)
                && tile47.getBackground().equals(Color.white)){
            
            tile40.setBackground(Color.black);
            tile40.setIcon(new ImageIcon(blackPiece));
            tile47.setBackground(Color.black);
            tile47.setIcon(new ImageIcon(blackPiece));
            tile54.setBackground(Color.black);
            tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile54.getBackground().equals(Color.black)
                && tile47.getBackground().equals(Color.white)){
            
            tile40.setBackground(Color.black);
            tile40.setIcon(new ImageIcon(blackPiece));
            tile47.setBackground(Color.black);
            tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 40 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile40.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile40ActionPerformed

    private void tile41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile41ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile41.getBackground().equals(Color.yellow)){
            
            // Tile 41 chosen all possibilities for the right of it for Player 1.
            if(tile48.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile42.getBackground().equals(Color.black)){
                
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile47.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile42.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile46.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile42.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile42.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile44.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.black)
                    && tile42.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile43.getBackground().equals(Color.white)
                    && tile42.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 41 chosen all posibilities to the right for Player 1.
            
            
            // Tile 33 above for Player 1
            if(tile1.getBackground().equals(Color.white) && tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 41 above for Player 1
            
            
            // Tile 41 chosen all posibilities below it for Player 1.
            if(tile57.getBackground().equals(Color.white) && tile49.getBackground().equals(Color.black)){
                
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 41 chosen all posibilities below it for Player 1.
        
        
        // Tile 41 upper right diagonal for Player 1
        if(tile6.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                && tile20.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                && tile34.getBackground().equals(Color.black)){
            
            tile13.setBackground(Color.white);
            tile13.setIcon(new ImageIcon(whitePiece));
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
            tile41.setBackground(Color.white);
            tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile13.getBackground().equals(Color.white)
                && tile20.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                && tile34.getBackground().equals(Color.black)){
            
            tile20.setBackground(Color.white);
            tile20.setIcon(new ImageIcon(whitePiece));
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
            tile41.setBackground(Color.white);
            tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile20.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)
                && tile34.getBackground().equals(Color.black)){
            
            tile27.setBackground(Color.white);
            tile27.setIcon(new ImageIcon(whitePiece));
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
            tile41.setBackground(Color.white);
            tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile27.getBackground().equals(Color.white)
                && tile34.getBackground().equals(Color.black)){
            
            tile34.setBackground(Color.white);
            tile34.setIcon(new ImageIcon(whitePiece));
            tile41.setBackground(Color.white);
            tile41.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
                        
        }
        // End Tile 41 upper right diagonal for Player 1
        
        
        // Tile 41 chosen all posibilities lower right diagonal for Player 1.
        if(tile59.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 41 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile41.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile41.getBackground().equals(Color.yellow)){
            
            // Tile 41 chosen all possibilities for the right of it for Player 2.
            if(tile48.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile42.getBackground().equals(Color.white)){
                
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile47.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile42.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile46.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile42.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile42.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile44.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.white)
                    && tile42.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile43.getBackground().equals(Color.black)
                    && tile42.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 41 chosen all posibilities to the right for Player 2.
            
            
            // Tile 41 above for Player 2
            if(tile1.getBackground().equals(Color.black) && tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 41 above for Player 2
            
            
            // Tile 41 chosen all posibilities below it for Player 2.
            if(tile57.getBackground().equals(Color.black) && tile49.getBackground().equals(Color.white)){
                
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 41 chosen all posibilities below it for Player 2.
        
        
        // Tile 41 upper right diagonal for Player 2
        if(tile6.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                && tile20.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                && tile34.getBackground().equals(Color.white)){
            
            tile13.setBackground(Color.black);
            tile13.setIcon(new ImageIcon(blackPiece));
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
            tile41.setBackground(Color.black);
            tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile13.getBackground().equals(Color.black)
                && tile20.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                && tile34.getBackground().equals(Color.white)){
            
            tile20.setBackground(Color.black);
            tile20.setIcon(new ImageIcon(blackPiece));
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
            tile41.setBackground(Color.black);
            tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile20.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)
                && tile34.getBackground().equals(Color.white)){
            
            tile27.setBackground(Color.black);
            tile27.setIcon(new ImageIcon(blackPiece));
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
            tile41.setBackground(Color.black);
            tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile27.getBackground().equals(Color.black)
                && tile34.getBackground().equals(Color.white)){
            
            tile34.setBackground(Color.black);
            tile34.setIcon(new ImageIcon(blackPiece));
            tile41.setBackground(Color.black);
            tile41.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
                        
        }
        // End Tile 41 upper right diagonal for Player 2
        
        
        // Tile 41 chosen all posibilities lower right diagonal for Player 2.
        if(tile59.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 41 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile41.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile41ActionPerformed

    private void tile42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile42ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile42.getBackground().equals(Color.yellow)){
            
            // Tile 42 chosen all possibilities for the right of it for Player 1.
            if(tile48.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black)){
                
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile47.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile46.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile44.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 42 chosen all posibilities to the right for Player 1.
            
            
            // Tile 42 above for Player 1
            if(tile2.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                                
            }
            else if(tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 42 above for Player 1
            
            
            // Tile 42 chosen all posibilities below it for Player 1.
            if(tile58.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)){
                
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 42 chosen all posibilities below it for Player 1.
        
        
        // Tile 42 upper right diagonal for Player 1
        if(tile7.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile14.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black)){
            
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black)){
            
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
                        
        }
        else if(tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.black)){
            
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 42 upper right diagonal for Player 1
        
        
        // Tile 42 chosen all posibilities lower right diagonal for Player 1.
        if(tile60.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 42 choosen all posibilities right diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile42.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile42.getBackground().equals(Color.yellow)){
            
            // Tile 42 chosen all possibilities for the right of it for Player 2.
            if(tile48.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white)){
                
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile47.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white) 
                    && tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile46.getBackground().equals(Color.black) 
                    && tile45.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile45.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white) 
                    && tile43.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile44.getBackground().equals(Color.black) 
                    && tile43.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 42 chosen all posibilities to the right for Player 2.
            
            
            // Tile 42 above for Player 2
            if(tile2.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                                
            }
            else if(tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 42 above for Player 2
            
            
            // Tile 42 chosen all posibilities below it for Player 2.
            if(tile58.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)){
                
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 42 chosen all posibilities below it for Player 2.
        
        
        // Tile 42 upper right diagonal for Player 2
        if(tile7.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile14.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white)){
            
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white)){
            
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
                        
        }
        else if(tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.white)){
            
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 42 upper right diagonal for Player 2
        
        
        // Tile 42 chosen all posibilities lower right diagonal for Player 2.
        if(tile60.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 42 choosen all posibilities right diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile42.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile42ActionPerformed

    private void tile43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile43ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile43.getBackground().equals(Color.yellow)){
            
            // Tile 43 left for Player 1
           if(tile41.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)){
           
               tile42.setBackground(Color.white);
               tile42.setIcon(new ImageIcon(whitePiece));
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
       }
           // End Tile 43 left for Player 1
                        
            // Tile 35 chosen all possibilities for the right of it for Player 1.
            if(tile48.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.black)){
                
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile47.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile46.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile45.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 43 chosen all posibilities to the right for Player 1.
            
            
            // Tile 43 above for Player 1
            if(tile3.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                                
            }
            else if(tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 43 above for Player 1
                                               
            
            // Tile 35 chosen all posibilities below it for Player 1.
            if(tile59.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)){
                
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 43 chosen all posibilities below it for Player 1.
        
        
        // Tile 43 Left upper diagonal for Player 1
            if(tile25.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 43 Left upper diagonal for Player 1
        
        
        // Tile 43 right upper diagonal for Player 1
        if(tile8.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)
                && tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile15.getBackground().equals(Color.white)
                && tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black)){
            
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.black)){
            
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 43 right upper diagonal for Player 1
        
        
        // Tile 43 Lower left diagonal for Player 1
        if(tile57.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)){
            
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 43 lower left diagonal for Player 1
        
        
        // Tile 43 chosen all posibilities lower right diagonal for Player 1.
        if(tile61.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 43 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile43.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile43.getBackground().equals(Color.yellow)){
            
            // Tile 43 left for Player 2
           if(tile41.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)){
           
               tile42.setBackground(Color.black);
               tile42.setIcon(new ImageIcon(blackPiece));
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
       }
           // End Tile 43 left for Player 2
                        
            // Tile 43 chosen all possibilities for the right of it for Player 2.
            if(tile48.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.white)){
                
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile47.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile46.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white) 
                    && tile44.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile45.getBackground().equals(Color.black) 
                    && tile44.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 43 chosen all posibilities to the right for Player 2.
            
            
            // Tile 43 above for Player 2
            if(tile3.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                                
            }
            else if(tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 43 above for Player 2
                                               
            
            // Tile 43 chosen all posibilities below it for Player 2.
            if(tile59.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)){
                
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 43 chosen all posibilities below it for Player 2.
        
        
        // Tile 43 Left upper diagonal for Player 2
            if(tile25.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 43 Left upper diagonal for Player 2
        
        
        // Tile 43 right upper diagonal for Player 2
        if(tile8.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)
                && tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile15.getBackground().equals(Color.black)
                && tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white)){
            
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.white)){
            
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 43 right upper diagonal for Player 2
        
        
        // Tile 43 Lower left diagonal for Player 2
        if(tile57.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)){
            
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 43 lower left diagonal for Player 2
        
        
        // Tile 43 chosen all posibilities lower right diagonal for Player 2.
        if(tile61.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 43 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile43.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile43ActionPerformed

    private void tile44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile44ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile44.getBackground().equals(Color.yellow)){
            
            // Tile 44 left for Player 1
           if(tile41.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.black)){
           
               tile42.setBackground(Color.white);
               tile42.setIcon(new ImageIcon(whitePiece));
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
            }
           else if(tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.black)){
               
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 44 left for Player 1
                        
            // Tile 35 chosen all possibilities for the right of it for Player 1.
            if(tile48.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
                
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile47.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile46.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 44 chosen all posibilities to the right for Player 1.
            
            
            // Tile 44 above for Player 1
            if(tile4.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black)){
                
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                                
            }
            else if(tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.black)){
                
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 44 above for Player 1
                                               
            
            // Tile 35 chosen all posibilities below it for Player 1.
            if(tile60.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)){
                
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 44 chosen all posibilities below it for Player 1.
        
        
        // Tile 44 Left upper diagonal for Player 1
            if(tile17.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile26.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 44 Left upper diagonal for Player 1
        
        
        // Tile 44 right upper diagonal for Player 1
        if(tile16.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile23.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)){
            
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black)){
            
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 44 right upper diagonal for Player 1
        
        
        // Tile 43 Lower left diagonal for Player 1
        if(tile58.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)){
            
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 44 lower left diagonal for Player 1
        
        
        // Tile 44 chosen all posibilities lower right diagonal for Player 1.
        if(tile62.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 44 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile44.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile44.getBackground().equals(Color.yellow)){
            
            // Tile 44 left for Player 2
           if(tile41.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.white)){
           
               tile42.setBackground(Color.black);
               tile42.setIcon(new ImageIcon(blackPiece));
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
            }
           else if(tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.white)){
               
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 44 left for Player 2
                        
            // Tile 44 chosen all possibilities for the right of it for Player 2.
            if(tile48.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
                
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile47.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile46.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 44 chosen all posibilities to the right for Player 2.
            
            
            // Tile 44 above for Player 2
            if(tile4.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white)){
                
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                                
            }
            else if(tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.white)){
                
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 44 above for Player 2
                                               
            
            // Tile 44 chosen all posibilities below it for Player 2.
            if(tile60.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)){
                
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 44 chosen all posibilities below it for Player 2.
        
        
        // Tile 44 Left upper diagonal for Player 2
            if(tile17.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile26.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 44 Left upper diagonal for Player 2
        
        
        // Tile 44 right upper diagonal for Player 2
        if(tile16.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile23.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)){
            
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white)){
            
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 44 right upper diagonal for Player 2
        
        
        // Tile 43 Lower left diagonal for Player 2
        if(tile58.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)){
            
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 44 lower left diagonal for Player 2
        
        
        // Tile 44 chosen all posibilities lower right diagonal for Player 2.
        if(tile62.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 44 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile44.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile44ActionPerformed

    private void tile45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile45ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile45.getBackground().equals(Color.yellow)){
            
            // Tile 45 left for Player 1
           if(tile41.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
           
               tile42.setBackground(Color.white);
               tile42.setIcon(new ImageIcon(whitePiece));
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
            }
           else if(tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
               
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)){
               
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 45 left for Player 1
                        
            // Tile 45 chosen all possibilities for the right of it for Player 1.
            if(tile48.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.black)){
                
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile47.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.black)){
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 45 chosen all posibilities to the right for Player 1.
            
            
            // Tile 45 above for Player 1
            if(tile5.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile13.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black)){
                
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                                
            }
            else if(tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.black)){
                
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 45 above for Player 1
                                               
            
            // Tile 45 chosen all posibilities below it for Player 1.
            if(tile61.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)){
                
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 45 chosen all posibilities below it for Player 1.
        
        
        // Tile 45 Left upper diagonal for Player 1
            if(tile9.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                    && tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile18.getBackground().equals(Color.white)
                    && tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)){
                
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 45 Left upper diagonal for Player 1
        
        
        // Tile 45 right upper diagonal for Player 1
        if(tile24.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)
                && tile38.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile31.getBackground().equals(Color.white)
                && tile38.getBackground().equals(Color.black)){
            
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 45 right upper diagonal for Player 1
        
        
        // Tile 45 Lower left diagonal for Player 1
        if(tile59.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)){
            
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 45 lower left diagonal for Player 1
        
        
        // Tile 45 chosen all posibilities lower right diagonal for Player 1.
        if(tile63.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)){
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 45 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile45.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile45.getBackground().equals(Color.yellow)){
            
            // Tile 45 left for Player 2
           if(tile41.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
           
               tile42.setBackground(Color.black);
               tile42.setIcon(new ImageIcon(blackPiece));
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
            }
           else if(tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
               
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)){
               
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 45 left for Player 2
                        
            // Tile 45 chosen all possibilities for the right of it for Player 2.
            if(tile48.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white) 
                    && tile46.getBackground().equals(Color.white)){
                
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile47.getBackground().equals(Color.black) 
                    && tile46.getBackground().equals(Color.white)){
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 45 chosen all posibilities to the right for Player 2.
            
            
            // Tile 45 above for Player 2
            if(tile5.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile13.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white)){
                
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                                
            }
            else if(tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.white)){
                
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 45 above for Player 2
                                               
            
            // Tile 45 chosen all posibilities below it for Player 2.
            if(tile61.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)){
                
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 45 chosen all posibilities below it for Player 2.
        
        
        // Tile 45 Left upper diagonal for Player 2
            if(tile9.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                    && tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile18.getBackground().equals(Color.black)
                    && tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)){
                
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 45 Left upper diagonal for Player 2
        
        
        // Tile 45 right upper diagonal for Player 2
        if(tile24.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)
                && tile38.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile31.getBackground().equals(Color.black)
                && tile38.getBackground().equals(Color.white)){
            
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 45 right upper diagonal for Player 2
        
        
        // Tile 45 Lower left diagonal for Player 2
        if(tile59.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)){
            
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 45 lower left diagonal for Player 2
        
        
        // Tile 45 chosen all posibilities lower right diagonal for Player 2.
        if(tile63.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)){
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 45 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile45.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile45ActionPerformed

    private void tile46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile46ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile46.getBackground().equals(Color.yellow)){
            
            // Tile 46 left for Player 1
           if(tile41.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black)){
           
               tile42.setBackground(Color.white);
               tile42.setIcon(new ImageIcon(whitePiece));
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
            }
           else if(tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black)){
               
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black)){
               
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.black)){
               
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 46 left for Player 1
                        
            // Tile 46 chosen all possibilities for the right of it for Player 1.
            if(tile48.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)){
                
                
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 46 chosen all posibilities to the right for Player 1.
            
            
            // Tile 46 above for Player 1
            if(tile6.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile14.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 46 above for Player 1
                                               
            
            // Tile 46 chosen all posibilities below it for Player 1.
            if(tile62.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)){
                
                
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 46 chosen all posibilities below it for Player 1.
        
        
        // Tile 46 Left upper diagonal for Player 1
            if(tile1.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black)){
                
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.black)){
                
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 46 Left upper diagonal for Player 1
        
        
        // Tile 46 right upper diagonal for Player 1
        if(tile32.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)){
            
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 46 right upper diagonal for Player 1
        
        
        // Tile 46 Lower left diagonal for Player 1
        if(tile60.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)){
            
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                        

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 46 lower left diagonal for Player 1
        
        
        // Tile 46 chosen all posibilities right diagonal for Player 1.
        if(tile64.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black)){
                
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 46 choosen all posibilities right lower diagnal for Player 1.
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile46.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile46.getBackground().equals(Color.yellow)){
            
            // Tile 46 left for Player 2
           if(tile41.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white)){
           
               tile42.setBackground(Color.black);
               tile42.setIcon(new ImageIcon(blackPiece));
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
            }
           else if(tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white)){
               
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white)){
               
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.white)){
               
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 46 left for Player 2
                        
            // Tile 46 chosen all possibilities for the right of it for Player 2.
            if(tile48.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)){
                
                
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 46 chosen all posibilities to the right for Player 2.
            
            
            // Tile 46 above for Player 2
            if(tile6.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white) 
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile14.getBackground().equals(Color.black) 
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 46 above for Player 2
                                               
            
            // Tile 46 chosen all posibilities below it for Player 2.
            if(tile62.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)){
                
                
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 46 chosen all posibilities below it for Player 2.
        
        
        // Tile 46 Left upper diagonal for Player 2
            if(tile1.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white)){
                
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.white)){
                
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 46 Left upper diagonal for Player 2
        
        
        // Tile 46 right upper diagonal for Player 2
        if(tile32.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)){
            
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 46 right upper diagonal for Player 2
        
        
        // Tile 46 Lower left diagonal for Player 2
        if(tile60.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)){
            
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                        

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 46 lower left diagonal for Player 2
        
        
        // Tile 46 chosen all posibilities right diagonal for Player 2.
        if(tile64.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white)){
                
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                                                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 46 choosen all posibilities right lower diagnal for Player 2.
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile46.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile46ActionPerformed

    private void tile47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile47ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile47.getBackground().equals(Color.yellow)){
            
            // Tile 47 left for Player 1
           if(tile41.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
           
               tile42.setBackground(Color.white);
               tile42.setIcon(new ImageIcon(whitePiece));
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
            }
           else if(tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
               
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
               
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
               
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black)){
               
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 47 left for Player 1
                       
            
            // Tile 47 above for Player 1
            if(tile7.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.black)){
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 47 above for Player 1
                                               
            
            // Tile 47 chosen all posibilities below it for Player 1.
            if(tile63.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black)){
                
                
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 47 chosen all posibilities below it for Player 1.
        
        
        // Tile 47 Left upper diagonal for Player 1
            if(tile2.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black)){
                
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 47 Left upper diagonal for Player 1
                
        
        // Tile 47 Lower left diagonal for Player 1
        if(tile61.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)){
            
            tile47.setBackground(Color.white);
            tile47.setIcon(new ImageIcon(whitePiece));
            tile54.setBackground(Color.white);
            tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 47 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile47.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile47.getBackground().equals(Color.yellow)){
            
            // Tile 47 left for Player 2
           if(tile41.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
           
               tile42.setBackground(Color.black);
               tile42.setIcon(new ImageIcon(blackPiece));
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
            }
           else if(tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
               
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
               
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
               
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white)){
               
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 47 left for Player 2
                       
            
            // Tile 47 above for Player 2
            if(tile7.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.white)){
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 47 above for Player 2
                                               
            
            // Tile 47 chosen all posibilities below it for Player 2.
            if(tile63.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white)){
                
                
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 47 chosen all posibilities below it for Player 2.
        
        
        // Tile 47 Left upper diagonal for Player 2
            if(tile2.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white)){
                
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 47 Left upper diagonal for Player 2
                
        
        // Tile 47 Lower left diagonal for Player 2
        if(tile61.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)){
            
            tile47.setBackground(Color.black);
            tile47.setIcon(new ImageIcon(blackPiece));
            tile54.setBackground(Color.black);
            tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 47 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile47.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile47ActionPerformed

    private void tile48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile48ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile48.getBackground().equals(Color.yellow)){
            
            // Tile 48 left for Player 1
           if(tile41.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                   && tile47.getBackground().equals(Color.black)){
           
               tile42.setBackground(Color.white);
               tile42.setIcon(new ImageIcon(whitePiece));
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
               tile48.setBackground(Color.white);
               tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 6;
               p2TilesControlled -= 6;
               
            }
           else if(tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                   && tile47.getBackground().equals(Color.black)){
               
               tile43.setBackground(Color.white);
               tile43.setIcon(new ImageIcon(whitePiece));
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
               tile48.setBackground(Color.white);
               tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                   && tile47.getBackground().equals(Color.black)){
               
               tile44.setBackground(Color.white);
               tile44.setIcon(new ImageIcon(whitePiece));
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
               tile48.setBackground(Color.white);
               tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                   && tile47.getBackground().equals(Color.black)){
               
               tile45.setBackground(Color.white);
               tile45.setIcon(new ImageIcon(whitePiece));
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
               tile48.setBackground(Color.white);
               tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black)
                   && tile47.getBackground().equals(Color.black)){
               
               tile46.setBackground(Color.white);
               tile46.setIcon(new ImageIcon(whitePiece));
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
               tile48.setBackground(Color.white);
               tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile46.getBackground().equals(Color.white)
                   && tile47.getBackground().equals(Color.black)){
               
               tile47.setBackground(Color.white);
               tile47.setIcon(new ImageIcon(whitePiece));
               tile48.setBackground(Color.white);
               tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 48 left for Player 1
                       
            
            // Tile 48 above for Player 1
            if(tile8.getBackground().equals(Color.white) && tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black)){
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.black)){
                
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 48 above for Player 1
                                               
            
            // Tile 48 chosen all posibilities below it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile56.getBackground().equals(Color.black)){
                
                
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                               

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
        // End Tile 48 chosen all posibilities below it for Player 1.
        
        
        // Tile 48 Left upper diagonal for Player 1
            if(tile3.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile21.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile30.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.black)){
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 48 Left upper diagonal for Player 1
                
        
        // Tile 48 Lower left diagonal for Player 1
        if(tile62.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black)){
            
            tile48.setBackground(Color.white);
            tile48.setIcon(new ImageIcon(whitePiece));
            tile55.setBackground(Color.white);
            tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 48 lower left diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile48.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile48.getBackground().equals(Color.yellow)){
            
            // Tile 48 left for Player 2
           if(tile41.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                   && tile47.getBackground().equals(Color.white)){
           
               tile42.setBackground(Color.black);
               tile42.setIcon(new ImageIcon(blackPiece));
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
               tile48.setBackground(Color.black);
               tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 6;
               p2TilesControlled += 6;
               
            }
           else if(tile42.getBackground().equals(Color.black)
                   && tile43.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                   && tile47.getBackground().equals(Color.white)){
               
               tile43.setBackground(Color.black);
               tile43.setIcon(new ImageIcon(blackPiece));
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
               tile48.setBackground(Color.black);
               tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile43.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                   && tile47.getBackground().equals(Color.white)){
               
               tile44.setBackground(Color.black);
               tile44.setIcon(new ImageIcon(blackPiece));
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
               tile48.setBackground(Color.black);
               tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile44.getBackground().equals(Color.black)
                   && tile45.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                   && tile47.getBackground().equals(Color.white)){
               
               tile45.setBackground(Color.black);
               tile45.setIcon(new ImageIcon(blackPiece));
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
               tile48.setBackground(Color.black);
               tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile45.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white)
                   && tile47.getBackground().equals(Color.white)){
               
               tile46.setBackground(Color.black);
               tile46.setIcon(new ImageIcon(blackPiece));
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
               tile48.setBackground(Color.black);
               tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile46.getBackground().equals(Color.black)
                   && tile47.getBackground().equals(Color.white)){
               
               tile47.setBackground(Color.black);
               tile47.setIcon(new ImageIcon(blackPiece));
               tile48.setBackground(Color.black);
               tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 48 left for Player 2
                       
            
            // Tile 48 above for Player 2
            if(tile8.getBackground().equals(Color.black) && tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white)){
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.white)){
                
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 48 above for Player 2
                                               
            
            // Tile 48 chosen all posibilities below it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile56.getBackground().equals(Color.white)){
                
                
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                               

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
        // End Tile 48 chosen all posibilities below it for Player 2.
        
        
        // Tile 48 Left upper diagonal for Player 2
            if(tile3.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile21.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile30.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.white)){
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 48 Left upper diagonal for Player 2
                
        
        // Tile 48 Lower left diagonal for Player 2
        if(tile62.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white)){
            
            tile48.setBackground(Color.black);
            tile48.setIcon(new ImageIcon(blackPiece));
            tile55.setBackground(Color.black);
            tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 48 lower left diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile48.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile48ActionPerformed

    private void tile49ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile49ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile49.getBackground().equals(Color.yellow)){
            
            // Tile 49 chosen all possibilities for the right of it for Player 1.
            if(tile56.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.black)){
                
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.black)){
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.black)){
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.black)){
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.black)){
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile51.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)){
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 49 chosen all posibilities to the right for Player 1.
            
            
            // Tile 49 above for Player 1
            if(tile1.getBackground().equals(Color.white) && tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 49 above for Player 1
               
        
        // Tile 49 upper right diagonal for Player 1
        if(tile7.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
            
            tile14.setBackground(Color.white);
            tile14.setIcon(new ImageIcon(whitePiece));
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
            tile49.setBackground(Color.white);
            tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile14.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
            
            tile21.setBackground(Color.white);
            tile21.setIcon(new ImageIcon(whitePiece));
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
            tile49.setBackground(Color.white);
            tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
            
            tile28.setBackground(Color.white);
            tile28.setIcon(new ImageIcon(whitePiece));
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
            tile49.setBackground(Color.white);
            tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
            
            tile35.setBackground(Color.white);
            tile35.setIcon(new ImageIcon(whitePiece));
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
            tile49.setBackground(Color.white);
            tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
                        
        }
        else if(tile35.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)){
            
            tile42.setBackground(Color.white);
            tile42.setIcon(new ImageIcon(whitePiece));
            tile49.setBackground(Color.white);
            tile49.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 49 upper right diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile49.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile49.getBackground().equals(Color.yellow)){
            
            // Tile 49 chosen all possibilities for the right of it for Player 2.
            if(tile56.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.white)){
                
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.white)){
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.white)){
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.white)){
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.white)){
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile51.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)){
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 49 chosen all posibilities to the right for Player 2.
            
            
            // Tile 49 above for Player 2
            if(tile1.getBackground().equals(Color.black) && tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 49 above for Player 2
               
        
        // Tile 49 upper right diagonal for Player 2
        if(tile7.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                && tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
            
            tile14.setBackground(Color.black);
            tile14.setIcon(new ImageIcon(blackPiece));
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
            tile49.setBackground(Color.black);
            tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile14.getBackground().equals(Color.black)
                && tile21.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
            
            tile21.setBackground(Color.black);
            tile21.setIcon(new ImageIcon(blackPiece));
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
            tile49.setBackground(Color.black);
            tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile21.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                && tile35.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
            
            tile28.setBackground(Color.black);
            tile28.setIcon(new ImageIcon(blackPiece));
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
            tile49.setBackground(Color.black);
            tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile28.getBackground().equals(Color.black)
                && tile35.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
            
            tile35.setBackground(Color.black);
            tile35.setIcon(new ImageIcon(blackPiece));
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
            tile49.setBackground(Color.black);
            tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
                        
        }
        else if(tile35.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)){
            
            tile42.setBackground(Color.black);
            tile42.setIcon(new ImageIcon(blackPiece));
            tile49.setBackground(Color.black);
            tile49.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 49 upper right diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile49.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile49ActionPerformed

    private void tile50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile50ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile50.getBackground().equals(Color.yellow)){
            
            // Tile 50 chosen all possibilities for the right of it for Player 1.
            if(tile56.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.black)){
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 50 chosen all posibilities to the right for Player 1.
            
            
            // Tile 50 above for Player 1
            if(tile2.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 50 above for Player 1
               
        
        // Tile 50 upper right diagonal for Player 1
        if(tile8.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)
                && tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile15.getBackground().equals(Color.white)
                && tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
            
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
            
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
                        
        }
        else if(tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.black)){
            
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 50 upper right diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile50.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile50.getBackground().equals(Color.yellow)){
            
            // Tile 50 chosen all possibilities for the right of it for Player 2.
            if(tile56.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile53.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile52.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.white)){
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 50 chosen all posibilities to the right for Player 2.
            
            
            // Tile 50 above for Player 2
            if(tile2.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 50 above for Player 2
               
        
        // Tile 50 upper right diagonal for Player 2
        if(tile8.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)
                && tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile15.getBackground().equals(Color.black)
                && tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
            
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
            
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
                        
        }
        else if(tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.white)){
            
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 50 upper right diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile50.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile50ActionPerformed

    private void tile51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile51ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile51.getBackground().equals(Color.yellow)){
            
            // Tile 51 left for Player 1
           if(tile49.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)){
           
               tile50.setBackground(Color.white);
               tile50.setIcon(new ImageIcon(whitePiece));
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
       }
           // End Tile 51 left for Player 1
                        
            // Tile 51 chosen all possibilities for the right of it for Player 1.
            if(tile56.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black) 
                    && tile52.getBackground().equals(Color.black)){
                
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black) 
                    && tile52.getBackground().equals(Color.black)){
                
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black) 
                    && tile52.getBackground().equals(Color.black)){
                
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile53.getBackground().equals(Color.white) 
                    && tile52.getBackground().equals(Color.black)){
                
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 51 chosen all posibilities to the right for Player 1.
            
            
            // Tile 51 above for Player 1
            if(tile3.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                                
            }
            else if(tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 51 above for Player 1
            
                
        // Tile 51 Left upper diagonal for Player 1
            if(tile33.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 51 Left upper diagonal for Player 1
        
        
        // Tile 51 right upper diagonal for Player 1
        if(tile16.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile23.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black)){
            
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black)){
            
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.black)){
            
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 51 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile51.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile51.getBackground().equals(Color.yellow)){
            
            // Tile 51 left for Player 2
           if(tile49.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)){
           
               tile50.setBackground(Color.black);
               tile50.setIcon(new ImageIcon(blackPiece));
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
       }
           // End Tile 51 left for Player 2
                        
            // Tile 51 chosen all possibilities for the right of it for Player 2.
            if(tile56.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white) 
                    && tile52.getBackground().equals(Color.white)){
                
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white) 
                    && tile52.getBackground().equals(Color.white)){
                
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white) 
                    && tile52.getBackground().equals(Color.white)){
                
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile53.getBackground().equals(Color.black) 
                    && tile52.getBackground().equals(Color.white)){
                
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 51 chosen all posibilities to the right for Player 2.
            
            
            // Tile 51 above for Player 2
            if(tile3.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                                
            }
            else if(tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 51 above for Player 2
            
                
        // Tile 51 Left upper diagonal for Player 2
            if(tile33.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 51 Left upper diagonal for Player 2
        
        
        // Tile 51 right upper diagonal for Player 2
        if(tile16.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile23.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white)){
            
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white)){
            
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.white)){
            
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 51 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile51.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile51ActionPerformed

    private void tile52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile52ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile52.getBackground().equals(Color.yellow)){
            
            // Tile 52 left for Player 1
           if(tile49.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.black)){
           
               tile50.setBackground(Color.white);
               tile50.setIcon(new ImageIcon(whitePiece));
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
            }
           else if(tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.black)){
               
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 52 left for Player 1
                        
            // Tile 52 chosen all possibilities for the right of it for Player 1.
            if(tile56.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black)){
                
                
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black)){
                
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)){
                
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 52 chosen all posibilities to the right for Player 1.
            
            
            // Tile 52 above for Player 1
            if(tile4.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
                
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                                
            }
            else if(tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
                
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 52 above for Player 1
                    
        
        // Tile 52 Left upper diagonal for Player 1
            if(tile25.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                    && tile43.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile34.getBackground().equals(Color.white)
                    && tile43.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 52 Left upper diagonal for Player 1
        
        
        // Tile 52 right upper diagonal for Player 1
        if(tile34.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)
                && tile38.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile31.getBackground().equals(Color.white)
                && tile38.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
            
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile38.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black)){
            
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 52 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile52.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile52.getBackground().equals(Color.yellow)){
            
            // Tile 52 left for Player 2
           if(tile49.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.white)){
           
               tile50.setBackground(Color.black);
               tile50.setIcon(new ImageIcon(blackPiece));
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
            }
           else if(tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.white)){
               
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 52 left for Player 2
                        
            // Tile 52 chosen all possibilities for the right of it for Player 2.
            if(tile56.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white)){
                
                
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white)){
                
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile54.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)){
                
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 52 chosen all posibilities to the right for Player 2.
            
            
            // Tile 52 above for Player 2
            if(tile4.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
                
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                                
            }
            else if(tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
                
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 52 above for Player 2
                    
        
        // Tile 52 Left upper diagonal for Player 2
            if(tile25.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                    && tile43.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile34.getBackground().equals(Color.black)
                    && tile43.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 52 Left upper diagonal for Player 2
        
        
        // Tile 52 right upper diagonal for Player 2
        if(tile34.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)
                && tile38.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile31.getBackground().equals(Color.black)
                && tile38.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
            
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile38.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white)){
            
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 52 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile52.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile52ActionPerformed

    private void tile53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile53ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile53.getBackground().equals(Color.yellow)){
            
            // Tile 53 left for Player 1
           if(tile49.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)){
           
               tile50.setBackground(Color.white);
               tile50.setIcon(new ImageIcon(whitePiece));
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
            }
           else if(tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)){
               
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)){
               
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 53 left for Player 1
                        
            // Tile 53 chosen all possibilities for the right of it for Player 1.
            if(tile56.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.black)){
                
                
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.black)){
                
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 53 chosen all posibilities to the right for Player 1.
            
            
            // Tile 53 above for Player 1
            if(tile5.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile13.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
                
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                                
            }
            else if(tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)){
                
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black)){
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 53 above for Player 1
                                             
                                       
        // Tile 53 Left upper diagonal for Player 1
            if(tile17.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile26.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile35.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 53 Left upper diagonal for Player 1
        
        
        // Tile 53 right upper diagonal for Player 1
        if(tile32.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.black)){
            
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile39.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.black)){
            
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 53 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile53.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile53.getBackground().equals(Color.yellow)){
            
            // Tile 53 left for Player 2
           if(tile49.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)){
           
               tile50.setBackground(Color.black);
               tile50.setIcon(new ImageIcon(blackPiece));
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
            }
           else if(tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)){
               
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)){
               
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 53 left for Player 2
                        
            // Tile 53 chosen all possibilities for the right of it for Player 2.
            if(tile56.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white) 
                    && tile54.getBackground().equals(Color.white)){
                
                
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile55.getBackground().equals(Color.black) 
                    && tile54.getBackground().equals(Color.white)){
                
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 53 chosen all posibilities to the right for Player 2.
            
            
            // Tile 53 above for Player 2
            if(tile5.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile13.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
                
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                                
            }
            else if(tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)){
                
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white)){
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 53 above for Player 2
                                             
                                       
        // Tile 53 Left upper diagonal for Player 2
            if(tile17.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile26.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile35.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 53 Left upper diagonal for Player 2
        
        
        // Tile 53 right upper diagonal for Player 2
        if(tile32.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.white)){
            
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile39.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.white)){
            
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 53 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile53.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile53ActionPerformed

    private void tile54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile54ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile54.getBackground().equals(Color.yellow)){
            
            // Tile 54 left for Player 1
           if(tile49.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black)){
           
               tile50.setBackground(Color.white);
               tile50.setIcon(new ImageIcon(whitePiece));
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
            }
           else if(tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black)){
               
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black)){
               
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.black)){
               
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 54 left for Player 1
                        
            // Tile 54 chosen all possibilities for the right of it for Player 1.
            if(tile56.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black)){
                
                
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 54 chosen all posibilities to the right for Player 1.
            
            
            // Tile 54 above for Player 1
            if(tile6.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile14.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                                
            }
            else if(tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black)){
                
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 54 above for Player 1
                                             
                                       
        // Tile 54 Left upper diagonal for Player 1
            if(tile9.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                    && tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile18.getBackground().equals(Color.white)
                    && tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.black)){
                
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.black)){
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 54 Left upper diagonal for Player 1
        
        
        // Tile 54 right upper diagonal for Player 1
        if(tile40.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)){
            
            tile47.setBackground(Color.white);
            tile47.setIcon(new ImageIcon(whitePiece));
            tile54.setBackground(Color.white);
            tile54.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 54 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile54.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile54.getBackground().equals(Color.yellow)){
            
            // Tile 54 left for Player 2
           if(tile49.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white)){
           
               tile50.setBackground(Color.black);
               tile50.setIcon(new ImageIcon(blackPiece));
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
            }
           else if(tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white)){
               
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white)){
               
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.white)){
               
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 54 left for Player 2
                        
            // Tile 54 chosen all possibilities for the right of it for Player 2.
            if(tile56.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white)){
                
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 54 chosen all posibilities to the right for Player 2.
            
            
            // Tile 54 above for Player 2
            if(tile6.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile14.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                                
            }
            else if(tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white)){
                
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 54 above for Player 2
                                             
                                       
        // Tile 54 Left upper diagonal for Player 2
            if(tile9.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                    && tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile18.getBackground().equals(Color.black)
                    && tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.white)){
                
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.white)){
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 54 Left upper diagonal for Player 2
        
        
        // Tile 54 right upper diagonal for Player 2
        if(tile40.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)){
            
            tile47.setBackground(Color.black);
            tile47.setIcon(new ImageIcon(blackPiece));
            tile54.setBackground(Color.black);
            tile54.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 54 right upper diagonal for Player 2
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile54.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile54ActionPerformed

    private void tile55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile55ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile55.getBackground().equals(Color.yellow)){
            
            // Tile 55 left for Player 1
           if(tile49.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
           
               tile50.setBackground(Color.white);
               tile50.setIcon(new ImageIcon(whitePiece));
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
            }
           else if(tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
               
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
               
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
               
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)){
               
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 55 left for Player 1
                       
            
            // Tile 55 above for Player 1
            if(tile7.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)){
                
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 55 above for Player 1
                   
        
        // Tile 55 Left upper diagonal for Player 1
            if(tile1.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)){
                
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black)){
                
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 55 Left upper diagonal for Player 1
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile55.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile55.getBackground().equals(Color.yellow)){
            
            // Tile 55 left for Player 2
           if(tile49.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
           
               tile50.setBackground(Color.black);
               tile50.setIcon(new ImageIcon(blackPiece));
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
            }
           else if(tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
               
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
               
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
               
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)){
               
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 55 left for Player 2
                       
            
            // Tile 55 above for Player 2
            if(tile7.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white) 
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile15.getBackground().equals(Color.black) 
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)){
                
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 55 above for Player 2
                   
        
        // Tile 55 Left upper diagonal for Player 2
            if(tile1.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)){
                
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white)){
                
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 55 Left upper diagonal for Player 2
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile55.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile55ActionPerformed

    private void tile56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile56ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile56.getBackground().equals(Color.yellow)){
            
            // Tile 56 left for Player 1
           if(tile49.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)
                   && tile55.getBackground().equals(Color.black)){
           
               tile50.setBackground(Color.white);
               tile50.setIcon(new ImageIcon(whitePiece));
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
               tile56.setBackground(Color.white);
               tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 6;
               p2TilesControlled -= 6;
               
            }
           else if(tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)
                   && tile55.getBackground().equals(Color.black)){
               
               tile51.setBackground(Color.white);
               tile51.setIcon(new ImageIcon(whitePiece));
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
               tile56.setBackground(Color.white);
               tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)
                   && tile55.getBackground().equals(Color.black)){
               
               tile52.setBackground(Color.white);
               tile52.setIcon(new ImageIcon(whitePiece));
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
               tile56.setBackground(Color.white);
               tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)
                   && tile55.getBackground().equals(Color.black)){
               
               tile53.setBackground(Color.white);
               tile53.setIcon(new ImageIcon(whitePiece));
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
               tile56.setBackground(Color.white);
               tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)
                   && tile55.getBackground().equals(Color.black)){
               
               tile54.setBackground(Color.white);
               tile54.setIcon(new ImageIcon(whitePiece));
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
               tile56.setBackground(Color.white);
               tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile54.getBackground().equals(Color.white)
                   && tile55.getBackground().equals(Color.black)){
               
               tile55.setBackground(Color.white);
               tile55.setIcon(new ImageIcon(whitePiece));
               tile56.setBackground(Color.white);
               tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 56 left for Player 1
                       
            
            // Tile 56 above for Player 1
            if(tile8.getBackground().equals(Color.white) && tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)){
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)){
                
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.black)){
                
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 56 above for Player 1
                   
        
        // Tile 56 Left upper diagonal for Player 1
            if(tile2.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile38.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)){
                
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 56 Left upper diagonal for Player 1
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile56.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile56.getBackground().equals(Color.yellow)){
            
            // Tile 56 left for Player 2
           if(tile49.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)
                   && tile55.getBackground().equals(Color.white)){
           
               tile50.setBackground(Color.black);
               tile50.setIcon(new ImageIcon(blackPiece));
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
               tile56.setBackground(Color.black);
               tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 6;
               p2TilesControlled += 6;
               
            }
           else if(tile50.getBackground().equals(Color.black)
                   && tile51.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)
                   && tile55.getBackground().equals(Color.white)){
               
               tile51.setBackground(Color.black);
               tile51.setIcon(new ImageIcon(blackPiece));
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
               tile56.setBackground(Color.black);
               tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile51.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)
                   && tile55.getBackground().equals(Color.white)){
               
               tile52.setBackground(Color.black);
               tile52.setIcon(new ImageIcon(blackPiece));
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
               tile56.setBackground(Color.black);
               tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile52.getBackground().equals(Color.black)
                   && tile53.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)
                   && tile55.getBackground().equals(Color.white)){
               
               tile53.setBackground(Color.black);
               tile53.setIcon(new ImageIcon(blackPiece));
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
               tile56.setBackground(Color.black);
               tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile53.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)
                   && tile55.getBackground().equals(Color.white)){
               
               tile54.setBackground(Color.black);
               tile54.setIcon(new ImageIcon(blackPiece));
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
               tile56.setBackground(Color.black);
               tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile54.getBackground().equals(Color.black)
                   && tile55.getBackground().equals(Color.white)){
               
               tile55.setBackground(Color.black);
               tile55.setIcon(new ImageIcon(blackPiece));
               tile56.setBackground(Color.black);
               tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 56 left for Player 2
                       
            
            // Tile 56 above for Player 2
            if(tile8.getBackground().equals(Color.black) && tile16.getBackground().equals(Color.white) 
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile16.getBackground().equals(Color.black) 
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)){
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)){
                
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.white)){
                
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 56 above for Player 2
                   
        
        // Tile 56 Left upper diagonal for Player 2
            if(tile2.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile29.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile38.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)){
                
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 56 Left upper diagonal for Player 2
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile56.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile56ActionPerformed

    private void tile57ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile57ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile57.getBackground().equals(Color.yellow)){
            
            // Tile 57 chosen all possibilities for the right of it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.black)){
                
                
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.black)){
                
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.black)){
                
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.black)){
                
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.black)){
                
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile59.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)){
                
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 57 chosen all posibilities to the right for Player 1.
            
            
            // Tile 57 above for Player 1
            if(tile1.getBackground().equals(Color.white) && tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)
                    && tile49.getBackground().equals(Color.black)){
                
                tile9.setBackground(Color.white);
                tile9.setIcon(new ImageIcon(whitePiece));
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)
                    && tile49.getBackground().equals(Color.black)){
                
                tile17.setBackground(Color.white);
                tile17.setIcon(new ImageIcon(whitePiece));
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)
                    && tile49.getBackground().equals(Color.black)){
                
                tile25.setBackground(Color.white);
                tile25.setIcon(new ImageIcon(whitePiece));
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.black)
                    && tile49.getBackground().equals(Color.black)){
                
                tile33.setBackground(Color.white);
                tile33.setIcon(new ImageIcon(whitePiece));
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.black)
                    && tile49.getBackground().equals(Color.black)){
                
                tile41.setBackground(Color.white);
                tile41.setIcon(new ImageIcon(whitePiece));
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile41.getBackground().equals(Color.white)
                    && tile49.getBackground().equals(Color.black)){
                
                tile49.setBackground(Color.white);
                tile49.setIcon(new ImageIcon(whitePiece));
                tile57.setBackground(Color.white);
                tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 57 above for Player 1
               
        
        // Tile 57 upper right diagonal for Player 1
        if(tile8.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)
                && tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                && tile50.getBackground().equals(Color.black)){
            
            tile15.setBackground(Color.white);
            tile15.setIcon(new ImageIcon(whitePiece));
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile57.setBackground(Color.white);
            tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 6;
            p2TilesControlled -= 6;
            
        }
        else if(tile15.getBackground().equals(Color.white)
                && tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                && tile50.getBackground().equals(Color.black)){
            
            tile22.setBackground(Color.white);
            tile22.setIcon(new ImageIcon(whitePiece));
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile57.setBackground(Color.white);
            tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                && tile50.getBackground().equals(Color.black)){
            
            tile29.setBackground(Color.white);
            tile29.setIcon(new ImageIcon(whitePiece));
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile57.setBackground(Color.white);
            tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                && tile50.getBackground().equals(Color.black)){
            
            tile36.setBackground(Color.white);
            tile36.setIcon(new ImageIcon(whitePiece));
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile57.setBackground(Color.white);
            tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
                        
        }
        else if(tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.black)
                && tile50.getBackground().equals(Color.black)){
            
            tile43.setBackground(Color.white);
            tile43.setIcon(new ImageIcon(whitePiece));
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile57.setBackground(Color.white);
            tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile43.getBackground().equals(Color.white)
                && tile50.getBackground().equals(Color.black)){
            
            tile50.setBackground(Color.white);
            tile50.setIcon(new ImageIcon(whitePiece));
            tile57.setBackground(Color.white);
            tile57.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 57 upper right diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile57.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile57.getBackground().equals(Color.yellow)){
            
            // Tile 57 chosen all possibilities for the right of it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.white)){
                
                
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.white)){
                
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.white)){
                
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.white)){
                
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.white)){
                
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile59.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)){
                
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 57 chosen all posibilities to the right for Player 2.
            
            
            // Tile 57 above for Player 2
            if(tile1.getBackground().equals(Color.black) && tile9.getBackground().equals(Color.white)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)
                    && tile49.getBackground().equals(Color.white)){
                
                tile9.setBackground(Color.black);
                tile9.setIcon(new ImageIcon(blackPiece));
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile9.getBackground().equals(Color.black)
                    && tile17.getBackground().equals(Color.white) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)
                    && tile49.getBackground().equals(Color.white)){
                
                tile17.setBackground(Color.black);
                tile17.setIcon(new ImageIcon(blackPiece));
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile17.getBackground().equals(Color.black) && tile25.getBackground().equals(Color.white)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)
                    && tile49.getBackground().equals(Color.white)){
                
                tile25.setBackground(Color.black);
                tile25.setIcon(new ImageIcon(blackPiece));
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile25.getBackground().equals(Color.black)
                    && tile33.getBackground().equals(Color.white) && tile41.getBackground().equals(Color.white)
                    && tile49.getBackground().equals(Color.white)){
                
                tile33.setBackground(Color.black);
                tile33.setIcon(new ImageIcon(blackPiece));
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile33.getBackground().equals(Color.black) && tile41.getBackground().equals(Color.white)
                    && tile49.getBackground().equals(Color.white)){
                
                tile41.setBackground(Color.black);
                tile41.setIcon(new ImageIcon(blackPiece));
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile41.getBackground().equals(Color.black)
                    && tile49.getBackground().equals(Color.white)){
                
                tile49.setBackground(Color.black);
                tile49.setIcon(new ImageIcon(blackPiece));
                tile57.setBackground(Color.black);
                tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 57 above for Player 2
               
        
        // Tile 57 upper right diagonal for Player 2
        if(tile8.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)
                && tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                && tile50.getBackground().equals(Color.white)){
            
            tile15.setBackground(Color.black);
            tile15.setIcon(new ImageIcon(blackPiece));
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile57.setBackground(Color.black);
            tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 6;
            p2TilesControlled += 6;
            
        }
        else if(tile15.getBackground().equals(Color.black)
                && tile22.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                && tile50.getBackground().equals(Color.white)){
            
            tile22.setBackground(Color.black);
            tile22.setIcon(new ImageIcon(blackPiece));
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile57.setBackground(Color.black);
            tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile22.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                && tile50.getBackground().equals(Color.white)){
            
            tile29.setBackground(Color.black);
            tile29.setIcon(new ImageIcon(blackPiece));
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile57.setBackground(Color.black);
            tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile29.getBackground().equals(Color.black)
                && tile36.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                && tile50.getBackground().equals(Color.white)){
            
            tile36.setBackground(Color.black);
            tile36.setIcon(new ImageIcon(blackPiece));
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile57.setBackground(Color.black);
            tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
                        
        }
        else if(tile36.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.white)
                && tile50.getBackground().equals(Color.white)){
            
            tile43.setBackground(Color.black);
            tile43.setIcon(new ImageIcon(blackPiece));
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile57.setBackground(Color.black);
            tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile43.getBackground().equals(Color.black)
                && tile50.getBackground().equals(Color.white)){
            
            tile50.setBackground(Color.black);
            tile50.setIcon(new ImageIcon(blackPiece));
            tile57.setBackground(Color.black);
            tile57.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 57 upper right diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile57.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile57ActionPerformed

    private void tile58ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile58ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile58.getBackground().equals(Color.yellow)){
            
            // Tile 58 chosen all possibilities for the right of it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black)){
                
                
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black)){
                
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black)){
                
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.black)){
                
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.black)){
                
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 58 chosen all posibilities to the right for Player 1.
            
            
            // Tile 58 above for Player 1
            if(tile2.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)
                    && tile50.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)
                    && tile50.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)
                    && tile50.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.black)
                    && tile50.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                    && tile50.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile42.getBackground().equals(Color.white)
                    && tile50.getBackground().equals(Color.black)){
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile58.setBackground(Color.white);
                tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 58 above for Player 1
               
        
        // Tile 58 upper right diagonal for Player 1
        if(tile16.getBackground().equals(Color.white) && tile23.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.black)){
            
            tile23.setBackground(Color.white);
            tile23.setIcon(new ImageIcon(whitePiece));
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
            tile58.setBackground(Color.white);
            tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 5;
            p2TilesControlled -= 5;
            
        }
        else if(tile23.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.black)){
            
            tile30.setBackground(Color.white);
            tile30.setIcon(new ImageIcon(whitePiece));
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
            tile58.setBackground(Color.white);
            tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.black)){
            
            tile37.setBackground(Color.white);
            tile37.setIcon(new ImageIcon(whitePiece));
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
            tile58.setBackground(Color.white);
            tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.black)){
            
            tile44.setBackground(Color.white);
            tile44.setIcon(new ImageIcon(whitePiece));
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
            tile58.setBackground(Color.white);
            tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
                        
        }
        else if(tile44.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.black)){
            
            tile51.setBackground(Color.white);
            tile51.setIcon(new ImageIcon(whitePiece));
            tile58.setBackground(Color.white);
            tile58.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 58 upper right diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile58.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile58.getBackground().equals(Color.yellow)){
            
            // Tile 58 chosen all possibilities for the right of it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white)){
                
                
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white)){
                
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white)){
                
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile61.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.white)
                    && tile59.getBackground().equals(Color.white)){
                
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile60.getBackground().equals(Color.black)
                    && tile59.getBackground().equals(Color.white)){
                
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 58 chosen all posibilities to the right for Player 2.
            
            
            // Tile 58 above for Player 2
            if(tile2.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)
                    && tile50.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile18.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)
                    && tile50.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
                
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile18.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)
                    && tile50.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile26.getBackground().equals(Color.black)
                    && tile34.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.white)
                    && tile50.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile34.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                    && tile50.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile42.getBackground().equals(Color.black)
                    && tile50.getBackground().equals(Color.white)){
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile58.setBackground(Color.black);
                tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 58 above for Player 2
               
        
        // Tile 58 upper right diagonal for Player 2
        if(tile16.getBackground().equals(Color.black) && tile23.getBackground().equals(Color.white)
                && tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.white)){
            
            tile23.setBackground(Color.black);
            tile23.setIcon(new ImageIcon(blackPiece));
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
            tile58.setBackground(Color.black);
            tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 5;
            p2TilesControlled += 5;
            
        }
        else if(tile23.getBackground().equals(Color.black)
                && tile30.getBackground().equals(Color.white) && tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.white)){
            
            tile30.setBackground(Color.black);
            tile30.setIcon(new ImageIcon(blackPiece));
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
            tile58.setBackground(Color.black);
            tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile30.getBackground().equals(Color.black) && tile37.getBackground().equals(Color.white)
                && tile44.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.white)){
            
            tile37.setBackground(Color.black);
            tile37.setIcon(new ImageIcon(blackPiece));
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
            tile58.setBackground(Color.black);
            tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile37.getBackground().equals(Color.black)
                && tile44.getBackground().equals(Color.white) && tile51.getBackground().equals(Color.white)){
            
            tile44.setBackground(Color.black);
            tile44.setIcon(new ImageIcon(blackPiece));
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
            tile58.setBackground(Color.black);
            tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
                        
        }
        else if(tile44.getBackground().equals(Color.black) && tile51.getBackground().equals(Color.white)){
            
            tile51.setBackground(Color.black);
            tile51.setIcon(new ImageIcon(blackPiece));
            tile58.setBackground(Color.black);
            tile58.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 58 upper right diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile58.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile58ActionPerformed

    private void tile59ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile59ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile59.getBackground().equals(Color.yellow)){
            
            // Tile 59 left for Player 1
           if(tile57.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)){
           
               tile58.setBackground(Color.white);
               tile58.setIcon(new ImageIcon(whitePiece));
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
       }
           // End Tile 59 left for Player 1
                        
            // Tile 59 chosen all possibilities for the right of it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black) 
                    && tile60.getBackground().equals(Color.black)){
                
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black) 
                    && tile60.getBackground().equals(Color.black)){
                
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.black) 
                    && tile60.getBackground().equals(Color.black)){
                
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile61.getBackground().equals(Color.white) 
                    && tile60.getBackground().equals(Color.black)){
                
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 59 chosen all posibilities to the right for Player 1.
            
            
            // Tile 51 above for Player 1
            if(tile3.getBackground().equals(Color.white) && tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile11.setBackground(Color.white);
                tile11.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                                
            }
            else if(tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile43.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.black)){
                
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 59 above for Player 1
            
                
        // Tile 51 Left upper diagonal for Player 1
            if(tile41.getBackground().equals(Color.white) && tile50.getBackground().equals(Color.black)){
                
                tile50.setBackground(Color.white);
                tile50.setIcon(new ImageIcon(whitePiece));
                tile59.setBackground(Color.white);
                tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 59 Left upper diagonal for Player 1
        
        
        // Tile 59 right upper diagonal for Player 1
        if(tile24.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)
                && tile38.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)
                && tile52.getBackground().equals(Color.black)){
            
            tile31.setBackground(Color.white);
            tile31.setIcon(new ImageIcon(whitePiece));
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
            tile59.setBackground(Color.white);
            tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 4;
            p2TilesControlled -= 4;
            
        }
        else if(tile31.getBackground().equals(Color.white)
                && tile38.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)
                && tile52.getBackground().equals(Color.black)){
            
            tile38.setBackground(Color.white);
            tile38.setIcon(new ImageIcon(whitePiece));
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
            tile59.setBackground(Color.white);
            tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile38.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black)
                && tile52.getBackground().equals(Color.black)){
            
            tile45.setBackground(Color.white);
            tile45.setIcon(new ImageIcon(whitePiece));
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
            tile59.setBackground(Color.white);
            tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile45.getBackground().equals(Color.white)
                && tile52.getBackground().equals(Color.black)){
            
            tile52.setBackground(Color.white);
            tile52.setIcon(new ImageIcon(whitePiece));
            tile59.setBackground(Color.white);
            tile59.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 59 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile59.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile59.getBackground().equals(Color.yellow)){
            
            // Tile 59 left for Player 2
           if(tile57.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)){
           
               tile58.setBackground(Color.black);
               tile58.setIcon(new ImageIcon(blackPiece));
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
       }
           // End Tile 59 left for Player 2
                        
            // Tile 59 chosen all possibilities for the right of it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white) 
                    && tile60.getBackground().equals(Color.white)){
                
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white) 
                    && tile60.getBackground().equals(Color.white)){
                
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.white) 
                    && tile60.getBackground().equals(Color.white)){
                
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile61.getBackground().equals(Color.black) 
                    && tile60.getBackground().equals(Color.white)){
                
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 59 chosen all posibilities to the right for Player 2.
            
            
            // Tile 51 above for Player 2
            if(tile3.getBackground().equals(Color.black) && tile11.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile11.setBackground(Color.black);
                tile11.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile11.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile27.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                                
            }
            else if(tile27.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.white) && tile43.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile35.getBackground().equals(Color.black) && tile43.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile43.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.white)){
                
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 59 above for Player 2
            
                
        // Tile 51 Left upper diagonal for Player 2
            if(tile41.getBackground().equals(Color.black) && tile50.getBackground().equals(Color.white)){
                
                tile50.setBackground(Color.black);
                tile50.setIcon(new ImageIcon(blackPiece));
                tile59.setBackground(Color.black);
                tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 59 Left upper diagonal for Player 2
        
        
        // Tile 59 right upper diagonal for Player 2
        if(tile24.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)
                && tile38.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)
                && tile52.getBackground().equals(Color.white)){
            
            tile31.setBackground(Color.black);
            tile31.setIcon(new ImageIcon(blackPiece));
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
            tile59.setBackground(Color.black);
            tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 4;
            p2TilesControlled += 4;
            
        }
        else if(tile31.getBackground().equals(Color.black)
                && tile38.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)
                && tile52.getBackground().equals(Color.white)){
            
            tile38.setBackground(Color.black);
            tile38.setIcon(new ImageIcon(blackPiece));
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
            tile59.setBackground(Color.black);
            tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile38.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white)
                && tile52.getBackground().equals(Color.white)){
            
            tile45.setBackground(Color.black);
            tile45.setIcon(new ImageIcon(blackPiece));
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
            tile59.setBackground(Color.black);
            tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile45.getBackground().equals(Color.black)
                && tile52.getBackground().equals(Color.white)){
            
            tile52.setBackground(Color.black);
            tile52.setIcon(new ImageIcon(blackPiece));
            tile59.setBackground(Color.black);
            tile59.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 59 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile59.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile59ActionPerformed

    private void tile60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile60ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile60.getBackground().equals(Color.yellow)){
            
            // Tile 60 left for Player 1
           if(tile57.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.black)){
           
               tile58.setBackground(Color.white);
               tile58.setIcon(new ImageIcon(whitePiece));
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.black)){
               
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 60 left for Player 1
                        
            // Tile 60 chosen all possibilities for the right of it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black)){
                
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.black)){
                
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.black)){
                
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 60 chosen all posibilities to the right for Player 1.
            
            
            // Tile 60 above for Player 1
            if(tile4.getBackground().equals(Color.white) && tile12.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                    && tile52.getBackground().equals(Color.black)){
                
                tile12.setBackground(Color.white);
                tile12.setIcon(new ImageIcon(whitePiece));
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile12.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                    && tile52.getBackground().equals(Color.black)){
                
                tile20.setBackground(Color.white);
                tile20.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                    && tile52.getBackground().equals(Color.black)){
                
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                                
            }
            else if(tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                    && tile52.getBackground().equals(Color.black)){
                
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)
                    && tile52.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile44.getBackground().equals(Color.white)
                    && tile52.getBackground().equals(Color.black)){
                
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 60 above for Player 1
            
                
        // Tile 60 Left upper diagonal for Player 1
            if(tile33.getBackground().equals(Color.white) && tile42.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.black)){
                
                tile42.setBackground(Color.white);
                tile42.setIcon(new ImageIcon(whitePiece));
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile42.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.black)){
                
                tile51.setBackground(Color.white);
                tile51.setIcon(new ImageIcon(whitePiece));
                tile60.setBackground(Color.white);
                tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 60 Left upper diagonal for Player 1
        
        
        // Tile 60 right upper diagonal for Player 1
        if(tile32.getBackground().equals(Color.white) && tile39.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black)){
            
            tile39.setBackground(Color.white);
            tile39.setIcon(new ImageIcon(whitePiece));
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
            tile60.setBackground(Color.white);
            tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 3;
            p2TilesControlled -= 3;
            
        }
        else if(tile39.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.black)){
            
            tile46.setBackground(Color.white);
            tile46.setIcon(new ImageIcon(whitePiece));
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
            tile60.setBackground(Color.white);
            tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile46.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.black)){
            
            tile53.setBackground(Color.white);
            tile53.setIcon(new ImageIcon(whitePiece));
            tile60.setBackground(Color.white);
            tile60.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 60 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile60.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally. 
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile60.getBackground().equals(Color.yellow)){
            
            // Tile 60 left for Player 2
           if(tile57.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.white)){
           
               tile58.setBackground(Color.black);
               tile58.setIcon(new ImageIcon(blackPiece));
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.white)){
               
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 60 left for Player 2
                        
            // Tile 60 chosen all possibilities for the right of it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white)){
                
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.white) && tile61.getBackground().equals(Color.white)){
                
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile62.getBackground().equals(Color.black) && tile61.getBackground().equals(Color.white)){
                
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 60 chosen all posibilities to the right for Player 2.
            
            
            // Tile 60 above for Player 2
            if(tile4.getBackground().equals(Color.black) && tile12.getBackground().equals(Color.white)
                    && tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                    && tile52.getBackground().equals(Color.white)){
                
                tile12.setBackground(Color.black);
                tile12.setIcon(new ImageIcon(blackPiece));
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile12.getBackground().equals(Color.black)
                    && tile20.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                    && tile52.getBackground().equals(Color.white)){
                
                tile20.setBackground(Color.black);
                tile20.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile20.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                    && tile52.getBackground().equals(Color.white)){
                
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                                
            }
            else if(tile28.getBackground().equals(Color.black)
                    && tile36.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                    && tile52.getBackground().equals(Color.white)){
                
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile36.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)
                    && tile52.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile44.getBackground().equals(Color.black)
                    && tile52.getBackground().equals(Color.white)){
                
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 60 above for Player 2
            
                
        // Tile 60 Left upper diagonal for Player 2
            if(tile33.getBackground().equals(Color.black) && tile42.getBackground().equals(Color.white)
                    && tile51.getBackground().equals(Color.white)){
                
                tile42.setBackground(Color.black);
                tile42.setIcon(new ImageIcon(blackPiece));
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile42.getBackground().equals(Color.black)
                    && tile51.getBackground().equals(Color.white)){
                
                tile51.setBackground(Color.black);
                tile51.setIcon(new ImageIcon(blackPiece));
                tile60.setBackground(Color.black);
                tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 60 Left upper diagonal for Player 2
        
        
        // Tile 60 right upper diagonal for Player 2
        if(tile32.getBackground().equals(Color.black) && tile39.getBackground().equals(Color.white)
                && tile46.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white)){
            
            tile39.setBackground(Color.black);
            tile39.setIcon(new ImageIcon(blackPiece));
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
            tile60.setBackground(Color.black);
            tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 3;
            p2TilesControlled += 3;
            
        }
        else if(tile39.getBackground().equals(Color.black)
                && tile46.getBackground().equals(Color.white) && tile53.getBackground().equals(Color.white)){
            
            tile46.setBackground(Color.black);
            tile46.setIcon(new ImageIcon(blackPiece));
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
            tile60.setBackground(Color.black);
            tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile46.getBackground().equals(Color.black) && tile53.getBackground().equals(Color.white)){
            
            tile53.setBackground(Color.black);
            tile53.setIcon(new ImageIcon(blackPiece));
            tile60.setBackground(Color.black);
            tile60.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 60 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile60.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.        
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile60ActionPerformed

    private void tile61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile61ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile61.getBackground().equals(Color.yellow)){
            
            // Tile 61 left for Player 1
           if(tile57.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)){
           
               tile58.setBackground(Color.white);
               tile58.setIcon(new ImageIcon(whitePiece));
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)){
               
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.black)){
               
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 60 left for Player 1
                        
            // Tile 60 chosen all possibilities for the right of it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.black)){
                
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.black)){
                
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 61 chosen all posibilities to the right for Player 1.
            
            
            // Tile 61 above for Player 1
            if(tile5.getBackground().equals(Color.white) && tile13.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile13.setBackground(Color.white);
                tile13.setIcon(new ImageIcon(whitePiece));
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile13.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile21.setBackground(Color.white);
                tile21.setIcon(new ImageIcon(whitePiece));
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile29.setBackground(Color.white);
                tile29.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                                
            }
            else if(tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile45.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.black)){
                
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 61 above for Player 1
            
                
        // Tile 61 Left upper diagonal for Player 1
            if(tile25.getBackground().equals(Color.white) && tile34.getBackground().equals(Color.black)
                    && tile43.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)){
                
                tile34.setBackground(Color.white);
                tile34.setIcon(new ImageIcon(whitePiece));
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile34.getBackground().equals(Color.white)
                    && tile43.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.black)){
                
                tile43.setBackground(Color.white);
                tile43.setIcon(new ImageIcon(whitePiece));
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile43.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.black)){
                
                tile52.setBackground(Color.white);
                tile52.setIcon(new ImageIcon(whitePiece));
                tile61.setBackground(Color.white);
                tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 61 Left upper diagonal for Player 1
        
        
        // Tile 61 right upper diagonal for Player 1
        if(tile40.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)
                && tile54.getBackground().equals(Color.black)){
            
            tile47.setBackground(Color.white);
            tile47.setIcon(new ImageIcon(whitePiece));
            tile54.setBackground(Color.white);
            tile54.setIcon(new ImageIcon(whitePiece));
            tile61.setBackground(Color.white);
            tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled += 2;
            p2TilesControlled -= 2;
            
        }
        else if(tile47.getBackground().equals(Color.white)
                && tile54.getBackground().equals(Color.black)){
            
            tile54.setBackground(Color.white);
            tile54.setIcon(new ImageIcon(whitePiece));
            tile61.setBackground(Color.white);
            tile61.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 61 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile61.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile61.getBackground().equals(Color.yellow)){
            
            // Tile 61 left for Player 2
           if(tile57.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)){
           
               tile58.setBackground(Color.black);
               tile58.setIcon(new ImageIcon(blackPiece));
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)){
               
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.white)){
               
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 61 left for Player 2
                        
            // Tile 61 chosen all possibilities for the right of it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile63.getBackground().equals(Color.white) 
                    && tile62.getBackground().equals(Color.white)){
                
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile63.getBackground().equals(Color.black) 
                    && tile62.getBackground().equals(Color.white)){
                
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 61 chosen all posibilities to the right for Player 2.
            
            
            // Tile 61 above for Player 2
            if(tile5.getBackground().equals(Color.black) && tile13.getBackground().equals(Color.white)
                    && tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile13.setBackground(Color.black);
                tile13.setIcon(new ImageIcon(blackPiece));
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile13.getBackground().equals(Color.black)
                    && tile21.getBackground().equals(Color.white) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile21.setBackground(Color.black);
                tile21.setIcon(new ImageIcon(blackPiece));
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile21.getBackground().equals(Color.black) && tile29.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile29.setBackground(Color.black);
                tile29.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                                
            }
            else if(tile29.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.white) && tile45.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile45.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile45.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.white)){
                
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 61 above for Player 2
            
                
        // Tile 61 Left upper diagonal for Player 2
            if(tile25.getBackground().equals(Color.black) && tile34.getBackground().equals(Color.white)
                    && tile43.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)){
                
                tile34.setBackground(Color.black);
                tile34.setIcon(new ImageIcon(blackPiece));
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile34.getBackground().equals(Color.black)
                    && tile43.getBackground().equals(Color.white) && tile52.getBackground().equals(Color.white)){
                
                tile43.setBackground(Color.black);
                tile43.setIcon(new ImageIcon(blackPiece));
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile43.getBackground().equals(Color.black) && tile52.getBackground().equals(Color.white)){
                
                tile52.setBackground(Color.black);
                tile52.setIcon(new ImageIcon(blackPiece));
                tile61.setBackground(Color.black);
                tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 61 Left upper diagonal for Player 2
        
        
        // Tile 61 right upper diagonal for Player 2
        if(tile40.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)
                && tile54.getBackground().equals(Color.white)){
            
            tile47.setBackground(Color.black);
            tile47.setIcon(new ImageIcon(blackPiece));
            tile54.setBackground(Color.black);
            tile54.setIcon(new ImageIcon(blackPiece));
            tile61.setBackground(Color.black);
            tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
            

            p1TilesControlled -= 2;
            p2TilesControlled += 2;
            
        }
        else if(tile47.getBackground().equals(Color.black)
                && tile54.getBackground().equals(Color.white)){
            
            tile54.setBackground(Color.black);
            tile54.setIcon(new ImageIcon(blackPiece));
            tile61.setBackground(Color.black);
            tile61.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 61 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile61.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile61ActionPerformed

    private void tile62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile62ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile62.getBackground().equals(Color.yellow)){
            
            // Tile 62 left for Player 1
           if(tile57.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black)){
           
               tile58.setBackground(Color.white);
               tile58.setIcon(new ImageIcon(whitePiece));
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black)){
               
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black)){
               
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.black)){
               
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 62 left for Player 1
                        
            // Tile 62 chosen all possibilities for the right of it for Player 1.
            if(tile64.getBackground().equals(Color.white) && tile63.getBackground().equals(Color.black)){
                
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End tile 62 chosen all posibilities to the right for Player 1.
            
            
            // Tile 61 above for Player 1
            if(tile6.getBackground().equals(Color.white) && tile14.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile54.getBackground().equals(Color.black)){
                
                tile14.setBackground(Color.white);
                tile14.setIcon(new ImageIcon(whitePiece));
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile14.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile54.getBackground().equals(Color.black)){
                
                tile22.setBackground(Color.white);
                tile22.setIcon(new ImageIcon(whitePiece));
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile54.getBackground().equals(Color.black)){
                
                tile30.setBackground(Color.white);
                tile30.setIcon(new ImageIcon(whitePiece));
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                                
            }
            else if(tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile54.getBackground().equals(Color.black)){
                
                tile38.setBackground(Color.white);
                tile38.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black)
                    && tile54.getBackground().equals(Color.black)){
                
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile46.getBackground().equals(Color.white)
                    && tile54.getBackground().equals(Color.black)){
                
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 62 above for Player 1
            
                
        // Tile 62 Left upper diagonal for Player 1
            if(tile17.getBackground().equals(Color.white) && tile26.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile26.setBackground(Color.white);
                tile26.setIcon(new ImageIcon(whitePiece));
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile26.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile35.setBackground(Color.white);
                tile35.setIcon(new ImageIcon(whitePiece));
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile35.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.black)){
                
                tile44.setBackground(Color.white);
                tile44.setIcon(new ImageIcon(whitePiece));
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile44.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.black)){
                
                tile53.setBackground(Color.white);
                tile53.setIcon(new ImageIcon(whitePiece));
                tile62.setBackground(Color.white);
                tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 62 Left upper diagonal for Player 1
        
        
        // Tile 62 right upper diagonal for Player 1
        if(tile48.getBackground().equals(Color.white) && tile55.getBackground().equals(Color.black)){
            
            tile55.setBackground(Color.white);
            tile55.setIcon(new ImageIcon(whitePiece));
            tile62.setBackground(Color.white);
            tile62.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
            

            p1TilesControlled += 1;
            p2TilesControlled -= 1;
            
        }
        // End Tile 62 right upper diagonal for Player 1
        
        // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile62.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.

        
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile62.getBackground().equals(Color.yellow)){
            
            // Tile 62 left for Player 2
           if(tile57.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white)){
           
               tile58.setBackground(Color.black);
               tile58.setIcon(new ImageIcon(blackPiece));
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white)){
               
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white)){
               
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.white)){
               
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 62 left for Player 2
                        
            // Tile 62 chosen all possibilities for the right of it for Player 2.
            if(tile64.getBackground().equals(Color.black) && tile63.getBackground().equals(Color.white)){
                
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End tile 62 chosen all posibilities to the right for Player 2.
            
            
            // Tile 61 above for Player 2
            if(tile6.getBackground().equals(Color.black) && tile14.getBackground().equals(Color.white)
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile54.getBackground().equals(Color.white)){
                
                tile14.setBackground(Color.black);
                tile14.setIcon(new ImageIcon(blackPiece));
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile14.getBackground().equals(Color.black)
                    && tile22.getBackground().equals(Color.white) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile54.getBackground().equals(Color.white)){
                
                tile22.setBackground(Color.black);
                tile22.setIcon(new ImageIcon(blackPiece));
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile22.getBackground().equals(Color.black) && tile30.getBackground().equals(Color.white)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile54.getBackground().equals(Color.white)){
                
                tile30.setBackground(Color.black);
                tile30.setIcon(new ImageIcon(blackPiece));
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                                
            }
            else if(tile30.getBackground().equals(Color.black)
                    && tile38.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile54.getBackground().equals(Color.white)){
                
                tile38.setBackground(Color.black);
                tile38.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile38.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white)
                    && tile54.getBackground().equals(Color.white)){
                
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile46.getBackground().equals(Color.black)
                    && tile54.getBackground().equals(Color.white)){
                
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 62 above for Player 2
            
                
        // Tile 62 Left upper diagonal for Player 2
            if(tile17.getBackground().equals(Color.black) && tile26.getBackground().equals(Color.white)
                    && tile35.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile26.setBackground(Color.black);
                tile26.setIcon(new ImageIcon(blackPiece));
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile26.getBackground().equals(Color.black)
                    && tile35.getBackground().equals(Color.white) && tile44.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile35.setBackground(Color.black);
                tile35.setIcon(new ImageIcon(blackPiece));
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile35.getBackground().equals(Color.black) && tile44.getBackground().equals(Color.white)
                    && tile53.getBackground().equals(Color.white)){
                
                tile44.setBackground(Color.black);
                tile44.setIcon(new ImageIcon(blackPiece));
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile44.getBackground().equals(Color.black)
                    && tile53.getBackground().equals(Color.white)){
                
                tile53.setBackground(Color.black);
                tile53.setIcon(new ImageIcon(blackPiece));
                tile62.setBackground(Color.black);
                tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 62 Left upper diagonal for Player 2
        
        
        // Tile 62 right upper diagonal for Player 2
        if(tile48.getBackground().equals(Color.black) && tile55.getBackground().equals(Color.white)){
            
            tile55.setBackground(Color.black);
            tile55.setIcon(new ImageIcon(blackPiece));
            tile62.setBackground(Color.black);
            tile62.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
            

            p1TilesControlled -= 1;
            p2TilesControlled += 1;
            
        }
        // End Tile 62 right upper diagonal for Player 2
        
        // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile62.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile62ActionPerformed

    private void tile63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile63ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile63.getBackground().equals(Color.yellow)){
            
            // Tile 63 left for Player 1
           if(tile57.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)){
           
               tile58.setBackground(Color.white);
               tile58.setIcon(new ImageIcon(whitePiece));
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)){
               
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)){
               
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)){
               
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.black)){
               
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 63 left for Player 1
                       
            
            // Tile 63 above for Player 1
            if(tile7.getBackground().equals(Color.white) && tile15.getBackground().equals(Color.black)
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile15.setBackground(Color.white);
                tile15.setIcon(new ImageIcon(whitePiece));
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile15.getBackground().equals(Color.white)
                    && tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile23.setBackground(Color.white);
                tile23.setIcon(new ImageIcon(whitePiece));
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile31.setBackground(Color.white);
                tile31.setIcon(new ImageIcon(whitePiece));
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                                
            }
            else if(tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile39.setBackground(Color.white);
                tile39.setIcon(new ImageIcon(whitePiece));
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile47.setBackground(Color.white);
                tile47.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile47.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.black)){
                
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 63 above for Player 1
            
                
        // Tile 63 Left upper diagonal for Player 1
            if(tile9.getBackground().equals(Color.white) && tile18.getBackground().equals(Color.black)
                    && tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
                
                tile18.setBackground(Color.white);
                tile18.setIcon(new ImageIcon(whitePiece));
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile18.getBackground().equals(Color.white)
                    && tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
                
                tile27.setBackground(Color.white);
                tile27.setIcon(new ImageIcon(whitePiece));
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
                
                tile36.setBackground(Color.white);
                tile36.setIcon(new ImageIcon(whitePiece));
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.black)){
                
                tile45.setBackground(Color.white);
                tile45.setIcon(new ImageIcon(whitePiece));
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile45.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.black)){
                
                tile54.setBackground(Color.white);
                tile54.setIcon(new ImageIcon(whitePiece));
                tile63.setBackground(Color.white);
                tile63.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 63 Left upper diagonal for Player 1
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile63.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.

            
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile63.getBackground().equals(Color.yellow)){
            
            // Tile 63 left for Player 2
           if(tile57.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)){
           
               tile58.setBackground(Color.black);
               tile58.setIcon(new ImageIcon(blackPiece));
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)){
               
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)){
               
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)){
               
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.white)){
               
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 63 left for Player 2
                       
            
            // Tile 63 above for Player 2
            if(tile7.getBackground().equals(Color.black) && tile15.getBackground().equals(Color.white)
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile15.setBackground(Color.black);
                tile15.setIcon(new ImageIcon(blackPiece));
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile15.getBackground().equals(Color.black)
                    && tile23.getBackground().equals(Color.white) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile23.setBackground(Color.black);
                tile23.setIcon(new ImageIcon(blackPiece));
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile23.getBackground().equals(Color.black) && tile31.getBackground().equals(Color.white)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile31.setBackground(Color.black);
                tile31.setIcon(new ImageIcon(blackPiece));
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                                
            }
            else if(tile31.getBackground().equals(Color.black)
                    && tile39.getBackground().equals(Color.white) && tile47.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile39.setBackground(Color.black);
                tile39.setIcon(new ImageIcon(blackPiece));
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile39.getBackground().equals(Color.black) && tile47.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile47.setBackground(Color.black);
                tile47.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile47.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.white)){
                
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 63 above for Player 2
            
                
        // Tile 63 Left upper diagonal for Player 2
            if(tile9.getBackground().equals(Color.black) && tile18.getBackground().equals(Color.white)
                    && tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
                
                tile18.setBackground(Color.black);
                tile18.setIcon(new ImageIcon(blackPiece));
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile18.getBackground().equals(Color.black)
                    && tile27.getBackground().equals(Color.white) && tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
                
                tile27.setBackground(Color.black);
                tile27.setIcon(new ImageIcon(blackPiece));
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile27.getBackground().equals(Color.black) && tile36.getBackground().equals(Color.white)
                    && tile45.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
                
                tile36.setBackground(Color.black);
                tile36.setIcon(new ImageIcon(blackPiece));
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile36.getBackground().equals(Color.black)
                    && tile45.getBackground().equals(Color.white) && tile54.getBackground().equals(Color.white)){
                
                tile45.setBackground(Color.black);
                tile45.setIcon(new ImageIcon(blackPiece));
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile45.getBackground().equals(Color.black) && tile54.getBackground().equals(Color.white)){
                
                tile54.setBackground(Color.black);
                tile54.setIcon(new ImageIcon(blackPiece));
                tile63.setBackground(Color.black);
                tile63.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 63 Left upper diagonal for Player 2
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile63.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.           
        }
        
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile63ActionPerformed

    private void tile64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile64ActionPerformed
        
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile64.getBackground().equals(Color.yellow)){
            
            // Tile 64 left for Player 1
           if(tile57.getBackground().equals(Color.white) && tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)
                   && tile63.getBackground().equals(Color.black)){
           
               tile58.setBackground(Color.white);
               tile58.setIcon(new ImageIcon(whitePiece));
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
               tile64.setBackground(Color.white);
               tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 6;
               p2TilesControlled -= 6;
               
           }
           else if(tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)
                   && tile63.getBackground().equals(Color.black)){
               
               tile59.setBackground(Color.white);
               tile59.setIcon(new ImageIcon(whitePiece));
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
               tile64.setBackground(Color.white);
               tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 5;
               p2TilesControlled -= 5;
               
           }
           else if(tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)
                   && tile63.getBackground().equals(Color.black)){
               
               tile60.setBackground(Color.white);
               tile60.setIcon(new ImageIcon(whitePiece));
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
               tile64.setBackground(Color.white);
               tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 4;
               p2TilesControlled -= 4;
               
           }
           else if(tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.black)
                   && tile63.getBackground().equals(Color.black)){
               
               tile61.setBackground(Color.white);
               tile61.setIcon(new ImageIcon(whitePiece));
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
               tile64.setBackground(Color.white);
               tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 3;
               p2TilesControlled -= 3;
               
           }
           else if(tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.black)
                   && tile63.getBackground().equals(Color.black)){
               
               tile62.setBackground(Color.white);
               tile62.setIcon(new ImageIcon(whitePiece));
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
               tile64.setBackground(Color.white);
               tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled += 2;
               p2TilesControlled -= 2;
               
           }
           else if(tile62.getBackground().equals(Color.white)
                   && tile63.getBackground().equals(Color.black)){
               
               tile63.setBackground(Color.white);
               tile63.setIcon(new ImageIcon(whitePiece));
               tile64.setBackground(Color.white);
               tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
               

               p1TilesControlled += 1;
               p2TilesControlled -= 1;
               
           }
           // End Tile 64 left for Player 1
                       
            
            // Tile 64 above for Player 1
            if(tile8.getBackground().equals(Color.white) && tile16.getBackground().equals(Color.black)
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)
                    && tile56.getBackground().equals(Color.black)){
                
                tile16.setBackground(Color.white);
                tile16.setIcon(new ImageIcon(whitePiece));
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile16.getBackground().equals(Color.white)
                    && tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)
                    && tile56.getBackground().equals(Color.black)){
                
                tile24.setBackground(Color.white);
                tile24.setIcon(new ImageIcon(whitePiece));
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)
                    && tile56.getBackground().equals(Color.black)){
                
                tile32.setBackground(Color.white);
                tile32.setIcon(new ImageIcon(whitePiece));
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                                
            }
            else if(tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.black)
                    && tile56.getBackground().equals(Color.black)){
                
                tile40.setBackground(Color.white);
                tile40.setIcon(new ImageIcon(whitePiece));
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.black)
                    && tile56.getBackground().equals(Color.black)){
                
                tile48.setBackground(Color.white);
                tile48.setIcon(new ImageIcon(whitePiece));
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile48.getBackground().equals(Color.white)
                    && tile56.getBackground().equals(Color.black)){
                
                tile56.setBackground(Color.white);
                tile56.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 64 above for Player 1
            
                
        // Tile 63 Left upper diagonal for Player 1
            if(tile1.getBackground().equals(Color.white) && tile10.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile10.setBackground(Color.white);
                tile10.setIcon(new ImageIcon(whitePiece));
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 6;
                p2TilesControlled -= 6;
                
            }
            else if(tile10.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile19.setBackground(Color.white);
                tile19.setIcon(new ImageIcon(whitePiece));
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 5;
                p2TilesControlled -= 5;
                
            }
            else if(tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile28.setBackground(Color.white);
                tile28.setIcon(new ImageIcon(whitePiece));
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 4;
                p2TilesControlled -= 4;
                
            }
            else if(tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile37.setBackground(Color.white);
                tile37.setIcon(new ImageIcon(whitePiece));
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 3;
                p2TilesControlled -= 3;
                
            }
            else if(tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.black)){
                
                tile46.setBackground(Color.white);
                tile46.setIcon(new ImageIcon(whitePiece));
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled += 2;
                p2TilesControlled -= 2;
                
            }
            else if(tile46.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.black)){
                
                tile55.setBackground(Color.white);
                tile55.setIcon(new ImageIcon(whitePiece));
                tile64.setBackground(Color.white);
                tile64.setIcon(new ImageIcon(whitePiece));
	        noises.putPieceDown();
                

                p1TilesControlled += 1;
                p2TilesControlled -= 1;
                
            }
            // End Tile 64 Left upper diagonal for Player 1
            
            // Tally score after turn.
        if(playerTurnLabel.getText().equals("It's Player 1's turn") && tile64.getBackground().equals(Color.white)){
            p1TilesControlled++;
            playerTurnLabel.setForeground(Color.black);
            playerTurnLabel.setText("It's Player 2's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            
        }
        
        
        if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile64.getBackground().equals(Color.yellow)){
            
            // Tile 64 left for Player 2
           if(tile57.getBackground().equals(Color.black) && tile58.getBackground().equals(Color.white)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)
                   && tile63.getBackground().equals(Color.white)){
           
               tile58.setBackground(Color.black);
               tile58.setIcon(new ImageIcon(blackPiece));
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
               tile64.setBackground(Color.black);
               tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 6;
               p2TilesControlled += 6;
               
           }
           else if(tile58.getBackground().equals(Color.black)
                   && tile59.getBackground().equals(Color.white) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)
                   && tile63.getBackground().equals(Color.white)){
               
               tile59.setBackground(Color.black);
               tile59.setIcon(new ImageIcon(blackPiece));
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
               tile64.setBackground(Color.black);
               tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 5;
               p2TilesControlled += 5;
               
           }
           else if(tile59.getBackground().equals(Color.black) && tile60.getBackground().equals(Color.white)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)
                   && tile63.getBackground().equals(Color.white)){
               
               tile60.setBackground(Color.black);
               tile60.setIcon(new ImageIcon(blackPiece));
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
               tile64.setBackground(Color.black);
               tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 4;
               p2TilesControlled += 4;
               
           }
           else if(tile60.getBackground().equals(Color.black)
                   && tile61.getBackground().equals(Color.white) && tile62.getBackground().equals(Color.white)
                   && tile63.getBackground().equals(Color.white)){
               
               tile61.setBackground(Color.black);
               tile61.setIcon(new ImageIcon(blackPiece));
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
               tile64.setBackground(Color.black);
               tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 3;
               p2TilesControlled += 3;
               
           }
           else if(tile61.getBackground().equals(Color.black) && tile62.getBackground().equals(Color.white)
                   && tile63.getBackground().equals(Color.white)){
               
               tile62.setBackground(Color.black);
               tile62.setIcon(new ImageIcon(blackPiece));
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
               tile64.setBackground(Color.black);
               tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
               

               p1TilesControlled -= 2;
               p2TilesControlled += 2;
               
           }
           else if(tile62.getBackground().equals(Color.black)
                   && tile63.getBackground().equals(Color.white)){
               
               tile63.setBackground(Color.black);
               tile63.setIcon(new ImageIcon(blackPiece));
               tile64.setBackground(Color.black);
               tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
               

               p1TilesControlled -= 1;
               p2TilesControlled += 1;
               
           }
           // End Tile 64 left for Player 2
                       
            
            // Tile 64 above for Player 2
            if(tile8.getBackground().equals(Color.black) && tile16.getBackground().equals(Color.white)
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)
                    && tile56.getBackground().equals(Color.white)){
                
                tile16.setBackground(Color.black);
                tile16.setIcon(new ImageIcon(blackPiece));
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile16.getBackground().equals(Color.black)
                    && tile24.getBackground().equals(Color.white) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)
                    && tile56.getBackground().equals(Color.white)){
                
                tile24.setBackground(Color.black);
                tile24.setIcon(new ImageIcon(blackPiece));
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile24.getBackground().equals(Color.black) && tile32.getBackground().equals(Color.white)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)
                    && tile56.getBackground().equals(Color.white)){
                
                tile32.setBackground(Color.black);
                tile32.setIcon(new ImageIcon(blackPiece));
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                                
            }
            else if(tile32.getBackground().equals(Color.black)
                    && tile40.getBackground().equals(Color.white) && tile48.getBackground().equals(Color.white)
                    && tile56.getBackground().equals(Color.white)){
                
                tile40.setBackground(Color.black);
                tile40.setIcon(new ImageIcon(blackPiece));
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile40.getBackground().equals(Color.black) && tile48.getBackground().equals(Color.white)
                    && tile56.getBackground().equals(Color.white)){
                
                tile48.setBackground(Color.black);
                tile48.setIcon(new ImageIcon(blackPiece));
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile48.getBackground().equals(Color.black)
                    && tile56.getBackground().equals(Color.white)){
                
                tile56.setBackground(Color.black);
                tile56.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 64 above for Player 2
            
                
        // Tile 64 Left upper diagonal for Player 2
            if(tile1.getBackground().equals(Color.black) && tile10.getBackground().equals(Color.white)
                    && tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile10.setBackground(Color.black);
                tile10.setIcon(new ImageIcon(blackPiece));
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 6;
                p2TilesControlled += 6;
                
            }
            else if(tile10.getBackground().equals(Color.black)
                    && tile19.getBackground().equals(Color.white) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile19.setBackground(Color.black);
                tile19.setIcon(new ImageIcon(blackPiece));
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 5;
                p2TilesControlled += 5;
                
            }
            else if(tile19.getBackground().equals(Color.black) && tile28.getBackground().equals(Color.white)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile28.setBackground(Color.black);
                tile28.setIcon(new ImageIcon(blackPiece));
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 4;
                p2TilesControlled += 4;
                
            }
            else if(tile28.getBackground().equals(Color.black)
                    && tile37.getBackground().equals(Color.white) && tile46.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile37.setBackground(Color.black);
                tile37.setIcon(new ImageIcon(blackPiece));
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 3;
                p2TilesControlled += 3;
                
            }
            else if(tile37.getBackground().equals(Color.black) && tile46.getBackground().equals(Color.white)
                    && tile55.getBackground().equals(Color.white)){
                
                tile46.setBackground(Color.black);
                tile46.setIcon(new ImageIcon(blackPiece));
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
	        noises.putPieceDown();
                

                p1TilesControlled -= 2;
                p2TilesControlled += 2;
                
            }
            else if(tile46.getBackground().equals(Color.black)
                    && tile55.getBackground().equals(Color.white)){
                
                tile55.setBackground(Color.black);
                tile55.setIcon(new ImageIcon(blackPiece));
                tile64.setBackground(Color.black);
                tile64.setIcon(new ImageIcon(blackPiece));
	        noises.putPieceDown();
                

                p1TilesControlled -= 1;
                p2TilesControlled += 1;
                
            }
            // End Tile 64 Left upper diagonal for Player 2
            
            // Tally score after turn.
            if(playerTurnLabel.getText().equals("It's Player 2's turn") && tile64.getBackground().equals(Color.black)){
            p2TilesControlled++;
            playerTurnLabel.setForeground(Color.white);
            playerTurnLabel.setText("It's Player 1's turn");
            p1TilesControlledLabel.setText("" + p1TilesControlled);
            p2TilesControlledLabel.setText("" + p2TilesControlled);
	        noises.putPieceDown();
        }
        // End of score tally.
            
        }
                                
        
        // Determining if game is over
        if((tile1.getBackground().equals(Color.white) || tile1.getBackground().equals(Color.black))
                && (tile2.getBackground().equals(Color.white) || tile2.getBackground().equals(Color.black))
                && (tile3.getBackground().equals(Color.white) || tile3.getBackground().equals(Color.black))
                && (tile4.getBackground().equals(Color.white) || tile4.getBackground().equals(Color.black))
                && (tile5.getBackground().equals(Color.white) || tile5.getBackground().equals(Color.black))
                && (tile6.getBackground().equals(Color.white) || tile6.getBackground().equals(Color.black))
                && (tile7.getBackground().equals(Color.white) || tile7.getBackground().equals(Color.black))
                && (tile8.getBackground().equals(Color.white) || tile8.getBackground().equals(Color.black))
                && (tile9.getBackground().equals(Color.white) || tile9.getBackground().equals(Color.black))
                && (tile10.getBackground().equals(Color.white) || tile10.getBackground().equals(Color.black))
                && (tile11.getBackground().equals(Color.white) || tile11.getBackground().equals(Color.black))
                && (tile12.getBackground().equals(Color.white) || tile12.getBackground().equals(Color.black))
                && (tile13.getBackground().equals(Color.white) || tile13.getBackground().equals(Color.black))
                && (tile14.getBackground().equals(Color.white) || tile14.getBackground().equals(Color.black))
                && (tile15.getBackground().equals(Color.white) || tile15.getBackground().equals(Color.black))
                && (tile16.getBackground().equals(Color.white) || tile16.getBackground().equals(Color.black))
                && (tile17.getBackground().equals(Color.white) || tile17.getBackground().equals(Color.black))
                && (tile18.getBackground().equals(Color.white) || tile18.getBackground().equals(Color.black))
                && (tile19.getBackground().equals(Color.white) || tile19.getBackground().equals(Color.black))
                && (tile20.getBackground().equals(Color.white) || tile20.getBackground().equals(Color.black))
                && (tile21.getBackground().equals(Color.white) || tile21.getBackground().equals(Color.black))
                && (tile22.getBackground().equals(Color.white) || tile22.getBackground().equals(Color.black))
                && (tile23.getBackground().equals(Color.white) || tile23.getBackground().equals(Color.black))
                && (tile24.getBackground().equals(Color.white) || tile24.getBackground().equals(Color.black))
                && (tile25.getBackground().equals(Color.white) || tile25.getBackground().equals(Color.black))
                && (tile26.getBackground().equals(Color.white) || tile26.getBackground().equals(Color.black))
                && (tile27.getBackground().equals(Color.white) || tile27.getBackground().equals(Color.black))
                && (tile28.getBackground().equals(Color.white) || tile28.getBackground().equals(Color.black))
                && (tile29.getBackground().equals(Color.white) || tile29.getBackground().equals(Color.black))
                && (tile30.getBackground().equals(Color.white) || tile30.getBackground().equals(Color.black))
                && (tile31.getBackground().equals(Color.white) || tile31.getBackground().equals(Color.black))
                && (tile32.getBackground().equals(Color.white) || tile32.getBackground().equals(Color.black))
                && (tile33.getBackground().equals(Color.white) || tile33.getBackground().equals(Color.black))
                && (tile34.getBackground().equals(Color.white) || tile34.getBackground().equals(Color.black))
                && (tile35.getBackground().equals(Color.white) || tile35.getBackground().equals(Color.black))
                && (tile36.getBackground().equals(Color.white) || tile36.getBackground().equals(Color.black))
                && (tile37.getBackground().equals(Color.white) || tile37.getBackground().equals(Color.black))
                && (tile38.getBackground().equals(Color.white) || tile38.getBackground().equals(Color.black))
                && (tile39.getBackground().equals(Color.white) || tile39.getBackground().equals(Color.black))
                && (tile40.getBackground().equals(Color.white) || tile40.getBackground().equals(Color.black))
                && (tile41.getBackground().equals(Color.white) || tile41.getBackground().equals(Color.black))
                && (tile42.getBackground().equals(Color.white) || tile42.getBackground().equals(Color.black))
                && (tile43.getBackground().equals(Color.white) || tile43.getBackground().equals(Color.black))
                && (tile44.getBackground().equals(Color.white) || tile44.getBackground().equals(Color.black))
                && (tile45.getBackground().equals(Color.white) || tile45.getBackground().equals(Color.black))
                && (tile46.getBackground().equals(Color.white) || tile46.getBackground().equals(Color.black))
                && (tile47.getBackground().equals(Color.white) || tile47.getBackground().equals(Color.black))
                && (tile48.getBackground().equals(Color.white) || tile48.getBackground().equals(Color.black))
                && (tile49.getBackground().equals(Color.white) || tile49.getBackground().equals(Color.black))
                && (tile50.getBackground().equals(Color.white) || tile50.getBackground().equals(Color.black))
                && (tile51.getBackground().equals(Color.white) || tile51.getBackground().equals(Color.black))
                && (tile52.getBackground().equals(Color.white) || tile52.getBackground().equals(Color.black))
                && (tile53.getBackground().equals(Color.white) || tile53.getBackground().equals(Color.black))
                && (tile54.getBackground().equals(Color.white) || tile54.getBackground().equals(Color.black))
                && (tile55.getBackground().equals(Color.white) || tile55.getBackground().equals(Color.black))
                && (tile56.getBackground().equals(Color.white) || tile56.getBackground().equals(Color.black))
                && (tile57.getBackground().equals(Color.white) || tile57.getBackground().equals(Color.black))
                && (tile58.getBackground().equals(Color.white) || tile58.getBackground().equals(Color.black))
                && (tile59.getBackground().equals(Color.white) || tile59.getBackground().equals(Color.black))
                && (tile60.getBackground().equals(Color.white) || tile60.getBackground().equals(Color.black))
                && (tile61.getBackground().equals(Color.white) || tile61.getBackground().equals(Color.black))
                && (tile62.getBackground().equals(Color.white) || tile62.getBackground().equals(Color.black))
                && (tile63.getBackground().equals(Color.white) || tile63.getBackground().equals(Color.black))
                && (tile64.getBackground().equals(Color.white) || tile64.getBackground().equals(Color.black))){
            
            restartButton.setVisible(true);
            
            if(p1TilesControlled > p2TilesControlled){
                
                playerTurnLabel.setText("Player 1 Wins!!!");
                p1GameWon += 1;
                p2GameLose += 1;
                p1WinLabel.setText("" + p1GameWon);
                p2LoseLabel.setText("" + p2GameLose);
                
                
            }
            else{
                
                playerTurnLabel.setText("Player 2 Wins!!!");
                p2GameWon += 1;
                p1GameLose += 1;
                p2WinLabel.setText("" + p2GameWon);
                p1LoseLabel.setText("" + p1GameLose);
                
            }
            
        }
        // End of game of over determination
        
    }//GEN-LAST:event_tile64ActionPerformed

    private void resetGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetGameButtonActionPerformed
        
        // Determine who won the game
        if(p1TilesControlled > p2TilesControlled){
            p1GameWon += 1;
            p2GameLose += 1;
            
            p1WinLabel.setText("" + p1GameWon);
            p2LoseLabel.setText("" + p2GameLose);
            
        }
        else if(p2TilesControlled > p1TilesControlled){
            p2GameWon += 1;
            p1GameLose += 1;
            
            p2WinLabel.setText("" + p2GameWon);
            p1LoseLabel.setText("" + p1GameLose);
            
        }
        else if(p1TilesControlled == p2TilesControlled){
            tie += 1;
            tieGameLabel.setText("" + tie);
        }
        
        // Restart the game by reseting the board
        playerTurnLabel.setForeground(Color.white);
        playerTurnLabel.setText("It's Player 1's turn");
        p1TilesControlledLabel.setText("2");
        p2TilesControlledLabel.setText("2");
        tile1.setBackground(Color.yellow);
        tile2.setBackground(Color.yellow);
        tile3.setBackground(Color.yellow);
        tile4.setBackground(Color.yellow);
        tile5.setBackground(Color.yellow);
        tile6.setBackground(Color.yellow);
        tile7.setBackground(Color.yellow);
        tile8.setBackground(Color.yellow);
        tile9.setBackground(Color.yellow);
        tile10.setBackground(Color.yellow);
        tile11.setBackground(Color.yellow);
        tile12.setBackground(Color.yellow);
        tile13.setBackground(Color.yellow);
        tile14.setBackground(Color.yellow);
        tile15.setBackground(Color.yellow);
        tile16.setBackground(Color.yellow);
        tile17.setBackground(Color.yellow);
        tile18.setBackground(Color.yellow);
        tile19.setBackground(Color.yellow);
        tile20.setBackground(Color.yellow);
        tile21.setBackground(Color.yellow);
        tile22.setBackground(Color.yellow);
        tile23.setBackground(Color.yellow);
        tile24.setBackground(Color.yellow);
        tile25.setBackground(Color.yellow);
        tile26.setBackground(Color.yellow);
        tile27.setBackground(Color.yellow);
        tile30.setBackground(Color.yellow);
        tile31.setBackground(Color.yellow);
        tile32.setBackground(Color.yellow);
        tile33.setBackground(Color.yellow);
        tile34.setBackground(Color.yellow);
        tile35.setBackground(Color.yellow);
        tile38.setBackground(Color.yellow);
        tile39.setBackground(Color.yellow);
        tile40.setBackground(Color.yellow);
        tile41.setBackground(Color.yellow);
        tile42.setBackground(Color.yellow);
        tile43.setBackground(Color.yellow);
        tile44.setBackground(Color.yellow);
        tile45.setBackground(Color.yellow);
        tile46.setBackground(Color.yellow);
        tile47.setBackground(Color.yellow);
        tile48.setBackground(Color.yellow);
        tile49.setBackground(Color.yellow);
        tile50.setBackground(Color.yellow);
        tile51.setBackground(Color.yellow);
        tile52.setBackground(Color.yellow);
        tile53.setBackground(Color.yellow);
        tile54.setBackground(Color.yellow);
        tile55.setBackground(Color.yellow);
        tile56.setBackground(Color.yellow);
        tile57.setBackground(Color.yellow);
        tile58.setBackground(Color.yellow);
        tile59.setBackground(Color.yellow);
        tile60.setBackground(Color.yellow);
        tile61.setBackground(Color.yellow);
        tile62.setBackground(Color.yellow);
        tile63.setBackground(Color.yellow);
        tile64.setBackground(Color.yellow);
        
        // Starting tiles
        tile28.setBackground(Color.white);
        tile29.setBackground(Color.black);
        tile36.setBackground(Color.black);
        tile37.setBackground(Color.white);
        
        tile28.setIcon(new ImageIcon(whitePiece));
        tile29.setIcon(new ImageIcon(blackPiece));
        tile36.setIcon(new ImageIcon(blackPiece));
        tile37.setIcon(new ImageIcon(whitePiece));
        
        // Reseting all icons
        tile1.setIcon(new ImageIcon(empty));
        tile2.setIcon(new ImageIcon(empty));
        tile3.setIcon(new ImageIcon(empty));
        tile4.setIcon(new ImageIcon(empty));
        tile5.setIcon(new ImageIcon(empty));
        tile6.setIcon(new ImageIcon(empty));
        tile7.setIcon(new ImageIcon(empty));
        tile8.setIcon(new ImageIcon(empty));
        tile9.setIcon(new ImageIcon(empty));
        tile10.setIcon(new ImageIcon(empty));
        tile11.setIcon(new ImageIcon(empty));
        tile12.setIcon(new ImageIcon(empty));
        tile13.setIcon(new ImageIcon(empty));
        tile14.setIcon(new ImageIcon(empty));
        tile15.setIcon(new ImageIcon(empty));
        tile16.setIcon(new ImageIcon(empty));
        tile17.setIcon(new ImageIcon(empty));
        tile18.setIcon(new ImageIcon(empty));
        tile19.setIcon(new ImageIcon(empty));
        tile20.setIcon(new ImageIcon(empty));
        tile21.setIcon(new ImageIcon(empty));
        tile22.setIcon(new ImageIcon(empty));
        tile23.setIcon(new ImageIcon(empty));
        tile24.setIcon(new ImageIcon(empty));
        tile25.setIcon(new ImageIcon(empty));
        tile26.setIcon(new ImageIcon(empty));
        tile27.setIcon(new ImageIcon(empty));
        tile30.setIcon(new ImageIcon(empty));
        tile31.setIcon(new ImageIcon(empty));
        tile32.setIcon(new ImageIcon(empty));
        tile33.setIcon(new ImageIcon(empty));
        tile34.setIcon(new ImageIcon(empty));
        tile35.setIcon(new ImageIcon(empty));
        tile38.setIcon(new ImageIcon(empty));
        tile39.setIcon(new ImageIcon(empty));
        tile40.setIcon(new ImageIcon(empty));
        tile41.setIcon(new ImageIcon(empty));
        tile42.setIcon(new ImageIcon(empty));
        tile43.setIcon(new ImageIcon(empty));
        tile44.setIcon(new ImageIcon(empty));
        tile45.setIcon(new ImageIcon(empty));
        tile46.setIcon(new ImageIcon(empty));
        tile47.setIcon(new ImageIcon(empty));
        tile48.setIcon(new ImageIcon(empty));
        tile49.setIcon(new ImageIcon(empty));
        tile50.setIcon(new ImageIcon(empty));
        tile51.setIcon(new ImageIcon(empty));
        tile52.setIcon(new ImageIcon(empty));
        tile53.setIcon(new ImageIcon(empty));
        tile54.setIcon(new ImageIcon(empty));
        tile55.setIcon(new ImageIcon(empty));
        tile56.setIcon(new ImageIcon(empty));
        tile57.setIcon(new ImageIcon(empty));
        tile58.setIcon(new ImageIcon(empty));
        tile59.setIcon(new ImageIcon(empty));
        tile60.setIcon(new ImageIcon(empty));
        tile61.setIcon(new ImageIcon(empty));
        tile62.setIcon(new ImageIcon(empty));
        tile63.setIcon(new ImageIcon(empty));
        tile64.setIcon(new ImageIcon(empty));
        
        // Reset the tile Counts for each player
        p1TilesControlled = 2;
        p2TilesControlled = 2;
        
        talker.startOfGame();
        
    }//GEN-LAST:event_resetGameButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OthelloGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OthelloGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OthelloGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OthelloGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OthelloGame().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundLBL;
    private javax.swing.JLabel blackPieceLBL;
    private javax.swing.JLabel gameBoard;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel200;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel p1LoseLabel;
    private javax.swing.JLabel p1TilesControlledLabel;
    private javax.swing.JLabel p1WinLabel;
    private javax.swing.JLabel p2LoseLabel;
    private javax.swing.JLabel p2TilesControlledLabel;
    private javax.swing.JLabel p2WinLabel;
    private javax.swing.JLabel playerTurnLabel;
    private javax.swing.JButton resetGameButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JLabel tieGameLabel;
    private javax.swing.JButton tile1;
    private javax.swing.JButton tile10;
    private javax.swing.JButton tile11;
    private javax.swing.JButton tile12;
    private javax.swing.JButton tile13;
    private javax.swing.JButton tile14;
    private javax.swing.JButton tile15;
    private javax.swing.JButton tile16;
    private javax.swing.JButton tile17;
    private javax.swing.JButton tile18;
    private javax.swing.JButton tile19;
    private javax.swing.JButton tile2;
    private javax.swing.JButton tile20;
    private javax.swing.JButton tile21;
    private javax.swing.JButton tile22;
    private javax.swing.JButton tile23;
    private javax.swing.JButton tile24;
    private javax.swing.JButton tile25;
    private javax.swing.JButton tile26;
    private javax.swing.JButton tile27;
    private javax.swing.JButton tile28;
    private javax.swing.JButton tile29;
    private javax.swing.JButton tile3;
    private javax.swing.JButton tile30;
    private javax.swing.JButton tile31;
    private javax.swing.JButton tile32;
    private javax.swing.JButton tile33;
    private javax.swing.JButton tile34;
    private javax.swing.JButton tile35;
    private javax.swing.JButton tile36;
    private javax.swing.JButton tile37;
    private javax.swing.JButton tile38;
    private javax.swing.JButton tile39;
    private javax.swing.JButton tile4;
    private javax.swing.JButton tile40;
    private javax.swing.JButton tile41;
    private javax.swing.JButton tile42;
    private javax.swing.JButton tile43;
    private javax.swing.JButton tile44;
    private javax.swing.JButton tile45;
    private javax.swing.JButton tile46;
    private javax.swing.JButton tile47;
    private javax.swing.JButton tile48;
    private javax.swing.JButton tile49;
    private javax.swing.JButton tile5;
    private javax.swing.JButton tile50;
    private javax.swing.JButton tile51;
    private javax.swing.JButton tile52;
    private javax.swing.JButton tile53;
    private javax.swing.JButton tile54;
    private javax.swing.JButton tile55;
    private javax.swing.JButton tile56;
    private javax.swing.JButton tile57;
    private javax.swing.JButton tile58;
    private javax.swing.JButton tile59;
    private javax.swing.JButton tile6;
    private javax.swing.JButton tile60;
    private javax.swing.JButton tile61;
    private javax.swing.JButton tile62;
    private javax.swing.JButton tile63;
    private javax.swing.JButton tile64;
    private javax.swing.JButton tile7;
    private javax.swing.JButton tile8;
    private javax.swing.JButton tile9;
    private javax.swing.JLabel whitePieceLBL;
    // End of variables declaration//GEN-END:variables
}
