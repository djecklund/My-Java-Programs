/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package customlinkedlist;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author Dillon
 */
public class CustomLinkedListDemo extends javax.swing.JFrame {

    /**
     * Creates new form CustomLinkedListDemo
     */
    
    LinkedList linkedList;
    
    public CustomLinkedListDemo() {
        initComponents();
        
        linkedList = new LinkedList();
        
        ButtonGroup dataTypes = new ButtonGroup();
        dataTypes.add(stringRB);
        dataTypes.add(integerRB);
        dataTypes.add(doubleRB);
        dataTypes.add(charRB);
        dataTypes.add(floatRB);
        dataTypes.add(longRB);
        dataTypes.add(booleanRB);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        enterNameAtIndexTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addAtIndexCB = new javax.swing.JComboBox<>();
        addElementAtIndexButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayNamesTA = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        addElementLBL = new javax.swing.JLabel();
        enterNameTF = new javax.swing.JTextField();
        addElementButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        stringRB = new javax.swing.JRadioButton();
        integerRB = new javax.swing.JRadioButton();
        doubleRB = new javax.swing.JRadioButton();
        charRB = new javax.swing.JRadioButton();
        floatRB = new javax.swing.JRadioButton();
        longRB = new javax.swing.JRadioButton();
        booleanRB = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        deleteAtIndexCB = new javax.swing.JComboBox<>();
        deleteElementAtIndexButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayNames2TA = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        deleteElementTF = new javax.swing.JTextField();
        deleteElementButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        findNameTF = new javax.swing.JTextField();
        findElementButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayNames3TA = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Custom LinkedList");

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Add element add specific index"));

        jLabel2.setText("Enter a Name:");

        enterNameAtIndexTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                enterNameAtIndexTFCaretUpdate(evt);
            }
        });

        jLabel3.setText("What index should it be added:");

        addAtIndexCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        addAtIndexCB.setEnabled(false);
        addAtIndexCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAtIndexCBActionPerformed(evt);
            }
        });

        addElementAtIndexButton.setText("Add Element at index 0");
        addElementAtIndexButton.setEnabled(false);
        addElementAtIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addElementAtIndexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterNameAtIndexTF))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAtIndexCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addElementAtIndexButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enterNameAtIndexTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(addAtIndexCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addElementAtIndexButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displayNamesTA.setEditable(false);
        displayNamesTA.setColumns(20);
        displayNamesTA.setLineWrap(true);
        displayNamesTA.setRows(5);
        jScrollPane1.setViewportView(displayNamesTA);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Add Element"));

        addElementLBL.setText("Enter a String:");

        enterNameTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                enterNameTFCaretUpdate(evt);
            }
        });

        addElementButton.setText("Add to LinkedList");
        addElementButton.setEnabled(false);
        addElementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addElementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addElementButton)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(addElementLBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addElementLBL)
                    .addComponent(enterNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addElementButton)
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Pick a data type"));

        stringRB.setSelected(true);
        stringRB.setText("String");
        stringRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stringRBActionPerformed(evt);
            }
        });

        integerRB.setText("Integer");
        integerRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integerRBActionPerformed(evt);
            }
        });

        doubleRB.setText("Double");
        doubleRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleRBActionPerformed(evt);
            }
        });

        charRB.setText("Char");
        charRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charRBActionPerformed(evt);
            }
        });

        floatRB.setText("Float");
        floatRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floatRBActionPerformed(evt);
            }
        });

        longRB.setText("Long");
        longRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longRBActionPerformed(evt);
            }
        });

        booleanRB.setText("Boolean");
        booleanRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booleanRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(stringRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(integerRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doubleRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(charRB))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(floatRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(longRB)
                        .addGap(18, 18, 18)
                        .addComponent(booleanRB)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stringRB)
                    .addComponent(integerRB)
                    .addComponent(doubleRB)
                    .addComponent(charRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(floatRB)
                    .addComponent(longRB)
                    .addComponent(booleanRB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Adding Element", jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Delete element at specific index"));

        jLabel4.setText("What index should I delete:");

        deleteAtIndexCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        deleteAtIndexCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAtIndexCBActionPerformed(evt);
            }
        });

        deleteElementAtIndexButton.setText("Delete Element at Index 0");
        deleteElementAtIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteElementAtIndexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAtIndexCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(deleteElementAtIndexButton))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(deleteAtIndexCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteElementAtIndexButton)
                .addContainerGap())
        );

        displayNames2TA.setEditable(false);
        displayNames2TA.setColumns(20);
        displayNames2TA.setRows(5);
        jScrollPane2.setViewportView(displayNames2TA);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Delete Specific element"));

        jLabel5.setText("Enter a Name:");

        deleteElementTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                deleteElementTFCaretUpdate(evt);
            }
        });

        deleteElementButton.setText("Delete Specific Element");
        deleteElementButton.setEnabled(false);
        deleteElementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteElementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteElementTF))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(deleteElementButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(deleteElementTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteElementButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Delete Element", jPanel4);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Find the element"));

        jLabel6.setText("Find an element:");

        findNameTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                findNameTFCaretUpdate(evt);
            }
        });

        findElementButton.setText("Find Element");
        findElementButton.setEnabled(false);
        findElementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findElementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findNameTF))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(findElementButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(findNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findElementButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displayNames3TA.setEditable(false);
        displayNames3TA.setColumns(20);
        displayNames3TA.setRows(5);
        jScrollPane3.setViewportView(displayNames3TA);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Find Element", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addElementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addElementButtonActionPerformed
        
        for(int i = addAtIndexCB.getItemCount() - 1; i > 0; i--){
                addAtIndexCB.removeItemAt(i);
        }
                
        if(stringRB.isSelected()){            
            addStringNode();
        }
        else if(integerRB.isSelected()){
            addIntegerNode();
        }
        else if(doubleRB.isSelected()){
            addDoubleNode();
        }
        else if(floatRB.isSelected()){
            addFloatNode();
        }
        else if(longRB.isSelected()){
            addLongNode();
        }
        
        // set the textfield to empty so the user can add new nodes later.
        enterNameTF.setText("");
        
    }//GEN-LAST:event_addElementButtonActionPerformed

    private void addAtIndexCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAtIndexCBActionPerformed
        
        // Change the text of the button based on the index the
        // user has choosen
        String index = addAtIndexCB.getSelectedItem().toString();
        addElementAtIndexButton.setText("Add Element at index " + index);
        
    }//GEN-LAST:event_addAtIndexCBActionPerformed

    private void addElementAtIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addElementAtIndexButtonActionPerformed
        
        if(stringRB.isSelected()){
            addStringNodeAtIndex();
        }
        else if(integerRB.isSelected()){
            addIntegerNodeAtIndex();
        }
        else if(doubleRB.isSelected()){
            addDoubleNodeAtIndex();
        }
        else if(floatRB.isSelected()){
            addFloatNodeAtIndex();
        }
        else if(longRB.isSelected()){
            addLongNodeAtIndex();
        }
        
    }//GEN-LAST:event_addElementAtIndexButtonActionPerformed

    private void deleteElementAtIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteElementAtIndexButtonActionPerformed
        
//        int index = deleteAtIndexCB.getSelectedIndex();
//        
//        boolean check = linkedList.deleteNodeAtIndex(index);
//        
//        if(check == true){
//            displayNames2TA.setText(linkedList.showStringData());
//            addAtIndexCB.removeItemAt(linkedList.listCounter + 1);
//            deleteAtIndexCB.removeItemAt(linkedList.listCounter + 1);
//            
//            addAtIndexCB.setSelectedIndex(0);
//            deleteAtIndexCB.setSelectedIndex(0);
//            
//            addElementAtIndexButton.setText("Add Element at index " + index);
//            deleteElementAtIndexButton.setText("Delete Element at Index " + index);
//            
//        }
        
    }//GEN-LAST:event_deleteElementAtIndexButtonActionPerformed

    private void deleteElementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteElementButtonActionPerformed
        
//        String data = deleteElementTF.getText();
//        
//        deleteAtIndexCB.removeItemAt(linkedList.listCounter - 1);
//        addAtIndexCB.removeItemAt(linkedList.listCounter - 1);
//        
//        linkedList.deleteNodeWithData(data);
//        
//        displayNames2TA.setText(linkedList.showStringData());
//        
//        deleteElementTF.setText("");
        
    }//GEN-LAST:event_deleteElementButtonActionPerformed

    private void deleteAtIndexCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAtIndexCBActionPerformed
        
        // Change the text of the button to reflect the index you have choosen
        String strIndex = deleteAtIndexCB.getSelectedItem().toString();
        deleteElementAtIndexButton.setText("Delete Element at Index " + strIndex);
        
    }//GEN-LAST:event_deleteAtIndexCBActionPerformed

    private void findElementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findElementButtonActionPerformed
        
        // Find the node that contains the data and return it
        // and every node after it.
        String name = linkedList.find(findNameTF.getText());
        
        displayNames3TA.setText(name);
        findNameTF.setText("");
        
    }//GEN-LAST:event_findElementButtonActionPerformed

    private void enterNameTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_enterNameTFCaretUpdate
        
        // Don't let the user submit their request to create a node unless it is getting
        // valid data.
        if(enterNameTF.getText().equals("") || enterNameTF.getText().startsWith(" ")){
            addElementButton.setEnabled(false);
        }
        else{
            addElementButton.setEnabled(true);
        }
        
    }//GEN-LAST:event_enterNameTFCaretUpdate

    private void enterNameAtIndexTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_enterNameAtIndexTFCaretUpdate
        
        // Don't let the user submit their request to create a node unless it is getting
        // valid data.
        if(enterNameAtIndexTF.getText().equals("") || enterNameAtIndexTF.getText().startsWith(" ")){
            addAtIndexCB.setEnabled(false);
            addElementAtIndexButton.setEnabled(false);
        }
        else{
            addAtIndexCB.setEnabled(true);
            addElementAtIndexButton.setEnabled(true);
        }
        
    }//GEN-LAST:event_enterNameAtIndexTFCaretUpdate

    private void findNameTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_findNameTFCaretUpdate
        
        // Don't let the user submit their request to search for a node with the data requested
        // unless it is getting valid data.
        if(findNameTF.getText().equals("") || findNameTF.getText().startsWith(" ")){
            findElementButton.setEnabled(false);
        }
        else{
            findElementButton.setEnabled(true);
        }
        
    }//GEN-LAST:event_findNameTFCaretUpdate

    private void deleteElementTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_deleteElementTFCaretUpdate
        
        // Don't let the user submit their request to delete a node unless it is getting
        // valid data.
        if(deleteElementTF.getText().equals("") || deleteElementTF.getText().startsWith(" ")){
            deleteElementButton.setEnabled(false);
        }
        else{
            deleteElementButton.setEnabled(true);
        }
        
    }//GEN-LAST:event_deleteElementTFCaretUpdate

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        
        if(jTabbedPane1.getSelectedIndex() == 1){
            jTabbedPane1.setSelectedIndex(0);
            JOptionPane.showMessageDialog(null, "Sorry, the Delete Element tab is still being worked on...");
        }
        
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void stringRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stringRBActionPerformed
        addElementLBL.setText("Enter a String:");
    }//GEN-LAST:event_stringRBActionPerformed

    private void integerRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integerRBActionPerformed
        addElementLBL.setText("Enter an Integer:");
    }//GEN-LAST:event_integerRBActionPerformed

    private void doubleRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleRBActionPerformed
        addElementLBL.setText("Enter a Double:");
    }//GEN-LAST:event_doubleRBActionPerformed

    private void charRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charRBActionPerformed
        addElementLBL.setText("Enter a Letter:");
    }//GEN-LAST:event_charRBActionPerformed

    private void floatRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floatRBActionPerformed
        addElementLBL.setText("Enter a Float:");
    }//GEN-LAST:event_floatRBActionPerformed

    private void longRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longRBActionPerformed
        addElementLBL.setText("Enter a Long:");
    }//GEN-LAST:event_longRBActionPerformed

    private void booleanRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booleanRBActionPerformed
        addElementLBL.setText("Enter true or false:");
    }//GEN-LAST:event_booleanRBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomLinkedListDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomLinkedListDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomLinkedListDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomLinkedListDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomLinkedListDemo().setVisible(true);
            }
        });
    }
    
    // addStringNode method
    public void addStringNode(){
        
        linkedList.add(enterNameTF.getText());
            
        // Add the new node to the LinkedList.
        // The add and delete combo boxes start out with a zero index populated in them.
        // Each time a new node is added, the combo boxes will get a new index added.
        if(linkedList.stringListCounter > 1){
            
            for(int i = 1; i < linkedList.stringListCounter; i++){
               addAtIndexCB.addItem("" + i);
            }
                
        }

        // display the contents of the LinkedList
        displayNamesTA.setText(linkedList.showStringData());
        enterNameTF.setText("");
        
    }
    // End of addStringNode method
    
    // addIntegerNode method
    public void addIntegerNode(){
        
        try{
                
                linkedList.add(Integer.parseInt(enterNameTF.getText()));
                
                if(linkedList.intListCounter > 1){
                    
                    for(int i = 1; i < linkedList.intListCounter; i++){
                        addAtIndexCB.addItem("" + i);
                    }
                    
                }
                
                displayNamesTA.setText(linkedList.showIntegerData());
                enterNameTF.setText("");
                
            }catch(NumberFormatException num){
                
            }
    }
    // End of addIntegerNode method
    
    // addDoubleNode method
    public void addDoubleNode(){
        
        try{
                
                linkedList.add(Double.parseDouble(enterNameTF.getText()));
                
                if(linkedList.doubleListCounter > 1){
                    
                    for(int i = 1; i < linkedList.doubleListCounter; i++){
                        addAtIndexCB.addItem("" + i);
                    }
                    
                }
                
                displayNamesTA.setText(linkedList.showDoubleData());
                enterNameTF.setText("");
                
            }catch(NumberFormatException num){
                
            }
    }
    // End of addDoubleNode method
    
    // addFloatNode method
    public void addFloatNode(){
        
        try{
                
                linkedList.add(Float.parseFloat(enterNameTF.getText()));
                
                if(linkedList.floatListCounter > 1){
                    
                    for(int i = 1; i < linkedList.floatListCounter; i++){
                        addAtIndexCB.addItem("" + i);
                    }
                    
                }
                
                displayNamesTA.setText(linkedList.showFloatData());
                enterNameTF.setText("");
                
            }catch(NumberFormatException num){
                
            }
        
    }
    // End of addFloatNode method
    
    // addLongNode method
    public void addLongNode(){
        
        try{
                
                linkedList.add(Long.parseLong(enterNameTF.getText()));
                
                if(linkedList.longListCounter > 1){
                    
                    for(int i = 1; i < linkedList.longListCounter; i++){
                        addAtIndexCB.addItem("" + i);
                    }
                    
                }
                
                displayNamesTA.setText(linkedList.showLongData());
                enterNameTF.setText("");
                
            }catch(NumberFormatException num){
                
            }
        
    }
    // End of addLongNode method
    
    // addStringNodeAtIndex method
    public void addStringNodeAtIndex(){
        
        // get the index
        int index = addAtIndexCB.getSelectedIndex();
            
        for(int i = addAtIndexCB.getItemCount() - 1; i > 0; i--){
            addAtIndexCB.removeItemAt(i);
        }
                    
        // check to see if the index for the exists in the LinkedList
        // If it does exist add the node to that index and shift all nodes after it
        // over one.
        boolean check = linkedList.add(enterNameAtIndexTF.getText(), index);

        // If the index exists, add the node to that index.
        // Add another index value to the combo boxes and set the textfield empty
        // so the user can use the textfield again.
        if(check == true){
                
            for(int i = 1; i < linkedList.stringListCounter; i++){
                addAtIndexCB.addItem("" + i);
                deleteAtIndexCB.addItem("" + i);
            }
                
            enterNameAtIndexTF.setText("");
            displayNamesTA.setText(linkedList.showStringData());
        }
        else{
            enterNameAtIndexTF.setText("");
        }
    }
    // End of addStringNodeAtIndex method
    
    // addIntegerNodeAtIndex method
    public void addIntegerNodeAtIndex(){
        
        // get the index
        int index = addAtIndexCB.getSelectedIndex();
            
        for(int i = addAtIndexCB.getItemCount() - 1; i > 0; i--){
            addAtIndexCB.removeItemAt(i);
        }
                        
        // check to see if the index for the exists in the LinkedList
        // If it does exist add the node to that index and shift all nodes after it
        // over one.
        try{
            
            int intData = Integer.parseInt(enterNameAtIndexTF.getText());
            
            boolean check = linkedList.add(intData, index);

            // If the index exists, add the node to that index.
            // Add another index value to the combo boxes and set the textfield empty
            // so the user can use the textfield again.
            if(check == true){

                for(int i = 1; i < linkedList.intListCounter; i++){
                    addAtIndexCB.addItem("" + i);
                    deleteAtIndexCB.addItem("" + i);
                }

                enterNameAtIndexTF.setText("");
                displayNamesTA.setText(linkedList.showIntegerData());
            }
            else{
                enterNameAtIndexTF.setText("");
            }
            
        }catch(NumberFormatException num){
            
        }
        
    }
    // End of addIntegerNodeAtIndex method
    
    // addDoubleNodeAtIndex method
    public void addDoubleNodeAtIndex(){
        
        // get the index
        int index = addAtIndexCB.getSelectedIndex();
            
        for(int i = addAtIndexCB.getItemCount() - 1; i > 0; i--){
            addAtIndexCB.removeItemAt(i);
        }
                        
        // check to see if the index for the exists in the LinkedList
        // If it does exist add the node to that index and shift all nodes after it
        // over one.
        try{
            
            double doubleData = Double.parseDouble(enterNameAtIndexTF.getText());
            
            boolean check = linkedList.add(doubleData, index);

            // If the index exists, add the node to that index.
            // Add another index value to the combo boxes and set the textfield empty
            // so the user can use the textfield again.
            if(check == true){

                for(int i = 1; i < linkedList.doubleListCounter; i++){
                    addAtIndexCB.addItem("" + i);
                    deleteAtIndexCB.addItem("" + i);
                }

                enterNameAtIndexTF.setText("");
                displayNamesTA.setText(linkedList.showDoubleData());
            }
            else{
                enterNameAtIndexTF.setText("");
            }
            
        }catch(NumberFormatException num){
            
        }
        
    }
    // End of addDoubleNodeAtIndex method
    
    // addFloatNodeAtIndex method
    public void addFloatNodeAtIndex(){
        
        // get the index
        int index = addAtIndexCB.getSelectedIndex();
            
        for(int i = addAtIndexCB.getItemCount() - 1; i > 0; i--){
            addAtIndexCB.removeItemAt(i);
        }
                        
        // check to see if the index for the exists in the LinkedList
        // If it does exist add the node to that index and shift all nodes after it
        // over one.
        try{
            
            float floatData = Float.parseFloat(enterNameAtIndexTF.getText());
            
            boolean check = linkedList.add(floatData, index);

            // If the index exists, add the node to that index.
            // Add another index value to the combo boxes and set the textfield empty
            // so the user can use the textfield again.
            if(check == true){

                for(int i = 1; i < linkedList.floatListCounter; i++){
                    addAtIndexCB.addItem("" + i);
                    deleteAtIndexCB.addItem("" + i);
                }

                enterNameAtIndexTF.setText("");
                displayNamesTA.setText(linkedList.showFloatData());
            }
            else{
                enterNameAtIndexTF.setText("");
            }
            
        }catch(NumberFormatException num){
            
        }
        
    }
    // End of addFloatNodeAtIndex method
    
    // addLongNodeAtIndex method
    public void addLongNodeAtIndex(){
        
        // get the index
        int index = addAtIndexCB.getSelectedIndex();
            
        for(int i = addAtIndexCB.getItemCount() - 1; i > 0; i--){
            addAtIndexCB.removeItemAt(i);
        }
                        
        // check to see if the index for the exists in the LinkedList
        // If it does exist add the node to that index and shift all nodes after it
        // over one.
        try{
            
            long longData = Long.parseLong(enterNameAtIndexTF.getText());
            
            boolean check = linkedList.add(longData, index);

            // If the index exists, add the node to that index.
            // Add another index value to the combo boxes and set the textfield empty
            // so the user can use the textfield again.
            if(check == true){

                for(int i = 1; i < linkedList.longListCounter; i++){
                    addAtIndexCB.addItem("" + i);
                    deleteAtIndexCB.addItem("" + i);
                }

                enterNameAtIndexTF.setText("");
                displayNamesTA.setText(linkedList.showLongData());
            }
            else{
                enterNameAtIndexTF.setText("");
            }
            
        }catch(NumberFormatException num){
            
        }
        
    }
    // End of addLongNodeAtIndex method

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> addAtIndexCB;
    private javax.swing.JButton addElementAtIndexButton;
    private javax.swing.JButton addElementButton;
    private javax.swing.JLabel addElementLBL;
    private javax.swing.JRadioButton booleanRB;
    private javax.swing.JRadioButton charRB;
    private javax.swing.JComboBox<String> deleteAtIndexCB;
    private javax.swing.JButton deleteElementAtIndexButton;
    private javax.swing.JButton deleteElementButton;
    private javax.swing.JTextField deleteElementTF;
    private javax.swing.JTextArea displayNames2TA;
    private javax.swing.JTextArea displayNames3TA;
    private javax.swing.JTextArea displayNamesTA;
    private javax.swing.JRadioButton doubleRB;
    private javax.swing.JTextField enterNameAtIndexTF;
    private javax.swing.JTextField enterNameTF;
    private javax.swing.JButton findElementButton;
    private javax.swing.JTextField findNameTF;
    private javax.swing.JRadioButton floatRB;
    private javax.swing.JRadioButton integerRB;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton longRB;
    private javax.swing.JRadioButton stringRB;
    // End of variables declaration//GEN-END:variables
}
