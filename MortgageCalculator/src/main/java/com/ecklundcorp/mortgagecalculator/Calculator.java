/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ecklundcorp.mortgagecalculator;

import java.text.DecimalFormat;

/**
 *
 * @author Dillon
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    
    DecimalFormat money;
    DecimalFormat percentFormat;
    
    Calculations calc;
    
    public Calculator() {
        initComponents();
        
        money = new DecimalFormat("$#,##0.00");
        percentFormat = new DecimalFormat("##0.00%");
        calc = new Calculations();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        taxesTF = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        insuranceTF = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        HOATF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        housePriceTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        downPaymentLBL = new javax.swing.JLabel();
        loanAmountLBL = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        annualInterestRateTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lifeOfLoanTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        numberOfPaymentsPerYearLBL = new javax.swing.JLabel();
        paymentPerPeriodLBL = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        sumOfPaymentsLBL = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        interestCostLBL = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        person1IncomeTF = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        person2IncomeTF = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        extraIncomeTF = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        totalGrossLBL = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        totalNetLBL = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        monthlyNetLBL = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        utilitiesTF = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        totalLBL = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        totalUtilLBL = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        canIAffordItLBL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        canIAffordTA = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mortgage Calculator");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "How much house can you afford?"));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Additional Fees"));

        jLabel10.setText("Taxes (annual)");

        taxesTF.setText("0.00");
        taxesTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                taxesTFCaretUpdate(evt);
            }
        });

        jLabel11.setText("Insurance (annual)");

        insuranceTF.setText("0.00");
        insuranceTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                insuranceTFCaretUpdate(evt);
            }
        });

        jLabel12.setText("HOA (per month)");

        HOATF.setText("0.00");
        HOATF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                HOATFCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taxesTF)
                    .addComponent(insuranceTF)
                    .addComponent(HOATF))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(taxesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(insuranceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(HOATF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("House Price");

        housePriceTF.setText("0.00");
        housePriceTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                housePriceTFCaretUpdate(evt);
            }
        });

        jLabel2.setText("Down payment (20%)");

        jLabel3.setText("Loan Amount");

        downPaymentLBL.setText("$0.00");
        downPaymentLBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        loanAmountLBL.setText("$0.00");
        loanAmountLBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("Annual Interest Rate");

        annualInterestRateTF.setText("4.50");
        annualInterestRateTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                annualInterestRateTFCaretUpdate(evt);
            }
        });

        jLabel5.setText("Life of Loan (Years)");

        lifeOfLoanTF.setText("30");
        lifeOfLoanTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                lifeOfLoanTFCaretUpdate(evt);
            }
        });

        jLabel6.setText("Number of Payments per Year");

        jLabel7.setText("Payment per Period");

        numberOfPaymentsPerYearLBL.setText("12");
        numberOfPaymentsPerYearLBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        paymentPerPeriodLBL.setText("$0.00");
        paymentPerPeriodLBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setText("Sum of Payments");

        sumOfPaymentsLBL.setText("$0.00");
        sumOfPaymentsLBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setText("Interest Cost");

        interestCostLBL.setText("$0.00");
        interestCostLBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Income Information"));

        jLabel16.setText("Person 1's income:");

        person1IncomeTF.setText("0.00");
        person1IncomeTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                person1IncomeTFCaretUpdate(evt);
            }
        });

        jLabel17.setText("Person 2's income:");

        person2IncomeTF.setText("0.00");
        person2IncomeTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                person2IncomeTFCaretUpdate(evt);
            }
        });

        jLabel18.setText("Extra Income:");

        extraIncomeTF.setText("0.00");
        extraIncomeTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                extraIncomeTFCaretUpdate(evt);
            }
        });

        jLabel19.setText("Total Gross:");

        totalGrossLBL.setText("$0.00");

        jLabel20.setText("Total Net:");

        totalNetLBL.setText("$0.00");

        jLabel21.setText("Monthly Net:");

        monthlyNetLBL.setText("$0.00");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(person1IncomeTF))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(person2IncomeTF)
                            .addComponent(extraIncomeTF)
                            .addComponent(totalGrossLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalNetLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(monthlyNetLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(person1IncomeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(person2IncomeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(extraIncomeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(totalGrossLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(totalNetLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(monthlyNetLBL))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel14.setText("Utilities");

        utilitiesTF.setText("300.00");
        utilitiesTF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                utilitiesTFCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(loanAmountLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(housePriceTF, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(downPaymentLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(annualInterestRateTF)
                        .addComponent(lifeOfLoanTF)
                        .addComponent(numberOfPaymentsPerYearLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paymentPerPeriodLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sumOfPaymentsLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(interestCostLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(utilitiesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(housePriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(downPaymentLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(loanAmountLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(annualInterestRateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lifeOfLoanTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(numberOfPaymentsPerYearLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(paymentPerPeriodLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(sumOfPaymentsLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(interestCostLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(utilitiesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Results"));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Monthly Mortgage Results"));

        jLabel13.setText("Mortgage + Tax + Insurance + HOA:");

        totalLBL.setText("$0.00");

        jLabel15.setText("With Utilities:");

        totalUtilLBL.setText("$0.00");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                    .addComponent(totalUtilLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(106, 106, 106))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(totalLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(totalUtilLBL))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Can you afford it with your current income?"));

        canIAffordItLBL.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        canIAffordItLBL.setText("Maybe?!?");

        canIAffordTA.setEditable(false);
        canIAffordTA.setColumns(20);
        canIAffordTA.setRows(5);
        jScrollPane1.setViewportView(canIAffordTA);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canIAffordItLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canIAffordItLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void utilitiesTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_utilitiesTFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_utilitiesTFCaretUpdate

    private void lifeOfLoanTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_lifeOfLoanTFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_lifeOfLoanTFCaretUpdate

    private void annualInterestRateTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_annualInterestRateTFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_annualInterestRateTFCaretUpdate

    private void housePriceTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_housePriceTFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_housePriceTFCaretUpdate

    private void HOATFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_HOATFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_HOATFCaretUpdate

    private void insuranceTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_insuranceTFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_insuranceTFCaretUpdate

    private void taxesTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_taxesTFCaretUpdate

        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }

    }//GEN-LAST:event_taxesTFCaretUpdate

    private void person1IncomeTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_person1IncomeTFCaretUpdate
        
        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }
        
    }//GEN-LAST:event_person1IncomeTFCaretUpdate

    private void person2IncomeTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_person2IncomeTFCaretUpdate
        
        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }
        
    }//GEN-LAST:event_person2IncomeTFCaretUpdate

    private void extraIncomeTFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_extraIncomeTFCaretUpdate
        
        if(calc.determineIfNumber(housePriceTF.getText(), annualInterestRateTF.getText(), lifeOfLoanTF.getText(), utilitiesTF.getText(), taxesTF.getText(), insuranceTF.getText(), HOATF.getText(), person1IncomeTF.getText(), person2IncomeTF.getText(), extraIncomeTF.getText())){

            double downPayment = calc.getDownPayment(housePriceTF.getText());
            downPaymentLBL.setText(money.format(downPayment));
            loanAmountLBL.setText(money.format(calc.getLoanAmount(housePriceTF.getText(), downPayment)));
            paymentPerPeriodLBL.setText(money.format(calc.getPaymentPerPeriod(Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()), Double.parseDouble(annualInterestRateTF.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            sumOfPaymentsLBL.setText(money.format(calc.getSumOfPayments(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Integer.parseInt(lifeOfLoanTF.getText()), Integer.parseInt(numberOfPaymentsPerYearLBL.getText()))));
            interestCostLBL.setText(money.format(calc.getInterestCost(Double.parseDouble(sumOfPaymentsLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(loanAmountLBL.getText().replace("$", "").replace(",", "")))));
            totalLBL.setText(money.format(calc.getTotalMonthlyMortgage(Double.parseDouble(paymentPerPeriodLBL.getText().replace("$", "").replace(",", "")), Double.parseDouble(insuranceTF.getText()), Double.parseDouble(taxesTF.getText()), Double.parseDouble(HOATF.getText()))));
            totalUtilLBL.setText(money.format(Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) + Double.parseDouble(utilitiesTF.getText().replace("$", "").replace(",", ""))));
            totalGrossLBL.setText(money.format(calc.getGrossIncome(Double.parseDouble(person1IncomeTF.getText()), Double.parseDouble(person2IncomeTF.getText()), Double.parseDouble(extraIncomeTF.getText()))));
            totalNetLBL.setText(money.format(calc.getTotalNetIncome(Double.parseDouble(totalGrossLBL.getText().replace("$", "").replace(",", "")))));
            monthlyNetLBL.setText(money.format(Double.parseDouble(totalNetLBL.getText().replace("$", "").replace(",", "")) / 12));
            
            double mortgagePercentIncome = Double.parseDouble(totalLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            double utilMortgagePercentIncome = Double.parseDouble(totalUtilLBL.getText().replace("$", "").replace(",", "")) / Double.parseDouble(monthlyNetLBL.getText().replace("$", "").replace(",", ""));
            
            if(mortgagePercentIncome < 0.29 && utilMortgagePercentIncome < 0.29){
                                
                canIAffordItLBL.setText("Yes");
                canIAffordTA.setText("You can afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.");
            }
            else{
                canIAffordItLBL.setText("No");
                canIAffordTA.setText("You can't afford this mortgage.\n"
                + "Your mortgage would take up " + percentFormat.format(mortgagePercentIncome) + " of your pre utilities payment.\n"
                + "Your mortgage would take up " + percentFormat.format(utilMortgagePercentIncome) + " of your post utilities payment.\n"
                + "It is recomended to have a mortgage of 28%  or less of your net income.");
            }
            
        }
        else{
            downPaymentLBL.setText("ERROR");
            loanAmountLBL.setText("ERROR");
            paymentPerPeriodLBL.setText("ERROR");
            sumOfPaymentsLBL.setText("ERROR");
            interestCostLBL.setText("ERROR");
            totalLBL.setText("ERROR");
            totalUtilLBL.setText("ERROR");
            totalGrossLBL.setText("ERROR");
            totalNetLBL.setText("ERROR");
            monthlyNetLBL.setText("ERROR");
        }
        
    }//GEN-LAST:event_extraIncomeTFCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField HOATF;
    private javax.swing.JTextField annualInterestRateTF;
    private javax.swing.JLabel canIAffordItLBL;
    private javax.swing.JTextArea canIAffordTA;
    private javax.swing.JLabel downPaymentLBL;
    private javax.swing.JTextField extraIncomeTF;
    private javax.swing.JTextField housePriceTF;
    private javax.swing.JTextField insuranceTF;
    private javax.swing.JLabel interestCostLBL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lifeOfLoanTF;
    private javax.swing.JLabel loanAmountLBL;
    private javax.swing.JLabel monthlyNetLBL;
    private javax.swing.JLabel numberOfPaymentsPerYearLBL;
    private javax.swing.JLabel paymentPerPeriodLBL;
    private javax.swing.JTextField person1IncomeTF;
    private javax.swing.JTextField person2IncomeTF;
    private javax.swing.JLabel sumOfPaymentsLBL;
    private javax.swing.JTextField taxesTF;
    private javax.swing.JLabel totalGrossLBL;
    private javax.swing.JLabel totalLBL;
    private javax.swing.JLabel totalNetLBL;
    private javax.swing.JLabel totalUtilLBL;
    private javax.swing.JTextField utilitiesTF;
    // End of variables declaration//GEN-END:variables
}
